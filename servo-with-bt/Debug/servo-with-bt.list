
servo-with-bt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800aa88  0800aa88  0001aa88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd4  0800afd4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afdc  0800afdc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe0  0800afe0  0001afe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800afe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  200001e8  0800b1c8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb8  0800b1c8  00024cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f9e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355c  00000000  00000000  000391b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b66  00000000  00000000  0003f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001789d  00000000  00000000  00043bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc770  00000000  00000000  0005b45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137bcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d20  00000000  00000000  00137c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa6c 	.word	0x0800aa6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800aa6c 	.word	0x0800aa6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b9aa 	b.w	8000f94 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f83c 	bl	8000cc4 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2lz>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	460d      	mov	r5, r1
 8000c62:	f7ff ff5b 	bl	8000b1c <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x1c>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4620      	mov	r0, r4
 8000c76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fcd1 	bl	8000638 <__aeabi_dmul>
 8000c96:	f7ff ffa7 	bl	8000be8 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fc52 	bl	8000544 <__aeabi_ui2d>
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f7ff fcc8 	bl	8000638 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fb0a 	bl	80002c8 <__aeabi_dsub>
 8000cb4:	f7ff ff98 	bl	8000be8 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000

08000cc4 <__udivmoddi4>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	9d08      	ldr	r5, [sp, #32]
 8000cca:	4604      	mov	r4, r0
 8000ccc:	468e      	mov	lr, r1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d14d      	bne.n	8000d6e <__udivmoddi4+0xaa>
 8000cd2:	428a      	cmp	r2, r1
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	d969      	bls.n	8000dac <__udivmoddi4+0xe8>
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	b152      	cbz	r2, 8000cf4 <__udivmoddi4+0x30>
 8000cde:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce2:	f1c2 0120 	rsb	r1, r2, #32
 8000ce6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cee:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf2:	4094      	lsls	r4, r2
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	0c21      	lsrs	r1, r4, #16
 8000cfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000cfe:	fa1f f78c 	uxth.w	r7, ip
 8000d02:	fb08 e316 	mls	r3, r8, r6, lr
 8000d06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0a:	fb06 f107 	mul.w	r1, r6, r7
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x64>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 811f 	bcs.w	8000f5c <__udivmoddi4+0x298>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 811c 	bls.w	8000f5c <__udivmoddi4+0x298>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 f707 	mul.w	r7, r0, r7
 8000d3c:	42a7      	cmp	r7, r4
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x92>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d48:	f080 810a 	bcs.w	8000f60 <__udivmoddi4+0x29c>
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	f240 8107 	bls.w	8000f60 <__udivmoddi4+0x29c>
 8000d52:	4464      	add	r4, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5a:	1be4      	subs	r4, r4, r7
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa4>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xc2>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80ef 	beq.w	8000f56 <__udivmoddi4+0x292>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x160>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd4>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80f9 	bhi.w	8000f8a <__udivmoddi4+0x2c6>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	469e      	mov	lr, r3
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa4>
 8000da6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa4>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xec>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 8092 	bne.w	8000ede <__udivmoddi4+0x21a>
 8000dba:	eba1 010c 	sub.w	r1, r1, ip
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2601      	movs	r6, #1
 8000dc8:	0c20      	lsrs	r0, r4, #16
 8000dca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dce:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd6:	fb0e f003 	mul.w	r0, lr, r3
 8000dda:	4288      	cmp	r0, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x12c>
 8000dde:	eb1c 0101 	adds.w	r1, ip, r1
 8000de2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x12a>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2c0>
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1110 	mls	r1, r7, r0, r1
 8000dfc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x156>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x154>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2ca>
 8000e18:	4608      	mov	r0, r1
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e22:	e79c      	b.n	8000d5e <__udivmoddi4+0x9a>
 8000e24:	f1c6 0720 	rsb	r7, r6, #32
 8000e28:	40b3      	lsls	r3, r6
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa20 f407 	lsr.w	r4, r0, r7
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	431c      	orrs	r4, r3
 8000e3c:	40f9      	lsrs	r1, r7
 8000e3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e42:	fa00 f306 	lsl.w	r3, r0, r6
 8000e46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4a:	0c20      	lsrs	r0, r4, #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fb09 1118 	mls	r1, r9, r8, r1
 8000e54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e58:	fb08 f00e 	mul.w	r0, r8, lr
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b8>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2bc>
 8000e70:	4288      	cmp	r0, r1
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2bc>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4461      	add	r1, ip
 8000e7c:	1a09      	subs	r1, r1, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e84:	fb09 1110 	mls	r1, r9, r0, r1
 8000e88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e90:	458e      	cmp	lr, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1e2>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2b4>
 8000e9e:	458e      	cmp	lr, r1
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2b4>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000eae:	eba1 010e 	sub.w	r1, r1, lr
 8000eb2:	42a1      	cmp	r1, r4
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46a6      	mov	lr, r4
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x2a4>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x2a0>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x212>
 8000ebe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ec6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ece:	40f1      	lsrs	r1, r6
 8000ed0:	431f      	orrs	r7, r3
 8000ed2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	f1c2 0320 	rsb	r3, r2, #32
 8000ee2:	40d8      	lsrs	r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa21 f303 	lsr.w	r3, r1, r3
 8000eec:	4091      	lsls	r1, r2
 8000eee:	4301      	orrs	r1, r0
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000efc:	fb07 3610 	mls	r6, r7, r0, r3
 8000f00:	0c0b      	lsrs	r3, r1, #16
 8000f02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f06:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0a:	429e      	cmp	r6, r3
 8000f0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x260>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b8>
 8000f1c:	429e      	cmp	r6, r3
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b8>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1b9b      	subs	r3, r3, r6
 8000f26:	b289      	uxth	r1, r1
 8000f28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f34:	fb06 f30e 	mul.w	r3, r6, lr
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x28a>
 8000f3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2b0>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2b0>
 8000f4a:	3e02      	subs	r6, #2
 8000f4c:	4461      	add	r1, ip
 8000f4e:	1ac9      	subs	r1, r1, r3
 8000f50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0x104>
 8000f56:	462e      	mov	r6, r5
 8000f58:	4628      	mov	r0, r5
 8000f5a:	e705      	b.n	8000d68 <__udivmoddi4+0xa4>
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	e6e3      	b.n	8000d28 <__udivmoddi4+0x64>
 8000f60:	4618      	mov	r0, r3
 8000f62:	e6f8      	b.n	8000d56 <__udivmoddi4+0x92>
 8000f64:	454b      	cmp	r3, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f8>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f70:	3801      	subs	r0, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f8>
 8000f74:	4646      	mov	r6, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x28a>
 8000f78:	4620      	mov	r0, r4
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1e2>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x260>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b8>
 8000f84:	3b02      	subs	r3, #2
 8000f86:	4461      	add	r1, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x12c>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e709      	b.n	8000da2 <__udivmoddi4+0xde>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x156>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	while (HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) != HAL_OK) {};
 8000fa0:	bf00      	nop
 8000fa2:	1d39      	adds	r1, r7, #4
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <__io_putchar+0x28>)
 8000faa:	f002 f808 	bl	8002fbe <HAL_UART_Transmit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f6      	bne.n	8000fa2 <__io_putchar+0xa>
	return ch;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000204 	.word	0x20000204

08000fc4 <__io_getchar>:
#define GETCHAR_PROTOTYPE int __io_getchar (void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE * f)
#endif /* __GNUC__ */
GETCHAR_PROTOTYPE
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	// Clear the Overrun flag just before receiving the first character
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <__io_getchar+0x4c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <__io_getchar+0x4c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fe4:	1df9      	adds	r1, r7, #7
 8000fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fea:	2201      	movs	r2, #1
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <__io_getchar+0x4c>)
 8000fee:	f002 f878 	bl	80030e2 <HAL_UART_Receive>
	while (HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) != HAL_OK) {};
 8000ff2:	bf00      	nop
 8000ff4:	1df9      	adds	r1, r7, #7
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <__io_getchar+0x4c>)
 8000ffc:	f001 ffdf 	bl	8002fbe <HAL_UART_Transmit>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f6      	bne.n	8000ff4 <__io_getchar+0x30>
	return ch;
 8001006:	79fb      	ldrb	r3, [r7, #7]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000204 	.word	0x20000204

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f000 fbfb 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f85d 	bl	80010dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 f921 	bl	8001268 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001026:	f000 f8cb 	bl	80011c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //MX_DMA_Init();
  MX_USART6_UART_Init();
 800102a:	f000 f8f3 	bl	8001214 <MX_USART6_UART_Init>

  // Start receiving from hurat6. When 1 byte is received then HAL_UART_RxCpltCallback is called.
  //HAL_UART_Receive_IT(&huart6, rxDataFromBt, 50);

  HAL_Delay(1000);
 800102e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001032:	f000 fc31 	bl	8001898 <HAL_Delay>

  char testData[] = "Test Data\r\n";
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <main+0x98>)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	ca07      	ldmia	r2, {r0, r1, r2}
 800103c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  counter = 0;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <main+0x9c>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]

  // Set DIRECTION of a servo motor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104c:	4819      	ldr	r0, [pc, #100]	; (80010b4 <main+0xa0>)
 800104e:	f000 febd 	bl	8001dcc <HAL_GPIO_WritePin>
  //HAL_UART_Receive_IT(&huart6, rxDataFromBt, 8);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001052:	f002 fceb 	bl	8003a2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of servoControlTask */
  servoControlTaskHandle = osThreadNew(StartServoControl, NULL, &servoControlTask_attributes);
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <main+0xa4>)
 8001058:	2100      	movs	r1, #0
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <main+0xa8>)
 800105c:	f002 fd30 	bl	8003ac0 <osThreadNew>
 8001060:	4603      	mov	r3, r0
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <main+0xac>)
 8001064:	6013      	str	r3, [r2, #0]

  /* creation of uartPollTask */
  uartPollTaskHandle = osThreadNew(StartUartPoll, NULL, &uartPollTask_attributes);
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <main+0xb0>)
 8001068:	2100      	movs	r1, #0
 800106a:	4817      	ldr	r0, [pc, #92]	; (80010c8 <main+0xb4>)
 800106c:	f002 fd28 	bl	8003ac0 <osThreadNew>
 8001070:	4603      	mov	r3, r0
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <main+0xb8>)
 8001074:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001076:	f002 fcfd 	bl	8003a74 <osKernelStart>
	  //HAL_UART_Transmit(&huart6, testData, strlen(testData), 500u);
	  //printf("Running... %lu\r\n", counter++);
	  //HAL_Delay(2000);

	  //printf ("%f\r\n", targetRotation);
		if (targetRotation != prevTargetRotation)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <main+0xbc>)
 800107c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <main+0xc0>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff fd3f 	bl	8000b08 <__aeabi_dcmpeq>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f4      	bne.n	800107a <main+0x66>
		{
			prevTargetRotation = targetRotation;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <main+0xbc>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	490f      	ldr	r1, [pc, #60]	; (80010d4 <main+0xc0>)
 8001098:	e9c1 2300 	strd	r2, r3, [r1]
//			for (i = 0; i < size; i++)
//			{
//				printf ("%d ", rxDataFromBt[i]);
//			}
//			printf ("\r\n");
			printf ("%f\r\n", targetRotation);
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <main+0xbc>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <main+0xc4>)
 80010a4:	f006 f930 	bl	8007308 <iprintf>
		if (targetRotation != prevTargetRotation)
 80010a8:	e7e7      	b.n	800107a <main+0x66>
 80010aa:	bf00      	nop
 80010ac:	0800aab4 	.word	0x0800aab4
 80010b0:	200002d0 	.word	0x200002d0
 80010b4:	40020000 	.word	0x40020000
 80010b8:	0800aad8 	.word	0x0800aad8
 80010bc:	0800130d 	.word	0x0800130d
 80010c0:	2000028c 	.word	0x2000028c
 80010c4:	0800aafc 	.word	0x0800aafc
 80010c8:	08001341 	.word	0x08001341
 80010cc:	20000290 	.word	0x20000290
 80010d0:	200002e0 	.word	0x200002e0
 80010d4:	200002d8 	.word	0x200002d8
 80010d8:	0800aaac 	.word	0x0800aaac

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2234      	movs	r2, #52	; 0x34
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 fc9a 	bl	8006a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <SystemClock_Config+0xdc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <SystemClock_Config+0xdc>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <SystemClock_Config+0xdc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <SystemClock_Config+0xe0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a25      	ldr	r2, [pc, #148]	; (80011bc <SystemClock_Config+0xe0>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <SystemClock_Config+0xe0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800114c:	2308      	movs	r3, #8
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001150:	23b4      	movs	r3, #180	; 0xb4
 8001152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001154:	2302      	movs	r3, #2
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001158:	2302      	movs	r3, #2
 800115a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4618      	mov	r0, r3
 8001166:	f001 f991 	bl	800248c <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001170:	f000 f924 	bl	80013bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001174:	f000 fe44 	bl	8001e00 <HAL_PWREx_EnableOverDrive>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800117e:	f000 f91d 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001182:	230f      	movs	r3, #15
 8001184:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001186:	2302      	movs	r3, #2
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2105      	movs	r1, #5
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fe7d 	bl	8001ea0 <HAL_RCC_ClockConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011ac:	f000 f906 	bl	80013bc <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3750      	adds	r7, #80	; 0x50
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART2_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f8:	f001 fe94 	bl	8002f24 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f8db 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000204 	.word	0x20000204
 8001210:	40004400 	.word	0x40004400

08001214 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_USART6_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 8001220:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001224:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART6_UART_Init+0x4c>)
 800124c:	f001 fe6a 	bl	8002f24 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f000 f8b1 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000248 	.word	0x20000248
 8001264:	40011400 	.word	0x40011400

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_GPIO_Init+0x9c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <MX_GPIO_Init+0x9c>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_GPIO_Init+0x9c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_GPIO_Init+0x9c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step_Pin|Direction_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <MX_GPIO_Init+0xa0>)
 80012da:	f000 fd77 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step_Pin Direction_Pin */
  GPIO_InitStruct.Pin = Step_Pin|Direction_Pin;
 80012de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4619      	mov	r1, r3
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_GPIO_Init+0xa0>)
 80012f8:	f000 fbd4 	bl	8001aa4 <HAL_GPIO_Init>

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000

0800130c <StartServoControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartServoControl */
void StartServoControl(void *argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  flagsX = osThreadFlagsWait(0xFF, osFlagsWaitAny, osWaitForever);
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	2100      	movs	r1, #0
 800131a:	20ff      	movs	r0, #255	; 0xff
 800131c:	f002 fcb0 	bl	8003c80 <osThreadFlagsWait>
 8001320:	4603      	mov	r3, r0
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <StartServoControl+0x28>)
 8001324:	6013      	str	r3, [r2, #0]
	  printf ("%f\r\n", targetRotation);
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <StartServoControl+0x2c>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <StartServoControl+0x30>)
 800132e:	f005 ffeb 	bl	8007308 <iprintf>
	  flagsX = osThreadFlagsWait(0xFF, osFlagsWaitAny, osWaitForever);
 8001332:	e7ef      	b.n	8001314 <StartServoControl+0x8>
 8001334:	20000294 	.word	0x20000294
 8001338:	200002e0 	.word	0x200002e0
 800133c:	0800aaac 	.word	0x0800aaac

08001340 <StartUartPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartPoll */
void StartUartPoll(void *argument)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af02      	add	r7, sp, #8
 8001346:	6078      	str	r0, [r7, #4]
	uint16_t rxLen;
  /* Infinite loop */
  for(;;)
  {
	  //__HAL_UART_CLEAR_OREFLAG(&huart6);
	  HAL_UARTEx_ReceiveToIdle(&huart6, rxDataFromBt, 8, &rxLen, 0xFFFFFFFF);
 8001348:	f107 030e 	add.w	r3, r7, #14
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	2208      	movs	r2, #8
 8001354:	490b      	ldr	r1, [pc, #44]	; (8001384 <StartUartPoll+0x44>)
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <StartUartPoll+0x48>)
 8001358:	f001 ff65 	bl	8003226 <HAL_UARTEx_ReceiveToIdle>
	  targetRotation = atof(rxDataFromBt);
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <StartUartPoll+0x44>)
 800135e:	f005 fb25 	bl	80069ac <atof>
 8001362:	eeb0 7a40 	vmov.f32	s14, s0
 8001366:	eef0 7a60 	vmov.f32	s15, s1
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <StartUartPoll+0x4c>)
 800136c:	ed83 7b00 	vstr	d7, [r3]
	  flags = osThreadFlagsSet(servoControlTaskHandle, 0xFF);
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <StartUartPoll+0x50>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	21ff      	movs	r1, #255	; 0xff
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fc34 	bl	8003be4 <osThreadFlagsSet>
 800137c:	4603      	mov	r3, r0
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <StartUartPoll+0x54>)
 8001380:	6013      	str	r3, [r2, #0]
	  HAL_UARTEx_ReceiveToIdle(&huart6, rxDataFromBt, 8, &rxLen, 0xFFFFFFFF);
 8001382:	e7e1      	b.n	8001348 <StartUartPoll+0x8>
 8001384:	2000029c 	.word	0x2000029c
 8001388:	20000248 	.word	0x20000248
 800138c:	200002e0 	.word	0x200002e0
 8001390:	2000028c 	.word	0x2000028c
 8001394:	20000298 	.word	0x20000298

08001398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013aa:	f000 fa55 	bl	8001858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40001000 	.word	0x40001000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_MspInit+0x54>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_MspInit+0x54>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_MspInit+0x54>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_MspInit+0x54>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_MspInit+0x54>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_MspInit+0x54>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	210f      	movs	r1, #15
 800140a:	f06f 0001 	mvn.w	r0, #1
 800140e:	f000 fb1f 	bl	8001a50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_UART_MspInit+0xe8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_UART_MspInit+0xec>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a30      	ldr	r2, [pc, #192]	; (800150c <HAL_UART_MspInit+0xec>)
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <HAL_UART_MspInit+0xec>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_UART_MspInit+0xec>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a29      	ldr	r2, [pc, #164]	; (800150c <HAL_UART_MspInit+0xec>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_UART_MspInit+0xec>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800147a:	230c      	movs	r3, #12
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800148a:	2307      	movs	r3, #7
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	481e      	ldr	r0, [pc, #120]	; (8001510 <HAL_UART_MspInit+0xf0>)
 8001496:	f000 fb05 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800149a:	e030      	b.n	80014fe <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_UART_MspInit+0xf4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12b      	bne.n	80014fe <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_UART_MspInit+0xec>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_UART_MspInit+0xec>)
 80014b0:	f043 0320 	orr.w	r3, r3, #32
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_UART_MspInit+0xec>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_UART_MspInit+0xec>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_UART_MspInit+0xec>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_UART_MspInit+0xec>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014de:	23c0      	movs	r3, #192	; 0xc0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014ee:	2308      	movs	r3, #8
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <HAL_UART_MspInit+0xf8>)
 80014fa:	f000 fad3 	bl	8001aa4 <HAL_GPIO_Init>
}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40004400 	.word	0x40004400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000
 8001514:	40011400 	.word	0x40011400
 8001518:	40020800 	.word	0x40020800

0800151c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f000 fa8d 	bl	8001a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001536:	2036      	movs	r0, #54	; 0x36
 8001538:	f000 faa6 	bl	8001a88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_InitTick+0xa4>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_InitTick+0xa4>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_InitTick+0xa4>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001558:	f107 0210 	add.w	r2, r7, #16
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdb6 	bl	80020d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001568:	f000 fd8c 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 800156c:	4603      	mov	r3, r0
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_InitTick+0xa8>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	3b01      	subs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_InitTick+0xac>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_InitTick+0xb0>)
 8001584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_InitTick+0xac>)
 8001588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_InitTick+0xac>)
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_InitTick+0xac>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_InitTick+0xac>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_InitTick+0xac>)
 80015a2:	f001 fa11 	bl	80029c8 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d104      	bne.n	80015b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <HAL_InitTick+0xac>)
 80015ae:	f001 fa65 	bl	8002a7c <HAL_TIM_Base_Start_IT>
 80015b2:	4603      	mov	r3, r0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	200002e8 	.word	0x200002e8
 80015cc:	40001000 	.word	0x40001000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM6_DAC_IRQHandler+0x10>)
 8001602:	f001 faab 	bl	8002b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002e8 	.word	0x200002e8

08001610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_kill>:

int _kill(int pid, int sig)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800162a:	f005 f9c3 	bl	80069b4 <__errno>
 800162e:	4603      	mov	r3, r0
 8001630:	2216      	movs	r2, #22
 8001632:	601a      	str	r2, [r3, #0]
	return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_exit>:

void _exit (int status)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ffe7 	bl	8001620 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001652:	e7fe      	b.n	8001652 <_exit+0x12>

08001654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e00a      	b.n	800167c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001666:	f7ff fcad 	bl	8000fc4 <__io_getchar>
 800166a:	4601      	mov	r1, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf0      	blt.n	8001666 <_read+0x12>
	}

return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e009      	b.n	80016b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fc75 	bl	8000f98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf1      	blt.n	80016a0 <_write+0x12>
	}
	return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_close>:

int _close(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ee:	605a      	str	r2, [r3, #4]
	return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_isatty>:

int _isatty(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
	return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f005 f928 	bl	80069b4 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20020000 	.word	0x20020000
 8001790:	00000400 	.word	0x00000400
 8001794:	20000330 	.word	0x20000330
 8001798:	20004cb8 	.word	0x20004cb8

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ea:	f7ff ffd7 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f005 f8e7 	bl	80069c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff fc0f 	bl	8001014 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001804:	0800afe4 	.word	0x0800afe4
  ldr r2, =_sbss
 8001808:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800180c:	20004cb8 	.word	0x20004cb8

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f8fc 	bl	8001a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	200f      	movs	r0, #15
 8001844:	f7ff fe6a 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fdbe 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	20000334 	.word	0x20000334

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000334 	.word	0x20000334

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff4c 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a62:	f7ff ff61 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7ff ffb1 	bl	80019d4 <NVIC_EncodePriority>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff80 	bl	8001980 <__NVIC_SetPriority>
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff54 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e165      	b.n	8001d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 8154 	bne.w	8001d86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80ae 	beq.w	8001d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a5c      	ldr	r2, [pc, #368]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x308>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d025      	beq.n	8001cbe <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01f      	beq.n	8001cba <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_GPIO_Init+0x310>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d019      	beq.n	8001cb6 <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x314>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_GPIO_Init+0x318>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_GPIO_Init+0x20a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4a      	ldr	r2, [pc, #296]	; (8001dc0 <HAL_GPIO_Init+0x31c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x206>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <HAL_GPIO_Init+0x320>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_GPIO_Init+0x202>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e00c      	b.n	8001cc0 <HAL_GPIO_Init+0x21c>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e00a      	b.n	8001cc0 <HAL_GPIO_Init+0x21c>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e008      	b.n	8001cc0 <HAL_GPIO_Init+0x21c>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x21c>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x21c>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x21c>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x21c>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd0:	4935      	ldr	r1, [pc, #212]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d02:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d2c:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f ae96 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	041a      	lsls	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e2c:	f7ff fd28 	bl	8001880 <HAL_GetTick>
 8001e30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e32:	e009      	b.n	8001e48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e34:	f7ff fd24 	bl	8001880 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e42:	d901      	bls.n	8001e48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e01f      	b.n	8001e88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d1ee      	bne.n	8001e34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e5c:	f7ff fd10 	bl	8001880 <HAL_GetTick>
 8001e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e62:	e009      	b.n	8001e78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e64:	f7ff fd0c 	bl	8001880 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e72:	d901      	bls.n	8001e78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e007      	b.n	8001e88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e84:	d1ee      	bne.n	8001e64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	420e0040 	.word	0x420e0040
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	420e0044 	.word	0x420e0044

08001ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0cc      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b68      	ldr	r3, [pc, #416]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d90c      	bls.n	8001edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0b8      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d044      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d119      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e067      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f90:	f7ff fc76 	bl	8001880 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7ff fc72 	bl	8001880 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e04f      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d20c      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e032      	b.n	800204e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4916      	ldr	r1, [pc, #88]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002026:	f000 f887 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490a      	ldr	r1, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fa68 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00
 800205c:	40023800 	.word	0x40023800
 8002060:	0800ab20 	.word	0x0800ab20
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_RCC_GetHCLKFreq+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000

08002084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002088:	f7ff fff0 	bl	800206c <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	0a9b      	lsrs	r3, r3, #10
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4903      	ldr	r1, [pc, #12]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	0800ab30 	.word	0x0800ab30

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020b0:	f7ff ffdc 	bl	800206c <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0b5b      	lsrs	r3, r3, #13
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4903      	ldr	r1, [pc, #12]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	0800ab30 	.word	0x0800ab30

080020d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	220f      	movs	r2, #15
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCC_GetClockConfig+0x60>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40023c00 	.word	0x40023c00

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b0a6      	sub	sp, #152	; 0x98
 800213e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800215e:	4bc8      	ldr	r3, [pc, #800]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b0c      	cmp	r3, #12
 8002168:	f200 817e 	bhi.w	8002468 <HAL_RCC_GetSysClockFreq+0x330>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <HAL_RCC_GetSysClockFreq+0x3c>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	080021a9 	.word	0x080021a9
 8002178:	08002469 	.word	0x08002469
 800217c:	08002469 	.word	0x08002469
 8002180:	08002469 	.word	0x08002469
 8002184:	080021b1 	.word	0x080021b1
 8002188:	08002469 	.word	0x08002469
 800218c:	08002469 	.word	0x08002469
 8002190:	08002469 	.word	0x08002469
 8002194:	080021b9 	.word	0x080021b9
 8002198:	08002469 	.word	0x08002469
 800219c:	08002469 	.word	0x08002469
 80021a0:	08002469 	.word	0x08002469
 80021a4:	08002323 	.word	0x08002323
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4bb6      	ldr	r3, [pc, #728]	; (8002484 <HAL_RCC_GetSysClockFreq+0x34c>)
 80021aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80021ae:	e15f      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b0:	4bb5      	ldr	r3, [pc, #724]	; (8002488 <HAL_RCC_GetSysClockFreq+0x350>)
 80021b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80021b6:	e15b      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b8:	4bb1      	ldr	r3, [pc, #708]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c4:	4bae      	ldr	r3, [pc, #696]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d031      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d0:	4bab      	ldr	r3, [pc, #684]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	2200      	movs	r2, #0
 80021d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80021da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e2:	663b      	str	r3, [r7, #96]	; 0x60
 80021e4:	2300      	movs	r3, #0
 80021e6:	667b      	str	r3, [r7, #100]	; 0x64
 80021e8:	4ba7      	ldr	r3, [pc, #668]	; (8002488 <HAL_RCC_GetSysClockFreq+0x350>)
 80021ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021ee:	462a      	mov	r2, r5
 80021f0:	fb03 f202 	mul.w	r2, r3, r2
 80021f4:	2300      	movs	r3, #0
 80021f6:	4621      	mov	r1, r4
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	4aa2      	ldr	r2, [pc, #648]	; (8002488 <HAL_RCC_GetSysClockFreq+0x350>)
 8002200:	4621      	mov	r1, r4
 8002202:	fba1 1202 	umull	r1, r2, r1, r2
 8002206:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002208:	460a      	mov	r2, r1
 800220a:	67ba      	str	r2, [r7, #120]	; 0x78
 800220c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800220e:	4413      	add	r3, r2
 8002210:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002216:	2200      	movs	r2, #0
 8002218:	65bb      	str	r3, [r7, #88]	; 0x58
 800221a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800221c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002220:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002224:	f7fe fd00 	bl	8000c28 <__aeabi_uldivmod>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4613      	mov	r3, r2
 800222e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002232:	e064      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002234:	4b92      	ldr	r3, [pc, #584]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	2200      	movs	r2, #0
 800223c:	653b      	str	r3, [r7, #80]	; 0x50
 800223e:	657a      	str	r2, [r7, #84]	; 0x54
 8002240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48
 8002248:	2300      	movs	r3, #0
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800224c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002250:	4622      	mov	r2, r4
 8002252:	462b      	mov	r3, r5
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	0159      	lsls	r1, r3, #5
 800225e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002262:	0150      	lsls	r0, r2, #5
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4621      	mov	r1, r4
 800226a:	1a51      	subs	r1, r2, r1
 800226c:	6139      	str	r1, [r7, #16]
 800226e:	4629      	mov	r1, r5
 8002270:	eb63 0301 	sbc.w	r3, r3, r1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002282:	4659      	mov	r1, fp
 8002284:	018b      	lsls	r3, r1, #6
 8002286:	4651      	mov	r1, sl
 8002288:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800228c:	4651      	mov	r1, sl
 800228e:	018a      	lsls	r2, r1, #6
 8002290:	4651      	mov	r1, sl
 8002292:	ebb2 0801 	subs.w	r8, r2, r1
 8002296:	4659      	mov	r1, fp
 8002298:	eb63 0901 	sbc.w	r9, r3, r1
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022b0:	4690      	mov	r8, r2
 80022b2:	4699      	mov	r9, r3
 80022b4:	4623      	mov	r3, r4
 80022b6:	eb18 0303 	adds.w	r3, r8, r3
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	462b      	mov	r3, r5
 80022be:	eb49 0303 	adc.w	r3, r9, r3
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022d0:	4629      	mov	r1, r5
 80022d2:	028b      	lsls	r3, r1, #10
 80022d4:	4621      	mov	r1, r4
 80022d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022da:	4621      	mov	r1, r4
 80022dc:	028a      	lsls	r2, r1, #10
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e6:	2200      	movs	r2, #0
 80022e8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ea:	647a      	str	r2, [r7, #68]	; 0x44
 80022ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022f0:	f7fe fc9a 	bl	8000c28 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022fe:	4b60      	ldr	r3, [pc, #384]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0c1b      	lsrs	r3, r3, #16
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	3301      	adds	r3, #1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002310:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002320:	e0a6      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002322:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800232a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d02a      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b51      	ldr	r3, [pc, #324]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	2200      	movs	r2, #0
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
 8002344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800234c:	2100      	movs	r1, #0
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCC_GetSysClockFreq+0x350>)
 8002350:	fb03 f201 	mul.w	r2, r3, r1
 8002354:	2300      	movs	r3, #0
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	4413      	add	r3, r2
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <HAL_RCC_GetSysClockFreq+0x350>)
 800235e:	fba0 1202 	umull	r1, r2, r0, r2
 8002362:	677a      	str	r2, [r7, #116]	; 0x74
 8002364:	460a      	mov	r2, r1
 8002366:	673a      	str	r2, [r7, #112]	; 0x70
 8002368:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800236a:	4413      	add	r3, r2
 800236c:	677b      	str	r3, [r7, #116]	; 0x74
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002372:	2200      	movs	r2, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
 8002376:	637a      	str	r2, [r7, #52]	; 0x34
 8002378:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800237c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002380:	f7fe fc52 	bl	8000c28 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800238e:	e05b      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	2200      	movs	r2, #0
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
 800239a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
 80023a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023ac:	4642      	mov	r2, r8
 80023ae:	464b      	mov	r3, r9
 80023b0:	f04f 0000 	mov.w	r0, #0
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	0159      	lsls	r1, r3, #5
 80023ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023be:	0150      	lsls	r0, r2, #5
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4641      	mov	r1, r8
 80023c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80023ca:	4649      	mov	r1, r9
 80023cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023e4:	ebb2 040a 	subs.w	r4, r2, sl
 80023e8:	eb63 050b 	sbc.w	r5, r3, fp
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	00eb      	lsls	r3, r5, #3
 80023f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023fa:	00e2      	lsls	r2, r4, #3
 80023fc:	4614      	mov	r4, r2
 80023fe:	461d      	mov	r5, r3
 8002400:	4643      	mov	r3, r8
 8002402:	18e3      	adds	r3, r4, r3
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	464b      	mov	r3, r9
 8002408:	eb45 0303 	adc.w	r3, r5, r3
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800241a:	4629      	mov	r1, r5
 800241c:	028b      	lsls	r3, r1, #10
 800241e:	4621      	mov	r1, r4
 8002420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002424:	4621      	mov	r1, r4
 8002426:	028a      	lsls	r2, r1, #10
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002430:	2200      	movs	r2, #0
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	61fa      	str	r2, [r7, #28]
 8002436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800243a:	f7fe fbf5 	bl	8000c28 <__aeabi_uldivmod>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4613      	mov	r3, r2
 8002444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_RCC_GetSysClockFreq+0x348>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	0f1b      	lsrs	r3, r3, #28
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002456:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800245a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002466:	e003      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetSysClockFreq+0x34c>)
 800246a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800246e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002474:	4618      	mov	r0, r3
 8002476:	3798      	adds	r7, #152	; 0x98
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	017d7840 	.word	0x017d7840

0800248c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e28d      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8083 	beq.w	80025b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ac:	4b94      	ldr	r3, [pc, #592]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d019      	beq.n	80024ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024b8:	4b91      	ldr	r3, [pc, #580]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024c4:	4b8e      	ldr	r3, [pc, #568]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b8b      	ldr	r3, [pc, #556]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x124>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e25a      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x90>
 800250e:	4b7c      	ldr	r3, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7b      	ldr	r2, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xcc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0xb4>
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a75      	ldr	r2, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xcc>
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6e      	ldr	r2, [pc, #440]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6b      	ldr	r2, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff f98e 	bl	8001880 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff f98a 	bl	8001880 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e21f      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b61      	ldr	r3, [pc, #388]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xdc>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff f97a 	bl	8001880 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff f976 	bl	8001880 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e20b      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x104>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d06f      	beq.n	800269e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d017      	beq.n	80025fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ca:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b44      	ldr	r3, [pc, #272]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x186>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1d3      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4937      	ldr	r1, [pc, #220]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b34      	ldr	r3, [pc, #208]	; (8002704 <HAL_RCC_OscConfig+0x278>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7ff f923 	bl	8001880 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263e:	f7ff f91f 	bl	8001880 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1b4      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4925      	ldr	r1, [pc, #148]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_OscConfig+0x278>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7ff f902 	bl	8001880 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002680:	f7ff f8fe 	bl	8001880 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e193      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d036      	beq.n	8002718 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d016      	beq.n	80026e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x27c>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7ff f8e2 	bl	8001880 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c0:	f7ff f8de 	bl	8001880 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e173      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x234>
 80026de:	e01b      	b.n	8002718 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x27c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7ff f8cb 	bl	8001880 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	e00e      	b.n	800270c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ee:	f7ff f8c7 	bl	8001880 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d907      	bls.n	800270c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e15c      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
 8002700:	40023800 	.word	0x40023800
 8002704:	42470000 	.word	0x42470000
 8002708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ea      	bne.n	80026ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8097 	beq.w	8002854 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272a:	4b83      	ldr	r3, [pc, #524]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b7f      	ldr	r3, [pc, #508]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a7e      	ldr	r2, [pc, #504]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b79      	ldr	r3, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x4b0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b76      	ldr	r3, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x4b0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a75      	ldr	r2, [pc, #468]	; (800293c <HAL_RCC_OscConfig+0x4b0>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7ff f887 	bl	8001880 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7ff f883 	bl	8001880 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e118      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b6c      	ldr	r3, [pc, #432]	; (800293c <HAL_RCC_OscConfig+0x4b0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x31e>
 800279c:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	e01c      	b.n	80027e4 <HAL_RCC_OscConfig+0x358>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x340>
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a60      	ldr	r2, [pc, #384]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0x358>
 80027cc:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a59      	ldr	r2, [pc, #356]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	4b57      	ldr	r3, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a56      	ldr	r2, [pc, #344]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7ff f848 	bl	8001880 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7ff f844 	bl	8001880 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0d7      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280a:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ee      	beq.n	80027f4 <HAL_RCC_OscConfig+0x368>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7ff f832 	bl	8001880 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7ff f82e 	bl	8001880 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0c1      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ee      	bne.n	8002820 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 800284e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80ad 	beq.w	80029b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	d060      	beq.n	800292c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d145      	bne.n	80028fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b33      	ldr	r3, [pc, #204]	; (8002940 <HAL_RCC_OscConfig+0x4b4>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff f802 	bl	8001880 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fffe 	bl	8001880 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e093      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	3b01      	subs	r3, #1
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	071b      	lsls	r3, r3, #28
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x4b4>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe ffd3 	bl	8001880 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe ffcf 	bl	8001880 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e064      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x452>
 80028fc:	e05c      	b.n	80029b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_OscConfig+0x4b4>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe ffbc 	bl	8001880 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe ffb8 	bl	8001880 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e04d      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x4ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x480>
 800292a:	e045      	b.n	80029b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e040      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_RCC_OscConfig+0x538>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d030      	beq.n	80029b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d129      	bne.n	80029b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d122      	bne.n	80029b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297c:	4293      	cmp	r3, r2
 800297e:	d119      	bne.n	80029b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d10f      	bne.n	80029b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f839 	bl	8002a66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 f9d8 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e04e      	b.n	8002b32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d022      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x80>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d01d      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x80>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d018      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x80>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x80>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00e      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x80>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x80>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d004      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x80>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d111      	bne.n	8002b20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d010      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1e:	e007      	b.n	8002b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40010400 	.word	0x40010400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40001800 	.word	0x40001800

08002b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0202 	mvn.w	r2, #2
 8002b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8ee 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8e0 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8f1 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d122      	bne.n	8002c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d11b      	bne.n	8002c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0204 	mvn.w	r2, #4
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f8c4 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e005      	b.n	8002c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8b6 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f8c7 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d122      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d11b      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0208 	mvn.w	r2, #8
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f89a 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002c4c:	e005      	b.n	8002c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f88c 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f89d 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d122      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0210 	mvn.w	r2, #16
 8002c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2208      	movs	r2, #8
 8002c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f870 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e005      	b.n	8002cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f862 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f873 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d107      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0201 	mvn.w	r2, #1
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fb5c 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b80      	cmp	r3, #128	; 0x80
 8002cec:	d10e      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d107      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f902 	bl	8002f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d10e      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d107      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f838 	bl	8002da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d10e      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d107      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0220 	mvn.w	r2, #32
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8cc 	bl	8002efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a40      	ldr	r2, [pc, #256]	; (8002ed0 <TIM_Base_SetConfig+0x114>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d00f      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a3d      	ldr	r2, [pc, #244]	; (8002ed4 <TIM_Base_SetConfig+0x118>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <TIM_Base_SetConfig+0x11c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d007      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <TIM_Base_SetConfig+0x120>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3a      	ldr	r2, [pc, #232]	; (8002ee0 <TIM_Base_SetConfig+0x124>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <TIM_Base_SetConfig+0x114>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1c:	d027      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	; (8002ed4 <TIM_Base_SetConfig+0x118>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d023      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	; (8002ed8 <TIM_Base_SetConfig+0x11c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2a      	ldr	r2, [pc, #168]	; (8002edc <TIM_Base_SetConfig+0x120>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <TIM_Base_SetConfig+0x124>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d017      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <TIM_Base_SetConfig+0x128>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <TIM_Base_SetConfig+0x130>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <TIM_Base_SetConfig+0x134>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <TIM_Base_SetConfig+0x138>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a23      	ldr	r2, [pc, #140]	; (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <TIM_Base_SetConfig+0x114>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0xf8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <TIM_Base_SetConfig+0x124>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	615a      	str	r2, [r3, #20]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40010400 	.word	0x40010400
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40014400 	.word	0x40014400
 8002eec:	40014800 	.word	0x40014800
 8002ef0:	40001800 	.word	0x40001800
 8002ef4:	40001c00 	.word	0x40001c00
 8002ef8:	40002000 	.word	0x40002000

08002efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e03f      	b.n	8002fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fa68 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 faa7 	bl	80034bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08a      	sub	sp, #40	; 0x28
 8002fc2:	af02      	add	r7, sp, #8
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d17c      	bne.n	80030d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_UART_Transmit+0x2c>
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e075      	b.n	80030da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Transmit+0x3e>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e06e      	b.n	80030da <HAL_UART_Transmit+0x11c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2221      	movs	r2, #33	; 0x21
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003012:	f7fe fc35 	bl	8001880 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x82>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003050:	e02a      	b.n	80030a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f9bf 	bl	80033e0 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e036      	b.n	80030da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3302      	adds	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e007      	b.n	800309a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1cf      	bne.n	8003052 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2140      	movs	r1, #64	; 0x40
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f98f 	bl	80033e0 <UART_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08a      	sub	sp, #40	; 0x28
 80030e6:	af02      	add	r7, sp, #8
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	f040 808c 	bne.w	800321c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Receive+0x2e>
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e084      	b.n	800321e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_UART_Receive+0x40>
 800311e:	2302      	movs	r3, #2
 8003120:	e07d      	b.n	800321e <HAL_UART_Receive+0x13c>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2222      	movs	r2, #34	; 0x22
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800313e:	f7fe fb9f 	bl	8001880 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d108      	bne.n	800316c <HAL_UART_Receive+0x8a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e003      	b.n	8003174 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800317c:	e043      	b.n	8003206 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2120      	movs	r1, #32
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f929 	bl	80033e0 <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e042      	b.n	800321e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	3302      	adds	r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e01f      	b.n	80031f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	d007      	beq.n	80031d2 <HAL_UART_Receive+0xf0>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_UART_Receive+0xfe>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e008      	b.n	80031f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3301      	adds	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1b6      	bne.n	800317e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b088      	sub	sp, #32
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	f040 80c9 	bne.w	80033d6 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0c1      	b.n	80033d8 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_UARTEx_ReceiveToIdle+0x3c>
 800325e:	2302      	movs	r3, #2
 8003260:	e0ba      	b.n	80033d8 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2222      	movs	r2, #34	; 0x22
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327e:	f7fe faff 	bl	8001880 <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003298:	d108      	bne.n	80032ac <HAL_UARTEx_ReceiveToIdle+0x86>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e003      	b.n	80032b4 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032c2:	e074      	b.n	80033ae <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d114      	bne.n	80032fc <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e06d      	b.n	80033d8 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b20      	cmp	r3, #32
 8003308:	d13c      	bne.n	8003384 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10c      	bne.n	800332a <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331c:	b29a      	uxth	r2, r3
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	3302      	adds	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	e01f      	b.n	800336a <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d007      	beq.n	8003344 <HAL_UARTEx_ReceiveToIdle+0x11e>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_UARTEx_ReceiveToIdle+0x12c>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e008      	b.n	8003364 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800335e:	b2da      	uxtb	r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d010      	beq.n	80033ae <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338c:	f7fe fa78 	bl	8001880 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003398:	429a      	cmp	r2, r3
 800339a:	d302      	bcc.n	80033a2 <HAL_UARTEx_ReceiveToIdle+0x17c>
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e014      	b.n	80033d8 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d185      	bne.n	80032c4 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b090      	sub	sp, #64	; 0x40
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f0:	e050      	b.n	8003494 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d04c      	beq.n	8003494 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <UART_WaitOnFlagUntilTimeout+0x30>
 8003400:	f7fe fa3e 	bl	8001880 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800340c:	429a      	cmp	r2, r3
 800340e:	d241      	bcs.n	8003494 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003430:	637a      	str	r2, [r7, #52]	; 0x34
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3314      	adds	r3, #20
 800344a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	613b      	str	r3, [r7, #16]
   return(result);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003464:	623a      	str	r2, [r7, #32]
 8003466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	69f9      	ldr	r1, [r7, #28]
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	61bb      	str	r3, [r7, #24]
   return(result);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e00f      	b.n	80034b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d09f      	beq.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3740      	adds	r7, #64	; 0x40
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b0c0      	sub	sp, #256	; 0x100
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	68d9      	ldr	r1, [r3, #12]
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	ea40 0301 	orr.w	r3, r0, r1
 80034e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003514:	f021 010c 	bic.w	r1, r1, #12
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003522:	430b      	orrs	r3, r1
 8003524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	6999      	ldr	r1, [r3, #24]
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	ea40 0301 	orr.w	r3, r0, r1
 8003542:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b8f      	ldr	r3, [pc, #572]	; (8003788 <UART_SetConfig+0x2cc>)
 800354c:	429a      	cmp	r2, r3
 800354e:	d005      	beq.n	800355c <UART_SetConfig+0xa0>
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b8d      	ldr	r3, [pc, #564]	; (800378c <UART_SetConfig+0x2d0>)
 8003558:	429a      	cmp	r2, r3
 800355a:	d104      	bne.n	8003566 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7fe fda6 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8003560:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003564:	e003      	b.n	800356e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003566:	f7fe fd8d 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 800356a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003578:	f040 810c 	bne.w	8003794 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800357c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003586:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800358a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800358e:	4622      	mov	r2, r4
 8003590:	462b      	mov	r3, r5
 8003592:	1891      	adds	r1, r2, r2
 8003594:	65b9      	str	r1, [r7, #88]	; 0x58
 8003596:	415b      	adcs	r3, r3
 8003598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800359a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800359e:	4621      	mov	r1, r4
 80035a0:	eb12 0801 	adds.w	r8, r2, r1
 80035a4:	4629      	mov	r1, r5
 80035a6:	eb43 0901 	adc.w	r9, r3, r1
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035be:	4690      	mov	r8, r2
 80035c0:	4699      	mov	r9, r3
 80035c2:	4623      	mov	r3, r4
 80035c4:	eb18 0303 	adds.w	r3, r8, r3
 80035c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035cc:	462b      	mov	r3, r5
 80035ce:	eb49 0303 	adc.w	r3, r9, r3
 80035d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035ea:	460b      	mov	r3, r1
 80035ec:	18db      	adds	r3, r3, r3
 80035ee:	653b      	str	r3, [r7, #80]	; 0x50
 80035f0:	4613      	mov	r3, r2
 80035f2:	eb42 0303 	adc.w	r3, r2, r3
 80035f6:	657b      	str	r3, [r7, #84]	; 0x54
 80035f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003600:	f7fd fb12 	bl	8000c28 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4b61      	ldr	r3, [pc, #388]	; (8003790 <UART_SetConfig+0x2d4>)
 800360a:	fba3 2302 	umull	r2, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	011c      	lsls	r4, r3, #4
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800361c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003620:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	64b9      	str	r1, [r7, #72]	; 0x48
 800362c:	415b      	adcs	r3, r3
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003630:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003634:	4641      	mov	r1, r8
 8003636:	eb12 0a01 	adds.w	sl, r2, r1
 800363a:	4649      	mov	r1, r9
 800363c:	eb43 0b01 	adc.w	fp, r3, r1
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800364c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003654:	4692      	mov	sl, r2
 8003656:	469b      	mov	fp, r3
 8003658:	4643      	mov	r3, r8
 800365a:	eb1a 0303 	adds.w	r3, sl, r3
 800365e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003662:	464b      	mov	r3, r9
 8003664:	eb4b 0303 	adc.w	r3, fp, r3
 8003668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003678:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800367c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003680:	460b      	mov	r3, r1
 8003682:	18db      	adds	r3, r3, r3
 8003684:	643b      	str	r3, [r7, #64]	; 0x40
 8003686:	4613      	mov	r3, r2
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	647b      	str	r3, [r7, #68]	; 0x44
 800368e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003692:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003696:	f7fd fac7 	bl	8000c28 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <UART_SetConfig+0x2d4>)
 80036a2:	fba3 2301 	umull	r2, r3, r3, r1
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2264      	movs	r2, #100	; 0x64
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	1acb      	subs	r3, r1, r3
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <UART_SetConfig+0x2d4>)
 80036b8:	fba3 2302 	umull	r2, r3, r3, r2
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036c4:	441c      	add	r4, r3
 80036c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	1891      	adds	r1, r2, r2
 80036de:	63b9      	str	r1, [r7, #56]	; 0x38
 80036e0:	415b      	adcs	r3, r3
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036e8:	4641      	mov	r1, r8
 80036ea:	1851      	adds	r1, r2, r1
 80036ec:	6339      	str	r1, [r7, #48]	; 0x30
 80036ee:	4649      	mov	r1, r9
 80036f0:	414b      	adcs	r3, r1
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003700:	4659      	mov	r1, fp
 8003702:	00cb      	lsls	r3, r1, #3
 8003704:	4651      	mov	r1, sl
 8003706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370a:	4651      	mov	r1, sl
 800370c:	00ca      	lsls	r2, r1, #3
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	4603      	mov	r3, r0
 8003714:	4642      	mov	r2, r8
 8003716:	189b      	adds	r3, r3, r2
 8003718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800371c:	464b      	mov	r3, r9
 800371e:	460a      	mov	r2, r1
 8003720:	eb42 0303 	adc.w	r3, r2, r3
 8003724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003734:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800373c:	460b      	mov	r3, r1
 800373e:	18db      	adds	r3, r3, r3
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
 8003742:	4613      	mov	r3, r2
 8003744:	eb42 0303 	adc.w	r3, r2, r3
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800374e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003752:	f7fd fa69 	bl	8000c28 <__aeabi_uldivmod>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <UART_SetConfig+0x2d4>)
 800375c:	fba3 1302 	umull	r1, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2164      	movs	r1, #100	; 0x64
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	3332      	adds	r3, #50	; 0x32
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <UART_SetConfig+0x2d4>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 0207 	and.w	r2, r3, #7
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4422      	add	r2, r4
 8003782:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003784:	e105      	b.n	8003992 <UART_SetConfig+0x4d6>
 8003786:	bf00      	nop
 8003788:	40011000 	.word	0x40011000
 800378c:	40011400 	.word	0x40011400
 8003790:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800379e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037a6:	4642      	mov	r2, r8
 80037a8:	464b      	mov	r3, r9
 80037aa:	1891      	adds	r1, r2, r2
 80037ac:	6239      	str	r1, [r7, #32]
 80037ae:	415b      	adcs	r3, r3
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037b6:	4641      	mov	r1, r8
 80037b8:	1854      	adds	r4, r2, r1
 80037ba:	4649      	mov	r1, r9
 80037bc:	eb43 0501 	adc.w	r5, r3, r1
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	00eb      	lsls	r3, r5, #3
 80037ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ce:	00e2      	lsls	r2, r4, #3
 80037d0:	4614      	mov	r4, r2
 80037d2:	461d      	mov	r5, r3
 80037d4:	4643      	mov	r3, r8
 80037d6:	18e3      	adds	r3, r4, r3
 80037d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037dc:	464b      	mov	r3, r9
 80037de:	eb45 0303 	adc.w	r3, r5, r3
 80037e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003802:	4629      	mov	r1, r5
 8003804:	008b      	lsls	r3, r1, #2
 8003806:	4621      	mov	r1, r4
 8003808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380c:	4621      	mov	r1, r4
 800380e:	008a      	lsls	r2, r1, #2
 8003810:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003814:	f7fd fa08 	bl	8000c28 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <UART_SetConfig+0x4e4>)
 800381e:	fba3 2302 	umull	r2, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	011c      	lsls	r4, r3, #4
 8003826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382a:	2200      	movs	r2, #0
 800382c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003830:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003834:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003838:	4642      	mov	r2, r8
 800383a:	464b      	mov	r3, r9
 800383c:	1891      	adds	r1, r2, r2
 800383e:	61b9      	str	r1, [r7, #24]
 8003840:	415b      	adcs	r3, r3
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003848:	4641      	mov	r1, r8
 800384a:	1851      	adds	r1, r2, r1
 800384c:	6139      	str	r1, [r7, #16]
 800384e:	4649      	mov	r1, r9
 8003850:	414b      	adcs	r3, r1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003860:	4659      	mov	r1, fp
 8003862:	00cb      	lsls	r3, r1, #3
 8003864:	4651      	mov	r1, sl
 8003866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386a:	4651      	mov	r1, sl
 800386c:	00ca      	lsls	r2, r1, #3
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	4603      	mov	r3, r0
 8003874:	4642      	mov	r2, r8
 8003876:	189b      	adds	r3, r3, r2
 8003878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800387c:	464b      	mov	r3, r9
 800387e:	460a      	mov	r2, r1
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	67bb      	str	r3, [r7, #120]	; 0x78
 8003892:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038a0:	4649      	mov	r1, r9
 80038a2:	008b      	lsls	r3, r1, #2
 80038a4:	4641      	mov	r1, r8
 80038a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038aa:	4641      	mov	r1, r8
 80038ac:	008a      	lsls	r2, r1, #2
 80038ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038b2:	f7fd f9b9 	bl	8000c28 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <UART_SetConfig+0x4e4>)
 80038bc:	fba3 1302 	umull	r1, r3, r3, r2
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	2164      	movs	r1, #100	; 0x64
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	3332      	adds	r3, #50	; 0x32
 80038ce:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <UART_SetConfig+0x4e4>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038da:	441c      	add	r4, r3
 80038dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e0:	2200      	movs	r2, #0
 80038e2:	673b      	str	r3, [r7, #112]	; 0x70
 80038e4:	677a      	str	r2, [r7, #116]	; 0x74
 80038e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038ea:	4642      	mov	r2, r8
 80038ec:	464b      	mov	r3, r9
 80038ee:	1891      	adds	r1, r2, r2
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	415b      	adcs	r3, r3
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038fa:	4641      	mov	r1, r8
 80038fc:	1851      	adds	r1, r2, r1
 80038fe:	6039      	str	r1, [r7, #0]
 8003900:	4649      	mov	r1, r9
 8003902:	414b      	adcs	r3, r1
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003912:	4659      	mov	r1, fp
 8003914:	00cb      	lsls	r3, r1, #3
 8003916:	4651      	mov	r1, sl
 8003918:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391c:	4651      	mov	r1, sl
 800391e:	00ca      	lsls	r2, r1, #3
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	4603      	mov	r3, r0
 8003926:	4642      	mov	r2, r8
 8003928:	189b      	adds	r3, r3, r2
 800392a:	66bb      	str	r3, [r7, #104]	; 0x68
 800392c:	464b      	mov	r3, r9
 800392e:	460a      	mov	r2, r1
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	663b      	str	r3, [r7, #96]	; 0x60
 8003940:	667a      	str	r2, [r7, #100]	; 0x64
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800394e:	4649      	mov	r1, r9
 8003950:	008b      	lsls	r3, r1, #2
 8003952:	4641      	mov	r1, r8
 8003954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003958:	4641      	mov	r1, r8
 800395a:	008a      	lsls	r2, r1, #2
 800395c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003960:	f7fd f962 	bl	8000c28 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <UART_SetConfig+0x4e4>)
 800396a:	fba3 1302 	umull	r1, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2164      	movs	r1, #100	; 0x64
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <UART_SetConfig+0x4e4>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	f003 020f 	and.w	r2, r3, #15
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4422      	add	r2, r4
 8003990:	609a      	str	r2, [r3, #8]
}
 8003992:	bf00      	nop
 8003994:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399e:	bf00      	nop
 80039a0:	51eb851f 	.word	0x51eb851f

080039a4 <__NVIC_SetPriority>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	; (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <SysTick_Handler+0x1c>)
 80039fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a00:	f001 fd7e 	bl	8005500 <xTaskGetSchedulerState>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a0a:	f002 fd55 	bl	80064b8 <xPortSysTickHandler>
  }
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f06f 0004 	mvn.w	r0, #4
 8003a22:	f7ff ffbf 	bl	80039a4 <__NVIC_SetPriority>
#endif
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a32:	f3ef 8305 	mrs	r3, IPSR
 8003a36:	603b      	str	r3, [r7, #0]
  return(result);
 8003a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a3e:	f06f 0305 	mvn.w	r3, #5
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	e00c      	b.n	8003a60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <osKernelInitialize+0x44>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <osKernelInitialize+0x44>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	e002      	b.n	8003a60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a60:	687b      	ldr	r3, [r7, #4]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000338 	.word	0x20000338

08003a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a7a:	f3ef 8305 	mrs	r3, IPSR
 8003a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a86:	f06f 0305 	mvn.w	r3, #5
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	e010      	b.n	8003ab0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <osKernelStart+0x48>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d109      	bne.n	8003aaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a96:	f7ff ffbf 	bl	8003a18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <osKernelStart+0x48>)
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003aa0:	f001 f8e6 	bl	8004c70 <vTaskStartScheduler>
      stat = osOK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	e002      	b.n	8003ab0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000338 	.word	0x20000338

08003ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	; 0x38
 8003ac4:	af04      	add	r7, sp, #16
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad0:	f3ef 8305 	mrs	r3, IPSR
 8003ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ad6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d17e      	bne.n	8003bda <osThreadNew+0x11a>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d07b      	beq.n	8003bda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ae6:	2318      	movs	r3, #24
 8003ae8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
 8003af2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d045      	beq.n	8003b86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <osThreadNew+0x48>
        name = attr->name;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <osThreadNew+0x6e>
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b38      	cmp	r3, #56	; 0x38
 8003b20:	d805      	bhi.n	8003b2e <osThreadNew+0x6e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <osThreadNew+0x72>
        return (NULL);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e054      	b.n	8003bdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00e      	beq.n	8003b68 <osThreadNew+0xa8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b6b      	cmp	r3, #107	; 0x6b
 8003b50:	d90a      	bls.n	8003b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <osThreadNew+0xa8>
        mem = 1;
 8003b62:	2301      	movs	r3, #1
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e010      	b.n	8003b8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10c      	bne.n	8003b8a <osThreadNew+0xca>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d108      	bne.n	8003b8a <osThreadNew+0xca>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <osThreadNew+0xca>
          mem = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	e001      	b.n	8003b8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d110      	bne.n	8003bb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b98:	9202      	str	r2, [sp, #8]
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fec0 	bl	800492c <xTaskCreateStatic>
 8003bac:	4603      	mov	r3, r0
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	e013      	b.n	8003bda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d110      	bne.n	8003bda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	f107 0310 	add.w	r3, r7, #16
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 ff0b 	bl	80049e6 <xTaskCreate>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <osThreadNew+0x11a>
            hTask = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bda:	693b      	ldr	r3, [r7, #16]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <osThreadFlagsSet+0x1a>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	da03      	bge.n	8003c06 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003bfe:	f06f 0303 	mvn.w	r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e035      	b.n	8003c72 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	613b      	str	r3, [r7, #16]
  return(result);
 8003c12:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01f      	beq.n	8003c58 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003c1c:	f107 0308 	add.w	r3, r7, #8
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	2201      	movs	r2, #1
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	6978      	ldr	r0, [r7, #20]
 8003c2a:	f001 fe07 	bl	800583c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	2200      	movs	r2, #0
 8003c34:	9200      	str	r2, [sp, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	6978      	ldr	r0, [r7, #20]
 8003c3c:	f001 fdfe 	bl	800583c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d015      	beq.n	8003c72 <osThreadFlagsSet+0x8e>
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <osThreadFlagsSet+0x98>)
 8003c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	e00c      	b.n	8003c72 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	f001 fd34 	bl	80056cc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	6978      	ldr	r0, [r7, #20]
 8003c6e:	f001 fd2d 	bl	80056cc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003c72:	68fb      	ldr	r3, [r7, #12]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c8c:	f3ef 8305 	mrs	r3, IPSR
 8003c90:	617b      	str	r3, [r7, #20]
  return(result);
 8003c92:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8003c98:	f06f 0305 	mvn.w	r3, #5
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9e:	e06b      	b.n	8003d78 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	da03      	bge.n	8003cae <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8003ca6:	f06f 0303 	mvn.w	r3, #3
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cac:	e064      	b.n	8003d78 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <osThreadFlagsWait+0x3e>
      clear = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbc:	e001      	b.n	8003cc2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8003cca:	f001 f8e3 	bl	8004e94 <xTaskGetTickCount>
 8003cce:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003cd0:	f107 0210 	add.w	r2, r7, #16
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f001 fc9d 	bl	8005618 <xTaskNotifyWait>
 8003cde:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d137      	bne.n	8003d56 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8003ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	4013      	ands	r3, r2
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d032      	beq.n	8003d72 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003d12:	f06f 0302 	mvn.w	r3, #2
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003d18:	e02e      	b.n	8003d78 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d128      	bne.n	8003d76 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003d2a:	f06f 0302 	mvn.w	r3, #2
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003d30:	e022      	b.n	8003d78 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003d32:	f001 f8af 	bl	8004e94 <xTaskGetTickCount>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d902      	bls.n	8003d4c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	e00e      	b.n	8003d6a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
 8003d54:	e009      	b.n	8003d6a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8003d5c:	f06f 0302 	mvn.w	r3, #2
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d62:	e002      	b.n	8003d6a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003d64:	f06f 0301 	mvn.w	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1af      	bne.n	8003cd0 <osThreadFlagsWait+0x50>
 8003d70:	e002      	b.n	8003d78 <osThreadFlagsWait+0xf8>
            break;
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <osThreadFlagsWait+0xf8>
            break;
 8003d76:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3730      	adds	r7, #48	; 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <vApplicationGetIdleTaskMemory+0x30>)
 8003d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2280      	movs	r2, #128	; 0x80
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	2000033c 	.word	0x2000033c
 8003db4:	200003a8 	.word	0x200003a8

08003db8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003dc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4a06      	ldr	r2, [pc, #24]	; (8003de8 <vApplicationGetTimerTaskMemory+0x30>)
 8003dce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd6:	601a      	str	r2, [r3, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	200005a8 	.word	0x200005a8
 8003de8:	20000614 	.word	0x20000614

08003dec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f103 0208 	add.w	r2, r3, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f103 0208 	add.w	r2, r3, #8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f103 0208 	add.w	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d103      	bne.n	8003eae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e00c      	b.n	8003ec8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e002      	b.n	8003ebc <vListInsert+0x2e>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d2f6      	bcs.n	8003eb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6892      	ldr	r2, [r2, #8]
 8003f16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6852      	ldr	r2, [r2, #4]
 8003f20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d103      	bne.n	8003f34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	1e5a      	subs	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f7e:	f002 fa09 	bl	8006394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	441a      	add	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	441a      	add	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	22ff      	movs	r2, #255	; 0xff
 8003fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	22ff      	movs	r2, #255	; 0xff
 8003fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d114      	bne.n	8003ffe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01a      	beq.n	8004012 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3310      	adds	r3, #16
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 f8cf 	bl	8005184 <xTaskRemoveFromEventList>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <xQueueGenericReset+0xcc>)
 8003fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	e009      	b.n	8004012 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3310      	adds	r3, #16
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fef2 	bl	8003dec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3324      	adds	r3, #36	; 0x24
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff feed 	bl	8003dec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004012:	f002 f9ef 	bl	80063f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004016:	2301      	movs	r3, #1
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08e      	sub	sp, #56	; 0x38
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <xQueueGenericCreateStatic+0x52>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <xQueueGenericCreateStatic+0x56>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <xQueueGenericCreateStatic+0x58>
 800407a:	2300      	movs	r3, #0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	623b      	str	r3, [r7, #32]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <xQueueGenericCreateStatic+0x7e>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <xQueueGenericCreateStatic+0x82>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueGenericCreateStatic+0x84>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	61fb      	str	r3, [r7, #28]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040c2:	2350      	movs	r3, #80	; 0x50
 80040c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b50      	cmp	r3, #80	; 0x50
 80040ca:	d00a      	beq.n	80040e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	61bb      	str	r3, [r7, #24]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f805 	bl	8004114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800410c:	4618      	mov	r0, r3
 800410e:	3730      	adds	r7, #48	; 0x30
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e002      	b.n	8004136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004142:	2101      	movs	r1, #1
 8004144:	69b8      	ldr	r0, [r7, #24]
 8004146:	f7ff ff05 	bl	8003f54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08e      	sub	sp, #56	; 0x38
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800416a:	2300      	movs	r3, #0
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <xQueueGenericSend+0x32>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d103      	bne.n	800419c <xQueueGenericSend+0x40>
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <xQueueGenericSend+0x44>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <xQueueGenericSend+0x46>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <xQueueGenericSend+0x60>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d103      	bne.n	80041ca <xQueueGenericSend+0x6e>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <xQueueGenericSend+0x72>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <xQueueGenericSend+0x74>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericSend+0x8e>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	623b      	str	r3, [r7, #32]
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ea:	f001 f989 	bl	8005500 <xTaskGetSchedulerState>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <xQueueGenericSend+0x9e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <xQueueGenericSend+0xa2>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <xQueueGenericSend+0xa4>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xQueueGenericSend+0xbe>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	61fb      	str	r3, [r7, #28]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800421a:	f002 f8bb 	bl	8006394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <xQueueGenericSend+0xd4>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d129      	bne.n	8004284 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004236:	f000 fa0b 	bl	8004650 <prvCopyDataToQueue>
 800423a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	3324      	adds	r3, #36	; 0x24
 8004248:	4618      	mov	r0, r3
 800424a:	f000 ff9b 	bl	8005184 <xTaskRemoveFromEventList>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004254:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <xQueueGenericSend+0x1f8>)
 8004256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	e00a      	b.n	800427c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800426c:	4b39      	ldr	r3, [pc, #228]	; (8004354 <xQueueGenericSend+0x1f8>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800427c:	f002 f8ba 	bl	80063f4 <vPortExitCritical>
				return pdPASS;
 8004280:	2301      	movs	r3, #1
 8004282:	e063      	b.n	800434c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800428a:	f002 f8b3 	bl	80063f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800428e:	2300      	movs	r3, #0
 8004290:	e05c      	b.n	800434c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	4618      	mov	r0, r3
 800429e:	f000 ffd5 	bl	800524c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a2:	2301      	movs	r3, #1
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042a6:	f002 f8a5 	bl	80063f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042aa:	f000 fd47 	bl	8004d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ae:	f002 f871 	bl	8006394 <vPortEnterCritical>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d103      	bne.n	80042c8 <xQueueGenericSend+0x16c>
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ce:	b25b      	sxtb	r3, r3
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d103      	bne.n	80042de <xQueueGenericSend+0x182>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042de:	f002 f889 	bl	80063f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042e2:	1d3a      	adds	r2, r7, #4
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4611      	mov	r1, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 ffc4 	bl	8005278 <xTaskCheckForTimeOut>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d124      	bne.n	8004340 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042f8:	f000 faa2 	bl	8004840 <prvIsQueueFull>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d018      	beq.n	8004334 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	3310      	adds	r3, #16
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 feea 	bl	80050e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004312:	f000 fa2d 	bl	8004770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004316:	f000 fd1f 	bl	8004d58 <xTaskResumeAll>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f47f af7c 	bne.w	800421a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <xQueueGenericSend+0x1f8>)
 8004324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	e772      	b.n	800421a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004336:	f000 fa1b 	bl	8004770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800433a:	f000 fd0d 	bl	8004d58 <xTaskResumeAll>
 800433e:	e76c      	b.n	800421a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004342:	f000 fa15 	bl	8004770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004346:	f000 fd07 	bl	8004d58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800434a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800434c:	4618      	mov	r0, r3
 800434e:	3738      	adds	r7, #56	; 0x38
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	e000ed04 	.word	0xe000ed04

08004358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b090      	sub	sp, #64	; 0x40
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <xQueueGenericSendFromISR+0x3c>
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <xQueueGenericSendFromISR+0x40>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <xQueueGenericSendFromISR+0x42>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d103      	bne.n	80043c2 <xQueueGenericSendFromISR+0x6a>
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <xQueueGenericSendFromISR+0x6e>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <xQueueGenericSendFromISR+0x70>
 80043c6:	2300      	movs	r3, #0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	623b      	str	r3, [r7, #32]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043e2:	f002 f8b9 	bl	8006558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043e6:	f3ef 8211 	mrs	r2, BASEPRI
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	61fa      	str	r2, [r7, #28]
 80043fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <xQueueGenericSendFromISR+0xbc>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d12f      	bne.n	8004474 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800441a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800442a:	f000 f911 	bl	8004650 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800442e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d112      	bne.n	800445e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d016      	beq.n	800446e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	3324      	adds	r3, #36	; 0x24
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fe9d 	bl	8005184 <xTaskRemoveFromEventList>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e007      	b.n	800446e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800445e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004462:	3301      	adds	r3, #1
 8004464:	b2db      	uxtb	r3, r3
 8004466:	b25a      	sxtb	r2, r3
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800446e:	2301      	movs	r3, #1
 8004470:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004472:	e001      	b.n	8004478 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004474:	2300      	movs	r3, #0
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004482:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004486:	4618      	mov	r0, r3
 8004488:	3740      	adds	r7, #64	; 0x40
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <xQueueReceive+0x30>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	623b      	str	r3, [r7, #32]
}
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <xQueueReceive+0x3e>
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <xQueueReceive+0x42>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <xQueueReceive+0x44>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xQueueReceive+0x5e>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	61fb      	str	r3, [r7, #28]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ee:	f001 f807 	bl	8005500 <xTaskGetSchedulerState>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <xQueueReceive+0x6e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <xQueueReceive+0x72>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <xQueueReceive+0x74>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <xQueueReceive+0x8e>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	61bb      	str	r3, [r7, #24]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800451e:	f001 ff39 	bl	8006394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01f      	beq.n	800456e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004532:	f000 f8f7 	bl	8004724 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	1e5a      	subs	r2, r3, #1
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00f      	beq.n	8004566 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	3310      	adds	r3, #16
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fe1a 	bl	8005184 <xTaskRemoveFromEventList>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004556:	4b3d      	ldr	r3, [pc, #244]	; (800464c <xQueueReceive+0x1bc>)
 8004558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004566:	f001 ff45 	bl	80063f4 <vPortExitCritical>
				return pdPASS;
 800456a:	2301      	movs	r3, #1
 800456c:	e069      	b.n	8004642 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d103      	bne.n	800457c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004574:	f001 ff3e 	bl	80063f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004578:	2300      	movs	r3, #0
 800457a:	e062      	b.n	8004642 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004582:	f107 0310 	add.w	r3, r7, #16
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fe60 	bl	800524c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004590:	f001 ff30 	bl	80063f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004594:	f000 fbd2 	bl	8004d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004598:	f001 fefc 	bl	8006394 <vPortEnterCritical>
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a2:	b25b      	sxtb	r3, r3
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d103      	bne.n	80045b2 <xQueueReceive+0x122>
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d103      	bne.n	80045c8 <xQueueReceive+0x138>
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045c8:	f001 ff14 	bl	80063f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045cc:	1d3a      	adds	r2, r7, #4
 80045ce:	f107 0310 	add.w	r3, r7, #16
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fe4f 	bl	8005278 <xTaskCheckForTimeOut>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d123      	bne.n	8004628 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e2:	f000 f917 	bl	8004814 <prvIsQueueEmpty>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d017      	beq.n	800461c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fd75 	bl	80050e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fc:	f000 f8b8 	bl	8004770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004600:	f000 fbaa 	bl	8004d58 <xTaskResumeAll>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d189      	bne.n	800451e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <xQueueReceive+0x1bc>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	e780      	b.n	800451e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800461c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461e:	f000 f8a7 	bl	8004770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004622:	f000 fb99 	bl	8004d58 <xTaskResumeAll>
 8004626:	e77a      	b.n	800451e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462a:	f000 f8a1 	bl	8004770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800462e:	f000 fb93 	bl	8004d58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004634:	f000 f8ee 	bl	8004814 <prvIsQueueEmpty>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f43f af6f 	beq.w	800451e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004642:	4618      	mov	r0, r3
 8004644:	3730      	adds	r7, #48	; 0x30
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10d      	bne.n	800468a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d14d      	bne.n	8004712 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 ff5e 	bl	800553c <xTaskPriorityDisinherit>
 8004680:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	e043      	b.n	8004712 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d119      	bne.n	80046c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6858      	ldr	r0, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	461a      	mov	r2, r3
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	f002 f9b4 	bl	8006a08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d32b      	bcc.n	8004712 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	e026      	b.n	8004712 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68d8      	ldr	r0, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	461a      	mov	r2, r3
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	f002 f99a 	bl	8006a08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	425b      	negs	r3, r3
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d207      	bcs.n	8004700 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	425b      	negs	r3, r3
 80046fa:	441a      	add	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d105      	bne.n	8004712 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	3b01      	subs	r3, #1
 8004710:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800471a:	697b      	ldr	r3, [r7, #20]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d018      	beq.n	8004768 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	441a      	add	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d303      	bcc.n	8004758 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68d9      	ldr	r1, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	461a      	mov	r2, r3
 8004762:	6838      	ldr	r0, [r7, #0]
 8004764:	f002 f950 	bl	8006a08 <memcpy>
	}
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004778:	f001 fe0c 	bl	8006394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004782:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004784:	e011      	b.n	80047aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d012      	beq.n	80047b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3324      	adds	r3, #36	; 0x24
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fcf6 	bl	8005184 <xTaskRemoveFromEventList>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800479e:	f000 fdcd 	bl	800533c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dce9      	bgt.n	8004786 <prvUnlockQueue+0x16>
 80047b2:	e000      	b.n	80047b6 <prvUnlockQueue+0x46>
					break;
 80047b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	22ff      	movs	r2, #255	; 0xff
 80047ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047be:	f001 fe19 	bl	80063f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047c2:	f001 fde7 	bl	8006394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ce:	e011      	b.n	80047f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3310      	adds	r3, #16
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fcd1 	bl	8005184 <xTaskRemoveFromEventList>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047e8:	f000 fda8 	bl	800533c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047ec:	7bbb      	ldrb	r3, [r7, #14]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	dce9      	bgt.n	80047d0 <prvUnlockQueue+0x60>
 80047fc:	e000      	b.n	8004800 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	22ff      	movs	r2, #255	; 0xff
 8004804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004808:	f001 fdf4 	bl	80063f4 <vPortExitCritical>
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800481c:	f001 fdba 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e001      	b.n	8004832 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004832:	f001 fddf 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004848:	f001 fda4 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	429a      	cmp	r2, r3
 8004856:	d102      	bne.n	800485e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e001      	b.n	8004862 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004862:	f001 fdc7 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 8004866:	68fb      	ldr	r3, [r7, #12]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e014      	b.n	80048aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004880:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <vQueueAddToRegistry+0x50>)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800488c:	490c      	ldr	r1, [pc, #48]	; (80048c0 <vQueueAddToRegistry+0x50>)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004896:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <vQueueAddToRegistry+0x50>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048a2:	e006      	b.n	80048b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b07      	cmp	r3, #7
 80048ae:	d9e7      	bls.n	8004880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000a14 	.word	0x20000a14

080048c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048d4:	f001 fd5e 	bl	8006394 <vPortEnterCritical>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d103      	bne.n	80048ee <vQueueWaitForMessageRestricted+0x2a>
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d103      	bne.n	8004904 <vQueueWaitForMessageRestricted+0x40>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004904:	f001 fd76 	bl	80063f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	3324      	adds	r3, #36	; 0x24
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fc07 	bl	800512c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f7ff ff26 	bl	8004770 <prvUnlockQueue>
	}
 8004924:	bf00      	nop
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08e      	sub	sp, #56	; 0x38
 8004930:	af04      	add	r7, sp, #16
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800493a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	623b      	str	r3, [r7, #32]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xTaskCreateStatic+0x46>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	61fb      	str	r3, [r7, #28]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004972:	236c      	movs	r3, #108	; 0x6c
 8004974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b6c      	cmp	r3, #108	; 0x6c
 800497a:	d00a      	beq.n	8004992 <xTaskCreateStatic+0x66>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	61bb      	str	r3, [r7, #24]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004992:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01e      	beq.n	80049d8 <xTaskCreateStatic+0xac>
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049b2:	2300      	movs	r3, #0
 80049b4:	9303      	str	r3, [sp, #12]
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	9302      	str	r3, [sp, #8]
 80049ba:	f107 0314 	add.w	r3, r7, #20
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f850 	bl	8004a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049d2:	f000 f8dd 	bl	8004b90 <prvAddNewTaskToReadyList>
 80049d6:	e001      	b.n	80049dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049dc:	697b      	ldr	r3, [r7, #20]
	}
 80049de:	4618      	mov	r0, r3
 80049e0:	3728      	adds	r7, #40	; 0x28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b08c      	sub	sp, #48	; 0x30
 80049ea:	af04      	add	r7, sp, #16
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fdec 	bl	80065d8 <pvPortMalloc>
 8004a00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a08:	206c      	movs	r0, #108	; 0x6c
 8004a0a:	f001 fde5 	bl	80065d8 <pvPortMalloc>
 8004a0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a1c:	e005      	b.n	8004a2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f001 fea6 	bl	8006770 <vPortFree>
 8004a24:	e001      	b.n	8004a2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d017      	beq.n	8004a60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a38:	88fa      	ldrh	r2, [r7, #6]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9303      	str	r3, [sp, #12]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	9302      	str	r3, [sp, #8]
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f80e 	bl	8004a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a54:	69f8      	ldr	r0, [r7, #28]
 8004a56:	f000 f89b 	bl	8004b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e002      	b.n	8004a66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295
 8004a64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a66:	69bb      	ldr	r3, [r7, #24]
	}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	461a      	mov	r2, r3
 8004a88:	21a5      	movs	r1, #165	; 0xa5
 8004a8a:	f001 ffcb 	bl	8006a24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	617b      	str	r3, [r7, #20]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01f      	beq.n	8004b0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	e012      	b.n	8004afa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	7819      	ldrb	r1, [r3, #0]
 8004adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3334      	adds	r3, #52	; 0x34
 8004ae4:	460a      	mov	r2, r1
 8004ae6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d006      	beq.n	8004b02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b1f      	cmp	r3, #31
 8004afe:	d9e9      	bls.n	8004ad4 <prvInitialiseNewTask+0x64>
 8004b00:	e000      	b.n	8004b04 <prvInitialiseNewTask+0x94>
			{
				break;
 8004b02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004b0c:	e003      	b.n	8004b16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	2b37      	cmp	r3, #55	; 0x37
 8004b1a:	d901      	bls.n	8004b20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b1c:	2337      	movs	r3, #55	; 0x37
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b2a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2200      	movs	r2, #0
 8004b30:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	3304      	adds	r3, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff f978 	bl	8003e2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	3318      	adds	r3, #24
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff f973 	bl	8003e2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	2200      	movs	r2, #0
 8004b60:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	69b8      	ldr	r0, [r7, #24]
 8004b70:	f001 fae2 	bl	8006138 <pxPortInitialiseStack>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b86:	bf00      	nop
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b98:	f001 fbfc 	bl	8006394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <prvAddNewTaskToReadyList+0xc4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	; (8004c54 <prvAddNewTaskToReadyList+0xc4>)
 8004ba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ba6:	4b2c      	ldr	r3, [pc, #176]	; (8004c58 <prvAddNewTaskToReadyList+0xc8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bae:	4a2a      	ldr	r2, [pc, #168]	; (8004c58 <prvAddNewTaskToReadyList+0xc8>)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <prvAddNewTaskToReadyList+0xc4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d110      	bne.n	8004bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bbc:	f000 fbe2 	bl	8005384 <prvInitialiseTaskLists>
 8004bc0:	e00d      	b.n	8004bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bc2:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <prvAddNewTaskToReadyList+0xcc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bca:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <prvAddNewTaskToReadyList+0xc8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d802      	bhi.n	8004bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <prvAddNewTaskToReadyList+0xc8>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bde:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <prvAddNewTaskToReadyList+0xd0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <prvAddNewTaskToReadyList+0xd0>)
 8004be6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <prvAddNewTaskToReadyList+0xd0>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <prvAddNewTaskToReadyList+0xd4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d903      	bls.n	8004c04 <prvAddNewTaskToReadyList+0x74>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <prvAddNewTaskToReadyList+0xd4>)
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <prvAddNewTaskToReadyList+0xd8>)
 8004c12:	441a      	add	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f7ff f913 	bl	8003e46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c20:	f001 fbe8 	bl	80063f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <prvAddNewTaskToReadyList+0xcc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <prvAddNewTaskToReadyList+0xc8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d207      	bcs.n	8004c4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <prvAddNewTaskToReadyList+0xdc>)
 8004c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000f28 	.word	0x20000f28
 8004c58:	20000a54 	.word	0x20000a54
 8004c5c:	20000f34 	.word	0x20000f34
 8004c60:	20000f44 	.word	0x20000f44
 8004c64:	20000f30 	.word	0x20000f30
 8004c68:	20000a58 	.word	0x20000a58
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c7e:	463a      	mov	r2, r7
 8004c80:	1d39      	adds	r1, r7, #4
 8004c82:	f107 0308 	add.w	r3, r7, #8
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff f87c 	bl	8003d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	9202      	str	r2, [sp, #8]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	4921      	ldr	r1, [pc, #132]	; (8004d24 <vTaskStartScheduler+0xb4>)
 8004ca0:	4821      	ldr	r0, [pc, #132]	; (8004d28 <vTaskStartScheduler+0xb8>)
 8004ca2:	f7ff fe43 	bl	800492c <xTaskCreateStatic>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <vTaskStartScheduler+0xbc>)
 8004caa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <vTaskStartScheduler+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e001      	b.n	8004cbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d102      	bne.n	8004cca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cc4:	f000 feea 	bl	8005a9c <xTimerCreateTimerTask>
 8004cc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d116      	bne.n	8004cfe <vTaskStartScheduler+0x8e>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	613b      	str	r3, [r7, #16]
}
 8004ce2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <vTaskStartScheduler+0xc0>)
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <vTaskStartScheduler+0xc4>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cf2:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <vTaskStartScheduler+0xc8>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cf8:	f001 faaa 	bl	8006250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cfc:	e00e      	b.n	8004d1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d10a      	bne.n	8004d1c <vTaskStartScheduler+0xac>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60fb      	str	r3, [r7, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <vTaskStartScheduler+0xaa>
}
 8004d1c:	bf00      	nop
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	0800aac0 	.word	0x0800aac0
 8004d28:	08005355 	.word	0x08005355
 8004d2c:	20000f4c 	.word	0x20000f4c
 8004d30:	20000f48 	.word	0x20000f48
 8004d34:	20000f34 	.word	0x20000f34
 8004d38:	20000f2c 	.word	0x20000f2c

08004d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <vTaskSuspendAll+0x18>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	4a03      	ldr	r2, [pc, #12]	; (8004d54 <vTaskSuspendAll+0x18>)
 8004d48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d4a:	bf00      	nop
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20000f50 	.word	0x20000f50

08004d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d66:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <xTaskResumeAll+0x118>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	603b      	str	r3, [r7, #0]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d84:	f001 fb06 	bl	8006394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d88:	4b39      	ldr	r3, [pc, #228]	; (8004e70 <xTaskResumeAll+0x118>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4a38      	ldr	r2, [pc, #224]	; (8004e70 <xTaskResumeAll+0x118>)
 8004d90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d92:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <xTaskResumeAll+0x118>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d162      	bne.n	8004e60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d9a:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <xTaskResumeAll+0x11c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d05e      	beq.n	8004e60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004da2:	e02f      	b.n	8004e04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da4:	4b34      	ldr	r3, [pc, #208]	; (8004e78 <xTaskResumeAll+0x120>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3318      	adds	r3, #24
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff f8a5 	bl	8003f00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff f8a0 	bl	8003f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <xTaskResumeAll+0x124>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d903      	bls.n	8004dd4 <xTaskResumeAll+0x7c>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4a2a      	ldr	r2, [pc, #168]	; (8004e7c <xTaskResumeAll+0x124>)
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <xTaskResumeAll+0x128>)
 8004de2:	441a      	add	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7ff f82b 	bl	8003e46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <xTaskResumeAll+0x12c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <xTaskResumeAll+0x130>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e04:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <xTaskResumeAll+0x120>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1cb      	bne.n	8004da4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e12:	f000 fb55 	bl	80054c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <xTaskResumeAll+0x134>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e22:	f000 f847 	bl	8004eb4 <xTaskIncrementTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e2c:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <xTaskResumeAll+0x130>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f1      	bne.n	8004e22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <xTaskResumeAll+0x134>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e44:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <xTaskResumeAll+0x130>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <xTaskResumeAll+0x138>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e60:	f001 fac8 	bl	80063f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e64:	68bb      	ldr	r3, [r7, #8]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000f50 	.word	0x20000f50
 8004e74:	20000f28 	.word	0x20000f28
 8004e78:	20000ee8 	.word	0x20000ee8
 8004e7c:	20000f30 	.word	0x20000f30
 8004e80:	20000a58 	.word	0x20000a58
 8004e84:	20000a54 	.word	0x20000a54
 8004e88:	20000f3c 	.word	0x20000f3c
 8004e8c:	20000f38 	.word	0x20000f38
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <xTaskGetTickCount+0x1c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ea0:	687b      	ldr	r3, [r7, #4]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000f2c 	.word	0x20000f2c

08004eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebe:	4b4f      	ldr	r3, [pc, #316]	; (8004ffc <xTaskIncrementTick+0x148>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 808f 	bne.w	8004fe6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ec8:	4b4d      	ldr	r3, [pc, #308]	; (8005000 <xTaskIncrementTick+0x14c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ed0:	4a4b      	ldr	r2, [pc, #300]	; (8005000 <xTaskIncrementTick+0x14c>)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d120      	bne.n	8004f1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004edc:	4b49      	ldr	r3, [pc, #292]	; (8005004 <xTaskIncrementTick+0x150>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <xTaskIncrementTick+0x48>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	603b      	str	r3, [r7, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xTaskIncrementTick+0x46>
 8004efc:	4b41      	ldr	r3, [pc, #260]	; (8005004 <xTaskIncrementTick+0x150>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	4b41      	ldr	r3, [pc, #260]	; (8005008 <xTaskIncrementTick+0x154>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a3f      	ldr	r2, [pc, #252]	; (8005004 <xTaskIncrementTick+0x150>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <xTaskIncrementTick+0x154>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b3e      	ldr	r3, [pc, #248]	; (800500c <xTaskIncrementTick+0x158>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a3d      	ldr	r2, [pc, #244]	; (800500c <xTaskIncrementTick+0x158>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	f000 fad1 	bl	80054c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f1e:	4b3c      	ldr	r3, [pc, #240]	; (8005010 <xTaskIncrementTick+0x15c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d349      	bcc.n	8004fbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f28:	4b36      	ldr	r3, [pc, #216]	; (8005004 <xTaskIncrementTick+0x150>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f32:	4b37      	ldr	r3, [pc, #220]	; (8005010 <xTaskIncrementTick+0x15c>)
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295
 8004f38:	601a      	str	r2, [r3, #0]
					break;
 8004f3a:	e03f      	b.n	8004fbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3c:	4b31      	ldr	r3, [pc, #196]	; (8005004 <xTaskIncrementTick+0x150>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d203      	bcs.n	8004f5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f54:	4a2e      	ldr	r2, [pc, #184]	; (8005010 <xTaskIncrementTick+0x15c>)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f5a:	e02f      	b.n	8004fbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe ffcd 	bl	8003f00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3318      	adds	r3, #24
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe ffc4 	bl	8003f00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <xTaskIncrementTick+0x160>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <xTaskIncrementTick+0xd8>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a22      	ldr	r2, [pc, #136]	; (8005014 <xTaskIncrementTick+0x160>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <xTaskIncrementTick+0x164>)
 8004f9a:	441a      	add	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fe ff4f 	bl	8003e46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <xTaskIncrementTick+0x168>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d3b8      	bcc.n	8004f28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fba:	e7b5      	b.n	8004f28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fbc:	4b17      	ldr	r3, [pc, #92]	; (800501c <xTaskIncrementTick+0x168>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	4915      	ldr	r1, [pc, #84]	; (8005018 <xTaskIncrementTick+0x164>)
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d901      	bls.n	8004fd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <xTaskIncrementTick+0x16c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e004      	b.n	8004ff0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <xTaskIncrementTick+0x170>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3301      	adds	r3, #1
 8004fec:	4a0d      	ldr	r2, [pc, #52]	; (8005024 <xTaskIncrementTick+0x170>)
 8004fee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ff0:	697b      	ldr	r3, [r7, #20]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000f50 	.word	0x20000f50
 8005000:	20000f2c 	.word	0x20000f2c
 8005004:	20000ee0 	.word	0x20000ee0
 8005008:	20000ee4 	.word	0x20000ee4
 800500c:	20000f40 	.word	0x20000f40
 8005010:	20000f48 	.word	0x20000f48
 8005014:	20000f30 	.word	0x20000f30
 8005018:	20000a58 	.word	0x20000a58
 800501c:	20000a54 	.word	0x20000a54
 8005020:	20000f3c 	.word	0x20000f3c
 8005024:	20000f38 	.word	0x20000f38

08005028 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800502e:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <vTaskSwitchContext+0xa8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005036:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <vTaskSwitchContext+0xac>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800503c:	e041      	b.n	80050c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800503e:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <vTaskSwitchContext+0xac>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005044:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <vTaskSwitchContext+0xb0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e010      	b.n	800506e <vTaskSwitchContext+0x46>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <vTaskSwitchContext+0x40>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	607b      	str	r3, [r7, #4]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <vTaskSwitchContext+0x3e>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3b01      	subs	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	491b      	ldr	r1, [pc, #108]	; (80050dc <vTaskSwitchContext+0xb4>)
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0e4      	beq.n	800504c <vTaskSwitchContext+0x24>
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <vTaskSwitchContext+0xb4>)
 800508e:	4413      	add	r3, r2
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3308      	adds	r3, #8
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d104      	bne.n	80050b2 <vTaskSwitchContext+0x8a>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <vTaskSwitchContext+0xb8>)
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <vTaskSwitchContext+0xb0>)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6013      	str	r3, [r2, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000f50 	.word	0x20000f50
 80050d4:	20000f3c 	.word	0x20000f3c
 80050d8:	20000f30 	.word	0x20000f30
 80050dc:	20000a58 	.word	0x20000a58
 80050e0:	20000a54 	.word	0x20000a54

080050e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60fb      	str	r3, [r7, #12]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800510a:	4b07      	ldr	r3, [pc, #28]	; (8005128 <vTaskPlaceOnEventList+0x44>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3318      	adds	r3, #24
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fe febb 	bl	8003e8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005118:	2101      	movs	r1, #1
 800511a:	6838      	ldr	r0, [r7, #0]
 800511c:	f000 fc6a 	bl	80059f4 <prvAddCurrentTaskToDelayedList>
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000a54 	.word	0x20000a54

0800512c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	617b      	str	r3, [r7, #20]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <vTaskPlaceOnEventListRestricted+0x54>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3318      	adds	r3, #24
 800515a:	4619      	mov	r1, r3
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7fe fe72 	bl	8003e46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
 800516c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	68b8      	ldr	r0, [r7, #8]
 8005172:	f000 fc3f 	bl	80059f4 <prvAddCurrentTaskToDelayedList>
	}
 8005176:	bf00      	nop
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000a54 	.word	0x20000a54

08005184 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60fb      	str	r3, [r7, #12]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	3318      	adds	r3, #24
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe fea3 	bl	8003f00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <xTaskRemoveFromEventList+0xb0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11d      	bne.n	80051fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fe9a 	bl	8003f00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <xTaskRemoveFromEventList+0xb4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d903      	bls.n	80051e0 <xTaskRemoveFromEventList+0x5c>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a16      	ldr	r2, [pc, #88]	; (8005238 <xTaskRemoveFromEventList+0xb4>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4a13      	ldr	r2, [pc, #76]	; (800523c <xTaskRemoveFromEventList+0xb8>)
 80051ee:	441a      	add	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe fe25 	bl	8003e46 <vListInsertEnd>
 80051fc:	e005      	b.n	800520a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3318      	adds	r3, #24
 8005202:	4619      	mov	r1, r3
 8005204:	480e      	ldr	r0, [pc, #56]	; (8005240 <xTaskRemoveFromEventList+0xbc>)
 8005206:	f7fe fe1e 	bl	8003e46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <xTaskRemoveFromEventList+0xc0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d905      	bls.n	8005224 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <xTaskRemoveFromEventList+0xc4>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	e001      	b.n	8005228 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005228:	697b      	ldr	r3, [r7, #20]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000f50 	.word	0x20000f50
 8005238:	20000f30 	.word	0x20000f30
 800523c:	20000a58 	.word	0x20000a58
 8005240:	20000ee8 	.word	0x20000ee8
 8005244:	20000a54 	.word	0x20000a54
 8005248:	20000f3c 	.word	0x20000f3c

0800524c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <vTaskInternalSetTimeOutState+0x24>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <vTaskInternalSetTimeOutState+0x28>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	605a      	str	r2, [r3, #4]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000f40 	.word	0x20000f40
 8005274:	20000f2c 	.word	0x20000f2c

08005278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	613b      	str	r3, [r7, #16]
}
 800529a:	bf00      	nop
 800529c:	e7fe      	b.n	800529c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60fb      	str	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80052ba:	f001 f86b 	bl	8006394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052be:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <xTaskCheckForTimeOut+0xbc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d102      	bne.n	80052de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	e023      	b.n	8005326 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b15      	ldr	r3, [pc, #84]	; (8005338 <xTaskCheckForTimeOut+0xc0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d007      	beq.n	80052fa <xTaskCheckForTimeOut+0x82>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d302      	bcc.n	80052fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e015      	b.n	8005326 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	429a      	cmp	r2, r3
 8005302:	d20b      	bcs.n	800531c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	1ad2      	subs	r2, r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ff9b 	bl	800524c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	e004      	b.n	8005326 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005322:	2301      	movs	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005326:	f001 f865 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 800532a:	69fb      	ldr	r3, [r7, #28]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000f2c 	.word	0x20000f2c
 8005338:	20000f40 	.word	0x20000f40

0800533c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <vTaskMissedYield+0x14>)
 8005342:	2201      	movs	r2, #1
 8005344:	601a      	str	r2, [r3, #0]
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000f3c 	.word	0x20000f3c

08005354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800535c:	f000 f852 	bl	8005404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <prvIdleTask+0x28>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d9f9      	bls.n	800535c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <prvIdleTask+0x2c>)
 800536a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005378:	e7f0      	b.n	800535c <prvIdleTask+0x8>
 800537a:	bf00      	nop
 800537c:	20000a58 	.word	0x20000a58
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	e00c      	b.n	80053aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a12      	ldr	r2, [pc, #72]	; (80053e4 <prvInitialiseTaskLists+0x60>)
 800539c:	4413      	add	r3, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe fd24 	bl	8003dec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3301      	adds	r3, #1
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b37      	cmp	r3, #55	; 0x37
 80053ae:	d9ef      	bls.n	8005390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053b0:	480d      	ldr	r0, [pc, #52]	; (80053e8 <prvInitialiseTaskLists+0x64>)
 80053b2:	f7fe fd1b 	bl	8003dec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053b6:	480d      	ldr	r0, [pc, #52]	; (80053ec <prvInitialiseTaskLists+0x68>)
 80053b8:	f7fe fd18 	bl	8003dec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053bc:	480c      	ldr	r0, [pc, #48]	; (80053f0 <prvInitialiseTaskLists+0x6c>)
 80053be:	f7fe fd15 	bl	8003dec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053c2:	480c      	ldr	r0, [pc, #48]	; (80053f4 <prvInitialiseTaskLists+0x70>)
 80053c4:	f7fe fd12 	bl	8003dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053c8:	480b      	ldr	r0, [pc, #44]	; (80053f8 <prvInitialiseTaskLists+0x74>)
 80053ca:	f7fe fd0f 	bl	8003dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <prvInitialiseTaskLists+0x78>)
 80053d0:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <prvInitialiseTaskLists+0x64>)
 80053d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <prvInitialiseTaskLists+0x7c>)
 80053d6:	4a05      	ldr	r2, [pc, #20]	; (80053ec <prvInitialiseTaskLists+0x68>)
 80053d8:	601a      	str	r2, [r3, #0]
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000a58 	.word	0x20000a58
 80053e8:	20000eb8 	.word	0x20000eb8
 80053ec:	20000ecc 	.word	0x20000ecc
 80053f0:	20000ee8 	.word	0x20000ee8
 80053f4:	20000efc 	.word	0x20000efc
 80053f8:	20000f14 	.word	0x20000f14
 80053fc:	20000ee0 	.word	0x20000ee0
 8005400:	20000ee4 	.word	0x20000ee4

08005404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800540a:	e019      	b.n	8005440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800540c:	f000 ffc2 	bl	8006394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <prvCheckTasksWaitingTermination+0x50>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fd6f 	bl	8003f00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <prvCheckTasksWaitingTermination+0x54>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3b01      	subs	r3, #1
 8005428:	4a0b      	ldr	r2, [pc, #44]	; (8005458 <prvCheckTasksWaitingTermination+0x54>)
 800542a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <prvCheckTasksWaitingTermination+0x58>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <prvCheckTasksWaitingTermination+0x58>)
 8005434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005436:	f000 ffdd 	bl	80063f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f810 	bl	8005460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <prvCheckTasksWaitingTermination+0x58>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e1      	bne.n	800540c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000efc 	.word	0x20000efc
 8005458:	20000f28 	.word	0x20000f28
 800545c:	20000f10 	.word	0x20000f10

08005460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800546e:	2b00      	cmp	r3, #0
 8005470:	d108      	bne.n	8005484 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	4618      	mov	r0, r3
 8005478:	f001 f97a 	bl	8006770 <vPortFree>
				vPortFree( pxTCB );
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 f977 	bl	8006770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005482:	e018      	b.n	80054b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800548a:	2b01      	cmp	r3, #1
 800548c:	d103      	bne.n	8005496 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 f96e 	bl	8006770 <vPortFree>
	}
 8005494:	e00f      	b.n	80054b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800549c:	2b02      	cmp	r3, #2
 800549e:	d00a      	beq.n	80054b6 <prvDeleteTCB+0x56>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60fb      	str	r3, [r7, #12]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <prvDeleteTCB+0x54>
	}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <prvResetNextTaskUnblockTime+0x38>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <prvResetNextTaskUnblockTime+0x3c>)
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054d8:	e008      	b.n	80054ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <prvResetNextTaskUnblockTime+0x38>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4a04      	ldr	r2, [pc, #16]	; (80054fc <prvResetNextTaskUnblockTime+0x3c>)
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20000ee0 	.word	0x20000ee0
 80054fc:	20000f48 	.word	0x20000f48

08005500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <xTaskGetSchedulerState+0x34>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800550e:	2301      	movs	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	e008      	b.n	8005526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <xTaskGetSchedulerState+0x38>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800551c:	2302      	movs	r3, #2
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e001      	b.n	8005526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005526:	687b      	ldr	r3, [r7, #4]
	}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	20000f34 	.word	0x20000f34
 8005538:	20000f50 	.word	0x20000f50

0800553c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d056      	beq.n	8005600 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005552:	4b2e      	ldr	r3, [pc, #184]	; (800560c <xTaskPriorityDisinherit+0xd0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	429a      	cmp	r2, r3
 800555a:	d00a      	beq.n	8005572 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60fb      	str	r3, [r7, #12]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	60bb      	str	r3, [r7, #8]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d02c      	beq.n	8005600 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d128      	bne.n	8005600 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fca4 	bl	8003f00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <xTaskPriorityDisinherit+0xd4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d903      	bls.n	80055e0 <xTaskPriorityDisinherit+0xa4>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	4a0c      	ldr	r2, [pc, #48]	; (8005610 <xTaskPriorityDisinherit+0xd4>)
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4a09      	ldr	r2, [pc, #36]	; (8005614 <xTaskPriorityDisinherit+0xd8>)
 80055ee:	441a      	add	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f7fe fc25 	bl	8003e46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005600:	697b      	ldr	r3, [r7, #20]
	}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000a54 	.word	0x20000a54
 8005610:	20000f30 	.word	0x20000f30
 8005614:	20000a58 	.word	0x20000a58

08005618 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005626:	f000 feb5 	bl	8006394 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <xTaskNotifyWait+0xac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d01a      	beq.n	800566e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <xTaskNotifyWait+0xac>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	43d2      	mvns	r2, r2
 8005642:	400a      	ands	r2, r1
 8005644:	665a      	str	r2, [r3, #100]	; 0x64

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005646:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <xTaskNotifyWait+0xac>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

				if( xTicksToWait > ( TickType_t ) 0 )
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005656:	2101      	movs	r1, #1
 8005658:	6838      	ldr	r0, [r7, #0]
 800565a:	f000 f9cb 	bl	80059f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800565e:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <xTaskNotifyWait+0xb0>)
 8005660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800566e:	f000 fec1 	bl	80063f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005672:	f000 fe8f 	bl	8006394 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <xTaskNotifyWait+0xac>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <xTaskNotifyWait+0xac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d002      	beq.n	800569a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e008      	b.n	80056ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <xTaskNotifyWait+0xac>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	43d2      	mvns	r2, r2
 80056a4:	400a      	ands	r2, r1
 80056a6:	665a      	str	r2, [r3, #100]	; 0x64
				xReturn = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <xTaskNotifyWait+0xac>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		}
		taskEXIT_CRITICAL();
 80056b6:	f000 fe9d 	bl	80063f4 <vPortExitCritical>

		return xReturn;
 80056ba:	697b      	ldr	r3, [r7, #20]
	}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000a54 	.word	0x20000a54
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80056dc:	2301      	movs	r3, #1
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <xTaskGenericNotify+0x30>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	61bb      	str	r3, [r7, #24]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005700:	f000 fe48 	bl	8006394 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005718:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

			switch( eAction )
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d828      	bhi.n	800577a <xTaskGenericNotify+0xae>
 8005728:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <xTaskGenericNotify+0x64>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	0800579b 	.word	0x0800579b
 8005734:	08005745 	.word	0x08005745
 8005738:	08005753 	.word	0x08005753
 800573c:	0800575f 	.word	0x0800575f
 8005740:	08005767 	.word	0x08005767
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	431a      	orrs	r2, r3
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 8005750:	e026      	b.n	80057a0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 800575c:	e020      	b.n	80057a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 8005764:	e01c      	b.n	80057a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d003      	beq.n	8005774 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	665a      	str	r2, [r3, #100]	; 0x64
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005772:	e015      	b.n	80057a0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8005774:	2300      	movs	r3, #0
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005778:	e012      	b.n	80057a0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d00c      	beq.n	800579e <xTaskGenericNotify+0xd2>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	617b      	str	r3, [r7, #20]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xTaskGenericNotify+0xcc>
					break;
 800579a:	bf00      	nop
 800579c:	e000      	b.n	80057a0 <xTaskGenericNotify+0xd4>

					break;
 800579e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d13a      	bne.n	800581c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fba8 	bl	8003f00 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4b1d      	ldr	r3, [pc, #116]	; (800582c <xTaskGenericNotify+0x160>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d903      	bls.n	80057c4 <xTaskGenericNotify+0xf8>
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a1a      	ldr	r2, [pc, #104]	; (800582c <xTaskGenericNotify+0x160>)
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4a17      	ldr	r2, [pc, #92]	; (8005830 <xTaskGenericNotify+0x164>)
 80057d2:	441a      	add	r2, r3
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f7fe fb33 	bl	8003e46 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <xTaskGenericNotify+0x132>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	613b      	str	r3, [r7, #16]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005802:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <xTaskGenericNotify+0x168>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	429a      	cmp	r2, r3
 800580a:	d907      	bls.n	800581c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <xTaskGenericNotify+0x16c>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800581c:	f000 fdea 	bl	80063f4 <vPortExitCritical>

		return xReturn;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005822:	4618      	mov	r0, r3
 8005824:	3728      	adds	r7, #40	; 0x28
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000f30 	.word	0x20000f30
 8005830:	20000a58 	.word	0x20000a58
 8005834:	20000a54 	.word	0x20000a54
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800584c:	2301      	movs	r3, #1
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800586c:	f000 fe74 	bl	8006558 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005874:	f3ef 8211 	mrs	r2, BASEPRI
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	623a      	str	r2, [r7, #32]
 800588a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800588c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80058a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

			switch( eAction )
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d828      	bhi.n	8005908 <xTaskGenericNotifyFromISR+0xcc>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <xTaskGenericNotifyFromISR+0x80>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	08005929 	.word	0x08005929
 80058c0:	080058d1 	.word	0x080058d1
 80058c4:	080058df 	.word	0x080058df
 80058c8:	080058eb 	.word	0x080058eb
 80058cc:	080058f3 	.word	0x080058f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 80058dc:	e027      	b.n	800592e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 80058e8:	e021      	b.n	800592e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 80058f0:	e01d      	b.n	800592e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80058f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d003      	beq.n	8005902 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	665a      	str	r2, [r3, #100]	; 0x64
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005900:	e015      	b.n	800592e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005902:	2300      	movs	r3, #0
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005906:	e012      	b.n	800592e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d00c      	beq.n	800592c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	61bb      	str	r3, [r7, #24]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <xTaskGenericNotifyFromISR+0xea>
					break;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800592c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800592e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005932:	2b01      	cmp	r3, #1
 8005934:	d146      	bne.n	80059c4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005954:	4b21      	ldr	r3, [pc, #132]	; (80059dc <xTaskGenericNotifyFromISR+0x1a0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11d      	bne.n	8005998 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	3304      	adds	r3, #4
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe facd 	bl	8003f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596a:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d903      	bls.n	800597a <xTaskGenericNotifyFromISR+0x13e>
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <xTaskGenericNotifyFromISR+0x1a4>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <xTaskGenericNotifyFromISR+0x1a8>)
 8005988:	441a      	add	r2, r3
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f7fe fa58 	bl	8003e46 <vListInsertEnd>
 8005996:	e005      	b.n	80059a4 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	3318      	adds	r3, #24
 800599c:	4619      	mov	r1, r3
 800599e:	4812      	ldr	r0, [pc, #72]	; (80059e8 <xTaskGenericNotifyFromISR+0x1ac>)
 80059a0:	f7fe fa51 	bl	8003e46 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	4b10      	ldr	r3, [pc, #64]	; (80059ec <xTaskGenericNotifyFromISR+0x1b0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d908      	bls.n	80059c4 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80059b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80059b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <xTaskGenericNotifyFromISR+0x1b4>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f383 8811 	msr	BASEPRI, r3
}
 80059ce:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80059d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3738      	adds	r7, #56	; 0x38
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000f50 	.word	0x20000f50
 80059e0:	20000f30 	.word	0x20000f30
 80059e4:	20000a58 	.word	0x20000a58
 80059e8:	20000ee8 	.word	0x20000ee8
 80059ec:	20000a54 	.word	0x20000a54
 80059f0:	20000f3c 	.word	0x20000f3c

080059f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a04:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fa78 	bl	8003f00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d10a      	bne.n	8005a2e <prvAddCurrentTaskToDelayedList+0x3a>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a1e:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4819      	ldr	r0, [pc, #100]	; (8005a8c <prvAddCurrentTaskToDelayedList+0x98>)
 8005a28:	f7fe fa0d 	bl	8003e46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a2c:	e026      	b.n	8005a7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4413      	add	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d209      	bcs.n	8005a5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a46:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f7fe fa1b 	bl	8003e8e <vListInsert>
}
 8005a58:	e010      	b.n	8005a7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a5a:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe fa11 	bl	8003e8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d202      	bcs.n	8005a7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a76:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6013      	str	r3, [r2, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000f2c 	.word	0x20000f2c
 8005a88:	20000a54 	.word	0x20000a54
 8005a8c:	20000f14 	.word	0x20000f14
 8005a90:	20000ee4 	.word	0x20000ee4
 8005a94:	20000ee0 	.word	0x20000ee0
 8005a98:	20000f48 	.word	0x20000f48

08005a9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005aa6:	f000 fb07 	bl	80060b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005aaa:	4b1c      	ldr	r3, [pc, #112]	; (8005b1c <xTimerCreateTimerTask+0x80>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d021      	beq.n	8005af6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005aba:	1d3a      	adds	r2, r7, #4
 8005abc:	f107 0108 	add.w	r1, r7, #8
 8005ac0:	f107 030c 	add.w	r3, r7, #12
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe f977 	bl	8003db8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	9202      	str	r2, [sp, #8]
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	460a      	mov	r2, r1
 8005adc:	4910      	ldr	r1, [pc, #64]	; (8005b20 <xTimerCreateTimerTask+0x84>)
 8005ade:	4811      	ldr	r0, [pc, #68]	; (8005b24 <xTimerCreateTimerTask+0x88>)
 8005ae0:	f7fe ff24 	bl	800492c <xTaskCreateStatic>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <xTimerCreateTimerTask+0x8c>)
 8005ae8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <xTimerCreateTimerTask+0x8c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005af2:	2301      	movs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	613b      	str	r3, [r7, #16]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b12:	697b      	ldr	r3, [r7, #20]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000f84 	.word	0x20000f84
 8005b20:	0800aac8 	.word	0x0800aac8
 8005b24:	08005c61 	.word	0x08005c61
 8005b28:	20000f88 	.word	0x20000f88

08005b2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	623b      	str	r3, [r7, #32]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	; (8005bc4 <xTimerGenericCommand+0x98>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02a      	beq.n	8005bb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	dc18      	bgt.n	8005ba6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b74:	f7ff fcc4 	bl	8005500 <xTaskGetSchedulerState>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d109      	bne.n	8005b92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <xTimerGenericCommand+0x98>)
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	f107 0110 	add.w	r1, r7, #16
 8005b86:	2300      	movs	r3, #0
 8005b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8a:	f7fe fae7 	bl	800415c <xQueueGenericSend>
 8005b8e:	6278      	str	r0, [r7, #36]	; 0x24
 8005b90:	e012      	b.n	8005bb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <xTimerGenericCommand+0x98>)
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	f107 0110 	add.w	r1, r7, #16
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f7fe fadd 	bl	800415c <xQueueGenericSend>
 8005ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ba4:	e008      	b.n	8005bb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <xTimerGenericCommand+0x98>)
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f107 0110 	add.w	r1, r7, #16
 8005bae:	2300      	movs	r3, #0
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	f7fe fbd1 	bl	8004358 <xQueueGenericSendFromISR>
 8005bb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3728      	adds	r7, #40	; 0x28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000f84 	.word	0x20000f84

08005bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd2:	4b22      	ldr	r3, [pc, #136]	; (8005c5c <prvProcessExpiredTimer+0x94>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe f98d 	bl	8003f00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d022      	beq.n	8005c3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	18d1      	adds	r1, r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	6978      	ldr	r0, [r7, #20]
 8005c02:	f000 f8d1 	bl	8005da8 <prvInsertTimerInActiveList>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01f      	beq.n	8005c4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2300      	movs	r3, #0
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	2100      	movs	r1, #0
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f7ff ff88 	bl	8005b2c <xTimerGenericCommand>
 8005c1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d113      	bne.n	8005c4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60fb      	str	r3, [r7, #12]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	6978      	ldr	r0, [r7, #20]
 8005c52:	4798      	blx	r3
}
 8005c54:	bf00      	nop
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000f7c 	.word	0x20000f7c

08005c60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f857 	bl	8005d20 <prvGetNextExpireTime>
 8005c72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4619      	mov	r1, r3
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f803 	bl	8005c84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c7e:	f000 f8d5 	bl	8005e2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c82:	e7f1      	b.n	8005c68 <prvTimerTask+0x8>

08005c84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c8e:	f7ff f855 	bl	8004d3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c92:	f107 0308 	add.w	r3, r7, #8
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f866 	bl	8005d68 <prvSampleTimeNow>
 8005c9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d130      	bne.n	8005d06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <prvProcessTimerOrBlockTask+0x3c>
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d806      	bhi.n	8005cc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cb2:	f7ff f851 	bl	8004d58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cb6:	68f9      	ldr	r1, [r7, #12]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ff85 	bl	8005bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cbe:	e024      	b.n	8005d0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <prvProcessTimerOrBlockTask+0x90>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <prvProcessTimerOrBlockTask+0x50>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <prvProcessTimerOrBlockTask+0x52>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <prvProcessTimerOrBlockTask+0x94>)
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7fe fded 	bl	80048c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cea:	f7ff f835 	bl	8004d58 <xTaskResumeAll>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <prvProcessTimerOrBlockTask+0x98>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
}
 8005d04:	e001      	b.n	8005d0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d06:	f7ff f827 	bl	8004d58 <xTaskResumeAll>
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000f80 	.word	0x20000f80
 8005d18:	20000f84 	.word	0x20000f84
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d28:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <prvGetNextExpireTime+0x44>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <prvGetNextExpireTime+0x16>
 8005d32:	2201      	movs	r2, #1
 8005d34:	e000      	b.n	8005d38 <prvGetNextExpireTime+0x18>
 8005d36:	2200      	movs	r2, #0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <prvGetNextExpireTime+0x44>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e001      	b.n	8005d54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000f7c 	.word	0x20000f7c

08005d68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d70:	f7ff f890 	bl	8004e94 <xTaskGetTickCount>
 8005d74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <prvSampleTimeNow+0x3c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d205      	bcs.n	8005d8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d80:	f000 f936 	bl	8005ff0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d92:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <prvSampleTimeNow+0x3c>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d98:	68fb      	ldr	r3, [r7, #12]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000f8c 	.word	0x20000f8c

08005da8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d812      	bhi.n	8005df4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d302      	bcc.n	8005de2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e01b      	b.n	8005e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <prvInsertTimerInActiveList+0x7c>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fe f84e 	bl	8003e8e <vListInsert>
 8005df2:	e012      	b.n	8005e1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d206      	bcs.n	8005e0a <prvInsertTimerInActiveList+0x62>
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d302      	bcc.n	8005e0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e007      	b.n	8005e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e0a:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <prvInsertTimerInActiveList+0x80>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7fe f83a 	bl	8003e8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000f80 	.word	0x20000f80
 8005e28:	20000f7c 	.word	0x20000f7c

08005e2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08e      	sub	sp, #56	; 0x38
 8005e30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e32:	e0ca      	b.n	8005fca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da18      	bge.n	8005e6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	61fb      	str	r3, [r7, #28]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e62:	6850      	ldr	r0, [r2, #4]
 8005e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e66:	6892      	ldr	r2, [r2, #8]
 8005e68:	4611      	mov	r1, r2
 8005e6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f2c0 80aa 	blt.w	8005fc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe f83b 	bl	8003f00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff6b 	bl	8005d68 <prvSampleTimeNow>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	f200 8097 	bhi.w	8005fca <prvProcessReceivedCommands+0x19e>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <prvProcessReceivedCommands+0x78>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ecd 	.word	0x08005ecd
 8005eb0:	08005f41 	.word	0x08005f41
 8005eb4:	08005f55 	.word	0x08005f55
 8005eb8:	08005f9f 	.word	0x08005f9f
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005ecd 	.word	0x08005ecd
 8005ec4:	08005f41 	.word	0x08005f41
 8005ec8:	08005f55 	.word	0x08005f55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	18d1      	adds	r1, r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eec:	f7ff ff5c 	bl	8005da8 <prvInsertTimerInActiveList>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d069      	beq.n	8005fca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005efc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d05e      	beq.n	8005fca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	441a      	add	r2, r3
 8005f14:	2300      	movs	r3, #0
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1e:	f7ff fe05 	bl	8005b2c <xTimerGenericCommand>
 8005f22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d14f      	bne.n	8005fca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	61bb      	str	r3, [r7, #24]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f52:	e03a      	b.n	8005fca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	617b      	str	r3, [r7, #20]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	18d1      	adds	r1, r2, r3
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f98:	f7ff ff06 	bl	8005da8 <prvInsertTimerInActiveList>
					break;
 8005f9c:	e015      	b.n	8005fca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d103      	bne.n	8005fb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fae:	f000 fbdf 	bl	8006770 <vPortFree>
 8005fb2:	e00a      	b.n	8005fca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005fc6:	e000      	b.n	8005fca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005fc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fca:	4b08      	ldr	r3, [pc, #32]	; (8005fec <prvProcessReceivedCommands+0x1c0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	1d39      	adds	r1, r7, #4
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fa5c 	bl	8004490 <xQueueReceive>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f47f af2a 	bne.w	8005e34 <prvProcessReceivedCommands+0x8>
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	3730      	adds	r7, #48	; 0x30
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000f84 	.word	0x20000f84

08005ff0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ff6:	e048      	b.n	800608a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <prvSwitchTimerLists+0xc0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006002:	4b2b      	ldr	r3, [pc, #172]	; (80060b0 <prvSwitchTimerLists+0xc0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3304      	adds	r3, #4
 8006010:	4618      	mov	r0, r3
 8006012:	f7fd ff75 	bl	8003f00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d02e      	beq.n	800608a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	429a      	cmp	r2, r3
 800603c:	d90e      	bls.n	800605c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800604a:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <prvSwitchTimerLists+0xc0>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fd ff1a 	bl	8003e8e <vListInsert>
 800605a:	e016      	b.n	800608a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	2100      	movs	r1, #0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff fd60 	bl	8005b2c <xTimerGenericCommand>
 800606c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	603b      	str	r3, [r7, #0]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <prvSwitchTimerLists+0xc0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1b1      	bne.n	8005ff8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <prvSwitchTimerLists+0xc0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800609a:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <prvSwitchTimerLists+0xc4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a04      	ldr	r2, [pc, #16]	; (80060b0 <prvSwitchTimerLists+0xc0>)
 80060a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060a2:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <prvSwitchTimerLists+0xc4>)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000f7c 	.word	0x20000f7c
 80060b4:	20000f80 	.word	0x20000f80

080060b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060be:	f000 f969 	bl	8006394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <prvCheckForValidListAndQueue+0x60>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d120      	bne.n	800610c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060ca:	4814      	ldr	r0, [pc, #80]	; (800611c <prvCheckForValidListAndQueue+0x64>)
 80060cc:	f7fd fe8e 	bl	8003dec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060d0:	4813      	ldr	r0, [pc, #76]	; (8006120 <prvCheckForValidListAndQueue+0x68>)
 80060d2:	f7fd fe8b 	bl	8003dec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <prvCheckForValidListAndQueue+0x6c>)
 80060d8:	4a10      	ldr	r2, [pc, #64]	; (800611c <prvCheckForValidListAndQueue+0x64>)
 80060da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <prvCheckForValidListAndQueue+0x70>)
 80060de:	4a10      	ldr	r2, [pc, #64]	; (8006120 <prvCheckForValidListAndQueue+0x68>)
 80060e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060e2:	2300      	movs	r3, #0
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	4b11      	ldr	r3, [pc, #68]	; (800612c <prvCheckForValidListAndQueue+0x74>)
 80060e8:	4a11      	ldr	r2, [pc, #68]	; (8006130 <prvCheckForValidListAndQueue+0x78>)
 80060ea:	2110      	movs	r1, #16
 80060ec:	200a      	movs	r0, #10
 80060ee:	f7fd ff99 	bl	8004024 <xQueueGenericCreateStatic>
 80060f2:	4603      	mov	r3, r0
 80060f4:	4a08      	ldr	r2, [pc, #32]	; (8006118 <prvCheckForValidListAndQueue+0x60>)
 80060f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060f8:	4b07      	ldr	r3, [pc, #28]	; (8006118 <prvCheckForValidListAndQueue+0x60>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <prvCheckForValidListAndQueue+0x60>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	490b      	ldr	r1, [pc, #44]	; (8006134 <prvCheckForValidListAndQueue+0x7c>)
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fbb2 	bl	8004870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800610c:	f000 f972 	bl	80063f4 <vPortExitCritical>
}
 8006110:	bf00      	nop
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000f84 	.word	0x20000f84
 800611c:	20000f54 	.word	0x20000f54
 8006120:	20000f68 	.word	0x20000f68
 8006124:	20000f7c 	.word	0x20000f7c
 8006128:	20000f80 	.word	0x20000f80
 800612c:	20001030 	.word	0x20001030
 8006130:	20000f90 	.word	0x20000f90
 8006134:	0800aad0 	.word	0x0800aad0

08006138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3b04      	subs	r3, #4
 8006148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b04      	subs	r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3b04      	subs	r3, #4
 8006166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006168:	4a0c      	ldr	r2, [pc, #48]	; (800619c <pxPortInitialiseStack+0x64>)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3b14      	subs	r3, #20
 8006172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b04      	subs	r3, #4
 800617e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f06f 0202 	mvn.w	r2, #2
 8006186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3b20      	subs	r3, #32
 800618c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800618e:	68fb      	ldr	r3, [r7, #12]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	080061a1 	.word	0x080061a1

080061a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061aa:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <prvTaskExitError+0x54>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d00a      	beq.n	80061ca <prvTaskExitError+0x2a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	60fb      	str	r3, [r7, #12]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <prvTaskExitError+0x28>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	60bb      	str	r3, [r7, #8]
}
 80061dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061de:	bf00      	nop
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0fc      	beq.n	80061e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	2000000c 	.word	0x2000000c
	...

08006200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <pxCurrentTCBConst2>)
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6808      	ldr	r0, [r1, #0]
 8006206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	f380 8809 	msr	PSP, r0
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8811 	msr	BASEPRI, r0
 800621a:	4770      	bx	lr
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst2>:
 8006220:	20000a54 	.word	0x20000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <prvPortStartFirstTask+0x24>)
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f380 8808 	msr	MSP, r0
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8814 	msr	CONTROL, r0
 800623a:	b662      	cpsie	i
 800623c:	b661      	cpsie	f
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	df00      	svc	0
 8006248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800624a:	bf00      	nop
 800624c:	e000ed08 	.word	0xe000ed08

08006250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006256:	4b46      	ldr	r3, [pc, #280]	; (8006370 <xPortStartScheduler+0x120>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a46      	ldr	r2, [pc, #280]	; (8006374 <xPortStartScheduler+0x124>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10a      	bne.n	8006276 <xPortStartScheduler+0x26>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	613b      	str	r3, [r7, #16]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006276:	4b3e      	ldr	r3, [pc, #248]	; (8006370 <xPortStartScheduler+0x120>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3f      	ldr	r2, [pc, #252]	; (8006378 <xPortStartScheduler+0x128>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10a      	bne.n	8006296 <xPortStartScheduler+0x46>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <xPortStartScheduler+0x12c>)
 8006298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4b31      	ldr	r3, [pc, #196]	; (8006380 <xPortStartScheduler+0x130>)
 80062bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062be:	4b31      	ldr	r3, [pc, #196]	; (8006384 <xPortStartScheduler+0x134>)
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062c4:	e009      	b.n	80062da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <xPortStartScheduler+0x134>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <xPortStartScheduler+0x134>)
 80062ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d0ef      	beq.n	80062c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062e6:	4b27      	ldr	r3, [pc, #156]	; (8006384 <xPortStartScheduler+0x134>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1c3 0307 	rsb	r3, r3, #7
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d00a      	beq.n	8006308 <xPortStartScheduler+0xb8>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006308:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <xPortStartScheduler+0x134>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <xPortStartScheduler+0x134>)
 8006310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <xPortStartScheduler+0x134>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800631a:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <xPortStartScheduler+0x134>)
 800631c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006326:	4b18      	ldr	r3, [pc, #96]	; (8006388 <xPortStartScheduler+0x138>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <xPortStartScheduler+0x138>)
 800632c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <xPortStartScheduler+0x138>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <xPortStartScheduler+0x138>)
 8006338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800633c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800633e:	f000 f8dd 	bl	80064fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <xPortStartScheduler+0x13c>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006348:	f000 f8fc 	bl	8006544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xPortStartScheduler+0x140>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <xPortStartScheduler+0x140>)
 8006352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006358:	f7ff ff66 	bl	8006228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800635c:	f7fe fe64 	bl	8005028 <vTaskSwitchContext>
	prvTaskExitError();
 8006360:	f7ff ff1e 	bl	80061a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	e000ed00 	.word	0xe000ed00
 8006374:	410fc271 	.word	0x410fc271
 8006378:	410fc270 	.word	0x410fc270
 800637c:	e000e400 	.word	0xe000e400
 8006380:	20001080 	.word	0x20001080
 8006384:	20001084 	.word	0x20001084
 8006388:	e000ed20 	.word	0xe000ed20
 800638c:	2000000c 	.word	0x2000000c
 8006390:	e000ef34 	.word	0xe000ef34

08006394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	607b      	str	r3, [r7, #4]
}
 80063ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <vPortEnterCritical+0x58>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <vPortEnterCritical+0x58>)
 80063b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <vPortEnterCritical+0x58>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10f      	bne.n	80063e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <vPortEnterCritical+0x5c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	603b      	str	r3, [r7, #0]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <vPortEnterCritical+0x4a>
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <vPortExitCritical+0x50>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vPortExitCritical+0x24>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <vPortExitCritical+0x50>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <vPortExitCritical+0x50>)
 8006420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <vPortExitCritical+0x50>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <vPortExitCritical+0x42>
 800642a:	2300      	movs	r3, #0
 800642c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f383 8811 	msr	BASEPRI, r3
}
 8006434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c
	...

08006450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006450:	f3ef 8009 	mrs	r0, PSP
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <pxCurrentTCBConst>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f01e 0f10 	tst.w	lr, #16
 8006460:	bf08      	it	eq
 8006462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006474:	f380 8811 	msr	BASEPRI, r0
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f7fe fdd2 	bl	8005028 <vTaskSwitchContext>
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f380 8811 	msr	BASEPRI, r0
 800648c:	bc09      	pop	{r0, r3}
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	6808      	ldr	r0, [r1, #0]
 8006492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006496:	f01e 0f10 	tst.w	lr, #16
 800649a:	bf08      	it	eq
 800649c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064a0:	f380 8809 	msr	PSP, r0
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst>:
 80064b0:	20000a54 	.word	0x20000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	607b      	str	r3, [r7, #4]
}
 80064d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064d2:	f7fe fcef 	bl	8004eb4 <xTaskIncrementTick>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <xPortSysTickHandler+0x40>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <vPortSetupTimerInterrupt+0x38>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <vPortSetupTimerInterrupt+0x3c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0a      	ldr	r2, [pc, #40]	; (800653c <vPortSetupTimerInterrupt+0x40>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	4a09      	ldr	r2, [pc, #36]	; (8006540 <vPortSetupTimerInterrupt+0x44>)
 800651a:	3b01      	subs	r3, #1
 800651c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800651e:	4b04      	ldr	r3, [pc, #16]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	e000e010 	.word	0xe000e010
 8006534:	e000e018 	.word	0xe000e018
 8006538:	20000000 	.word	0x20000000
 800653c:	51eb851f 	.word	0x51eb851f
 8006540:	e000e014 	.word	0xe000e014

08006544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006554 <vPortEnableVFP+0x10>
 8006548:	6801      	ldr	r1, [r0, #0]
 800654a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800654e:	6001      	str	r1, [r0, #0]
 8006550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006552:	bf00      	nop
 8006554:	e000ed88 	.word	0xe000ed88

08006558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800655e:	f3ef 8305 	mrs	r3, IPSR
 8006562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b0f      	cmp	r3, #15
 8006568:	d914      	bls.n	8006594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800656a:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <vPortValidateInterruptPriority+0x70>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006574:	4b15      	ldr	r3, [pc, #84]	; (80065cc <vPortValidateInterruptPriority+0x74>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	7afa      	ldrb	r2, [r7, #11]
 800657a:	429a      	cmp	r2, r3
 800657c:	d20a      	bcs.n	8006594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	607b      	str	r3, [r7, #4]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <vPortValidateInterruptPriority+0x78>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <vPortValidateInterruptPriority+0x7c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d90a      	bls.n	80065ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	603b      	str	r3, [r7, #0]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <vPortValidateInterruptPriority+0x60>
	}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	e000e3f0 	.word	0xe000e3f0
 80065cc:	20001080 	.word	0x20001080
 80065d0:	e000ed0c 	.word	0xe000ed0c
 80065d4:	20001084 	.word	0x20001084

080065d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	; 0x28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065e4:	f7fe fbaa 	bl	8004d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065e8:	4b5b      	ldr	r3, [pc, #364]	; (8006758 <pvPortMalloc+0x180>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065f0:	f000 f920 	bl	8006834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065f4:	4b59      	ldr	r3, [pc, #356]	; (800675c <pvPortMalloc+0x184>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 8093 	bne.w	8006728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01d      	beq.n	8006644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006608:	2208      	movs	r2, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f023 0307 	bic.w	r3, r3, #7
 8006620:	3308      	adds	r3, #8
 8006622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <pvPortMalloc+0x6c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	617b      	str	r3, [r7, #20]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d06e      	beq.n	8006728 <pvPortMalloc+0x150>
 800664a:	4b45      	ldr	r3, [pc, #276]	; (8006760 <pvPortMalloc+0x188>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d869      	bhi.n	8006728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006654:	4b43      	ldr	r3, [pc, #268]	; (8006764 <pvPortMalloc+0x18c>)
 8006656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006658:	4b42      	ldr	r3, [pc, #264]	; (8006764 <pvPortMalloc+0x18c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800665e:	e004      	b.n	800666a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d903      	bls.n	800667c <pvPortMalloc+0xa4>
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f1      	bne.n	8006660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800667c:	4b36      	ldr	r3, [pc, #216]	; (8006758 <pvPortMalloc+0x180>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	429a      	cmp	r2, r3
 8006684:	d050      	beq.n	8006728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2208      	movs	r2, #8
 800668c:	4413      	add	r3, r2
 800668e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	2308      	movs	r3, #8
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d91f      	bls.n	80066e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <pvPortMalloc+0xf8>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	613b      	str	r3, [r7, #16]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066e2:	69b8      	ldr	r0, [r7, #24]
 80066e4:	f000 f908 	bl	80068f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <pvPortMalloc+0x188>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <pvPortMalloc+0x188>)
 80066f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066f6:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <pvPortMalloc+0x188>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <pvPortMalloc+0x190>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d203      	bcs.n	800670a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006702:	4b17      	ldr	r3, [pc, #92]	; (8006760 <pvPortMalloc+0x188>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a18      	ldr	r2, [pc, #96]	; (8006768 <pvPortMalloc+0x190>)
 8006708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4b13      	ldr	r3, [pc, #76]	; (800675c <pvPortMalloc+0x184>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	431a      	orrs	r2, r3
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <pvPortMalloc+0x194>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a11      	ldr	r2, [pc, #68]	; (800676c <pvPortMalloc+0x194>)
 8006726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006728:	f7fe fb16 	bl	8004d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <pvPortMalloc+0x174>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <pvPortMalloc+0x172>
	return pvReturn;
 800674c:	69fb      	ldr	r3, [r7, #28]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3728      	adds	r7, #40	; 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20004c90 	.word	0x20004c90
 800675c:	20004ca4 	.word	0x20004ca4
 8006760:	20004c94 	.word	0x20004c94
 8006764:	20004c88 	.word	0x20004c88
 8006768:	20004c98 	.word	0x20004c98
 800676c:	20004c9c 	.word	0x20004c9c

08006770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d04d      	beq.n	800681e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006782:	2308      	movs	r3, #8
 8006784:	425b      	negs	r3, r3
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4413      	add	r3, r2
 800678a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	4b24      	ldr	r3, [pc, #144]	; (8006828 <vPortFree+0xb8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <vPortFree+0x44>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	60fb      	str	r3, [r7, #12]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <vPortFree+0x62>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60bb      	str	r3, [r7, #8]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <vPortFree+0xb8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01e      	beq.n	800681e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d11a      	bne.n	800681e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <vPortFree+0xb8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	401a      	ands	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067f8:	f7fe faa0 	bl	8004d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <vPortFree+0xbc>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4413      	add	r3, r2
 8006806:	4a09      	ldr	r2, [pc, #36]	; (800682c <vPortFree+0xbc>)
 8006808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800680a:	6938      	ldr	r0, [r7, #16]
 800680c:	f000 f874 	bl	80068f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <vPortFree+0xc0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3301      	adds	r3, #1
 8006816:	4a06      	ldr	r2, [pc, #24]	; (8006830 <vPortFree+0xc0>)
 8006818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800681a:	f7fe fa9d 	bl	8004d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800681e:	bf00      	nop
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20004ca4 	.word	0x20004ca4
 800682c:	20004c94 	.word	0x20004c94
 8006830:	20004ca0 	.word	0x20004ca0

08006834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800683a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800683e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006840:	4b27      	ldr	r3, [pc, #156]	; (80068e0 <prvHeapInit+0xac>)
 8006842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00c      	beq.n	8006868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3307      	adds	r3, #7
 8006852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0307 	bic.w	r3, r3, #7
 800685a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <prvHeapInit+0xac>)
 8006864:	4413      	add	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <prvHeapInit+0xb0>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006872:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <prvHeapInit+0xb0>)
 8006874:	2200      	movs	r2, #0
 8006876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4413      	add	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006880:	2208      	movs	r2, #8
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <prvHeapInit+0xb4>)
 8006894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <prvHeapInit+0xb4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800689e:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <prvHeapInit+0xb4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	1ad2      	subs	r2, r2, r3
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <prvHeapInit+0xb4>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <prvHeapInit+0xb8>)
 80068c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <prvHeapInit+0xbc>)
 80068ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <prvHeapInit+0xc0>)
 80068ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	20001088 	.word	0x20001088
 80068e4:	20004c88 	.word	0x20004c88
 80068e8:	20004c90 	.word	0x20004c90
 80068ec:	20004c98 	.word	0x20004c98
 80068f0:	20004c94 	.word	0x20004c94
 80068f4:	20004ca4 	.word	0x20004ca4

080068f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006900:	4b28      	ldr	r3, [pc, #160]	; (80069a4 <prvInsertBlockIntoFreeList+0xac>)
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e002      	b.n	800690c <prvInsertBlockIntoFreeList+0x14>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d8f7      	bhi.n	8006906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	4413      	add	r3, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d108      	bne.n	800693a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	441a      	add	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	441a      	add	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d118      	bne.n	8006980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d00d      	beq.n	8006976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	441a      	add	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	e008      	b.n	8006988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e003      	b.n	8006988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d002      	beq.n	8006996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20004c88 	.word	0x20004c88
 80069a8:	20004c90 	.word	0x20004c90

080069ac <atof>:
 80069ac:	2100      	movs	r1, #0
 80069ae:	f001 bae5 	b.w	8007f7c <strtod>
	...

080069b4 <__errno>:
 80069b4:	4b01      	ldr	r3, [pc, #4]	; (80069bc <__errno+0x8>)
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	20000010 	.word	0x20000010

080069c0 <__libc_init_array>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	4d0d      	ldr	r5, [pc, #52]	; (80069f8 <__libc_init_array+0x38>)
 80069c4:	4c0d      	ldr	r4, [pc, #52]	; (80069fc <__libc_init_array+0x3c>)
 80069c6:	1b64      	subs	r4, r4, r5
 80069c8:	10a4      	asrs	r4, r4, #2
 80069ca:	2600      	movs	r6, #0
 80069cc:	42a6      	cmp	r6, r4
 80069ce:	d109      	bne.n	80069e4 <__libc_init_array+0x24>
 80069d0:	4d0b      	ldr	r5, [pc, #44]	; (8006a00 <__libc_init_array+0x40>)
 80069d2:	4c0c      	ldr	r4, [pc, #48]	; (8006a04 <__libc_init_array+0x44>)
 80069d4:	f004 f84a 	bl	800aa6c <_init>
 80069d8:	1b64      	subs	r4, r4, r5
 80069da:	10a4      	asrs	r4, r4, #2
 80069dc:	2600      	movs	r6, #0
 80069de:	42a6      	cmp	r6, r4
 80069e0:	d105      	bne.n	80069ee <__libc_init_array+0x2e>
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e8:	4798      	blx	r3
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7ee      	b.n	80069cc <__libc_init_array+0xc>
 80069ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f2:	4798      	blx	r3
 80069f4:	3601      	adds	r6, #1
 80069f6:	e7f2      	b.n	80069de <__libc_init_array+0x1e>
 80069f8:	0800afdc 	.word	0x0800afdc
 80069fc:	0800afdc 	.word	0x0800afdc
 8006a00:	0800afdc 	.word	0x0800afdc
 8006a04:	0800afe0 	.word	0x0800afe0

08006a08 <memcpy>:
 8006a08:	440a      	add	r2, r1
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a10:	d100      	bne.n	8006a14 <memcpy+0xc>
 8006a12:	4770      	bx	lr
 8006a14:	b510      	push	{r4, lr}
 8006a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a1e:	4291      	cmp	r1, r2
 8006a20:	d1f9      	bne.n	8006a16 <memcpy+0xe>
 8006a22:	bd10      	pop	{r4, pc}

08006a24 <memset>:
 8006a24:	4402      	add	r2, r0
 8006a26:	4603      	mov	r3, r0
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d100      	bne.n	8006a2e <memset+0xa>
 8006a2c:	4770      	bx	lr
 8006a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a32:	e7f9      	b.n	8006a28 <memset+0x4>

08006a34 <__cvt>:
 8006a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	ec55 4b10 	vmov	r4, r5, d0
 8006a3c:	2d00      	cmp	r5, #0
 8006a3e:	460e      	mov	r6, r1
 8006a40:	4619      	mov	r1, r3
 8006a42:	462b      	mov	r3, r5
 8006a44:	bfbb      	ittet	lt
 8006a46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a4a:	461d      	movlt	r5, r3
 8006a4c:	2300      	movge	r3, #0
 8006a4e:	232d      	movlt	r3, #45	; 0x2d
 8006a50:	700b      	strb	r3, [r1, #0]
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a58:	4691      	mov	r9, r2
 8006a5a:	f023 0820 	bic.w	r8, r3, #32
 8006a5e:	bfbc      	itt	lt
 8006a60:	4622      	movlt	r2, r4
 8006a62:	4614      	movlt	r4, r2
 8006a64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a68:	d005      	beq.n	8006a76 <__cvt+0x42>
 8006a6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a6e:	d100      	bne.n	8006a72 <__cvt+0x3e>
 8006a70:	3601      	adds	r6, #1
 8006a72:	2102      	movs	r1, #2
 8006a74:	e000      	b.n	8006a78 <__cvt+0x44>
 8006a76:	2103      	movs	r1, #3
 8006a78:	ab03      	add	r3, sp, #12
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	ab02      	add	r3, sp, #8
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	ec45 4b10 	vmov	d0, r4, r5
 8006a84:	4653      	mov	r3, sl
 8006a86:	4632      	mov	r2, r6
 8006a88:	f001 fb12 	bl	80080b0 <_dtoa_r>
 8006a8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a90:	4607      	mov	r7, r0
 8006a92:	d102      	bne.n	8006a9a <__cvt+0x66>
 8006a94:	f019 0f01 	tst.w	r9, #1
 8006a98:	d022      	beq.n	8006ae0 <__cvt+0xac>
 8006a9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a9e:	eb07 0906 	add.w	r9, r7, r6
 8006aa2:	d110      	bne.n	8006ac6 <__cvt+0x92>
 8006aa4:	783b      	ldrb	r3, [r7, #0]
 8006aa6:	2b30      	cmp	r3, #48	; 0x30
 8006aa8:	d10a      	bne.n	8006ac0 <__cvt+0x8c>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2300      	movs	r3, #0
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7fa f829 	bl	8000b08 <__aeabi_dcmpeq>
 8006ab6:	b918      	cbnz	r0, 8006ac0 <__cvt+0x8c>
 8006ab8:	f1c6 0601 	rsb	r6, r6, #1
 8006abc:	f8ca 6000 	str.w	r6, [sl]
 8006ac0:	f8da 3000 	ldr.w	r3, [sl]
 8006ac4:	4499      	add	r9, r3
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7fa f81b 	bl	8000b08 <__aeabi_dcmpeq>
 8006ad2:	b108      	cbz	r0, 8006ad8 <__cvt+0xa4>
 8006ad4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ad8:	2230      	movs	r2, #48	; 0x30
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	454b      	cmp	r3, r9
 8006ade:	d307      	bcc.n	8006af0 <__cvt+0xbc>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae4:	1bdb      	subs	r3, r3, r7
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	b004      	add	sp, #16
 8006aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af0:	1c59      	adds	r1, r3, #1
 8006af2:	9103      	str	r1, [sp, #12]
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e7f0      	b.n	8006ada <__cvt+0xa6>

08006af8 <__exponent>:
 8006af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afa:	4603      	mov	r3, r0
 8006afc:	2900      	cmp	r1, #0
 8006afe:	bfb8      	it	lt
 8006b00:	4249      	neglt	r1, r1
 8006b02:	f803 2b02 	strb.w	r2, [r3], #2
 8006b06:	bfb4      	ite	lt
 8006b08:	222d      	movlt	r2, #45	; 0x2d
 8006b0a:	222b      	movge	r2, #43	; 0x2b
 8006b0c:	2909      	cmp	r1, #9
 8006b0e:	7042      	strb	r2, [r0, #1]
 8006b10:	dd2a      	ble.n	8006b68 <__exponent+0x70>
 8006b12:	f10d 0407 	add.w	r4, sp, #7
 8006b16:	46a4      	mov	ip, r4
 8006b18:	270a      	movs	r7, #10
 8006b1a:	46a6      	mov	lr, r4
 8006b1c:	460a      	mov	r2, r1
 8006b1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b22:	fb07 1516 	mls	r5, r7, r6, r1
 8006b26:	3530      	adds	r5, #48	; 0x30
 8006b28:	2a63      	cmp	r2, #99	; 0x63
 8006b2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b32:	4631      	mov	r1, r6
 8006b34:	dcf1      	bgt.n	8006b1a <__exponent+0x22>
 8006b36:	3130      	adds	r1, #48	; 0x30
 8006b38:	f1ae 0502 	sub.w	r5, lr, #2
 8006b3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b40:	1c44      	adds	r4, r0, #1
 8006b42:	4629      	mov	r1, r5
 8006b44:	4561      	cmp	r1, ip
 8006b46:	d30a      	bcc.n	8006b5e <__exponent+0x66>
 8006b48:	f10d 0209 	add.w	r2, sp, #9
 8006b4c:	eba2 020e 	sub.w	r2, r2, lr
 8006b50:	4565      	cmp	r5, ip
 8006b52:	bf88      	it	hi
 8006b54:	2200      	movhi	r2, #0
 8006b56:	4413      	add	r3, r2
 8006b58:	1a18      	subs	r0, r3, r0
 8006b5a:	b003      	add	sp, #12
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b66:	e7ed      	b.n	8006b44 <__exponent+0x4c>
 8006b68:	2330      	movs	r3, #48	; 0x30
 8006b6a:	3130      	adds	r1, #48	; 0x30
 8006b6c:	7083      	strb	r3, [r0, #2]
 8006b6e:	70c1      	strb	r1, [r0, #3]
 8006b70:	1d03      	adds	r3, r0, #4
 8006b72:	e7f1      	b.n	8006b58 <__exponent+0x60>

08006b74 <_printf_float>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	ed2d 8b02 	vpush	{d8}
 8006b7c:	b08d      	sub	sp, #52	; 0x34
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b84:	4616      	mov	r6, r2
 8006b86:	461f      	mov	r7, r3
 8006b88:	4605      	mov	r5, r0
 8006b8a:	f002 fce3 	bl	8009554 <_localeconv_r>
 8006b8e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b92:	4650      	mov	r0, sl
 8006b94:	f7f9 fb3c 	bl	8000210 <strlen>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ba8:	3307      	adds	r3, #7
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	f103 0208 	add.w	r2, r3, #8
 8006bb2:	f8c8 2000 	str.w	r2, [r8]
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bcc:	ee08 0a10 	vmov	s16, r0
 8006bd0:	4b9f      	ldr	r3, [pc, #636]	; (8006e50 <_printf_float+0x2dc>)
 8006bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	f7f9 ffc7 	bl	8000b6c <__aeabi_dcmpun>
 8006bde:	bb88      	cbnz	r0, 8006c44 <_printf_float+0xd0>
 8006be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be4:	4b9a      	ldr	r3, [pc, #616]	; (8006e50 <_printf_float+0x2dc>)
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	f7f9 ffa1 	bl	8000b30 <__aeabi_dcmple>
 8006bee:	bb48      	cbnz	r0, 8006c44 <_printf_float+0xd0>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7f9 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8006bfc:	b110      	cbz	r0, 8006c04 <_printf_float+0x90>
 8006bfe:	232d      	movs	r3, #45	; 0x2d
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	4b93      	ldr	r3, [pc, #588]	; (8006e54 <_printf_float+0x2e0>)
 8006c06:	4894      	ldr	r0, [pc, #592]	; (8006e58 <_printf_float+0x2e4>)
 8006c08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c0c:	bf94      	ite	ls
 8006c0e:	4698      	movls	r8, r3
 8006c10:	4680      	movhi	r8, r0
 8006c12:	2303      	movs	r3, #3
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	f023 0204 	bic.w	r2, r3, #4
 8006c1c:	6022      	str	r2, [r4, #0]
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	9700      	str	r7, [sp, #0]
 8006c24:	4633      	mov	r3, r6
 8006c26:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f9d8 	bl	8006fe0 <_printf_common>
 8006c30:	3001      	adds	r0, #1
 8006c32:	f040 8090 	bne.w	8006d56 <_printf_float+0x1e2>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b00d      	add	sp, #52	; 0x34
 8006c3c:	ecbd 8b02 	vpop	{d8}
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff8e 	bl	8000b6c <__aeabi_dcmpun>
 8006c50:	b140      	cbz	r0, 8006c64 <_printf_float+0xf0>
 8006c52:	464b      	mov	r3, r9
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfbc      	itt	lt
 8006c58:	232d      	movlt	r3, #45	; 0x2d
 8006c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c5e:	487f      	ldr	r0, [pc, #508]	; (8006e5c <_printf_float+0x2e8>)
 8006c60:	4b7f      	ldr	r3, [pc, #508]	; (8006e60 <_printf_float+0x2ec>)
 8006c62:	e7d1      	b.n	8006c08 <_printf_float+0x94>
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	d13f      	bne.n	8006cf0 <_printf_float+0x17c>
 8006c70:	2306      	movs	r3, #6
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	9b05      	ldr	r3, [sp, #20]
 8006c76:	6861      	ldr	r1, [r4, #4]
 8006c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	ab0a      	add	r3, sp, #40	; 0x28
 8006c82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c86:	ab09      	add	r3, sp, #36	; 0x24
 8006c88:	ec49 8b10 	vmov	d0, r8, r9
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c94:	4628      	mov	r0, r5
 8006c96:	f7ff fecd 	bl	8006a34 <__cvt>
 8006c9a:	9b06      	ldr	r3, [sp, #24]
 8006c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9e:	2b47      	cmp	r3, #71	; 0x47
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	d108      	bne.n	8006cb6 <_printf_float+0x142>
 8006ca4:	1cc8      	adds	r0, r1, #3
 8006ca6:	db02      	blt.n	8006cae <_printf_float+0x13a>
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	dd41      	ble.n	8006d32 <_printf_float+0x1be>
 8006cae:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cb2:	fa5f fb8b 	uxtb.w	fp, fp
 8006cb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cba:	d820      	bhi.n	8006cfe <_printf_float+0x18a>
 8006cbc:	3901      	subs	r1, #1
 8006cbe:	465a      	mov	r2, fp
 8006cc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8006cc6:	f7ff ff17 	bl	8006af8 <__exponent>
 8006cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ccc:	1813      	adds	r3, r2, r0
 8006cce:	2a01      	cmp	r2, #1
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	dc02      	bgt.n	8006cdc <_printf_float+0x168>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	07d2      	lsls	r2, r2, #31
 8006cda:	d501      	bpl.n	8006ce0 <_printf_float+0x16c>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d09c      	beq.n	8006c22 <_printf_float+0xae>
 8006ce8:	232d      	movs	r3, #45	; 0x2d
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cee:	e798      	b.n	8006c22 <_printf_float+0xae>
 8006cf0:	9a06      	ldr	r2, [sp, #24]
 8006cf2:	2a47      	cmp	r2, #71	; 0x47
 8006cf4:	d1be      	bne.n	8006c74 <_printf_float+0x100>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1bc      	bne.n	8006c74 <_printf_float+0x100>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7b9      	b.n	8006c72 <_printf_float+0xfe>
 8006cfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d02:	d118      	bne.n	8006d36 <_printf_float+0x1c2>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	dd0b      	ble.n	8006d22 <_printf_float+0x1ae>
 8006d0a:	6121      	str	r1, [r4, #16]
 8006d0c:	b913      	cbnz	r3, 8006d14 <_printf_float+0x1a0>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	07d0      	lsls	r0, r2, #31
 8006d12:	d502      	bpl.n	8006d1a <_printf_float+0x1a6>
 8006d14:	3301      	adds	r3, #1
 8006d16:	440b      	add	r3, r1
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d1c:	f04f 0900 	mov.w	r9, #0
 8006d20:	e7de      	b.n	8006ce0 <_printf_float+0x16c>
 8006d22:	b913      	cbnz	r3, 8006d2a <_printf_float+0x1b6>
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	07d2      	lsls	r2, r2, #31
 8006d28:	d501      	bpl.n	8006d2e <_printf_float+0x1ba>
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	e7f4      	b.n	8006d18 <_printf_float+0x1a4>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7f2      	b.n	8006d18 <_printf_float+0x1a4>
 8006d32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	db05      	blt.n	8006d48 <_printf_float+0x1d4>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	6121      	str	r1, [r4, #16]
 8006d40:	07d8      	lsls	r0, r3, #31
 8006d42:	d5ea      	bpl.n	8006d1a <_printf_float+0x1a6>
 8006d44:	1c4b      	adds	r3, r1, #1
 8006d46:	e7e7      	b.n	8006d18 <_printf_float+0x1a4>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	bfd4      	ite	le
 8006d4c:	f1c1 0202 	rsble	r2, r1, #2
 8006d50:	2201      	movgt	r2, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	e7e0      	b.n	8006d18 <_printf_float+0x1a4>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	055a      	lsls	r2, r3, #21
 8006d5a:	d407      	bmi.n	8006d6c <_printf_float+0x1f8>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	d12c      	bne.n	8006dc4 <_printf_float+0x250>
 8006d6a:	e764      	b.n	8006c36 <_printf_float+0xc2>
 8006d6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d70:	f240 80e0 	bls.w	8006f34 <_printf_float+0x3c0>
 8006d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f7f9 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d034      	beq.n	8006dee <_printf_float+0x27a>
 8006d84:	4a37      	ldr	r2, [pc, #220]	; (8006e64 <_printf_float+0x2f0>)
 8006d86:	2301      	movs	r3, #1
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af51 	beq.w	8006c36 <_printf_float+0xc2>
 8006d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	db02      	blt.n	8006da2 <_printf_float+0x22e>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	07d8      	lsls	r0, r3, #31
 8006da0:	d510      	bpl.n	8006dc4 <_printf_float+0x250>
 8006da2:	ee18 3a10 	vmov	r3, s16
 8006da6:	4652      	mov	r2, sl
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af41 	beq.w	8006c36 <_printf_float+0xc2>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	f104 091a 	add.w	r9, r4, #26
 8006dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	dc09      	bgt.n	8006dd8 <_printf_float+0x264>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	f100 8105 	bmi.w	8006fd6 <_printf_float+0x462>
 8006dcc:	68e0      	ldr	r0, [r4, #12]
 8006dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bfb8      	it	lt
 8006dd4:	4618      	movlt	r0, r3
 8006dd6:	e730      	b.n	8006c3a <_printf_float+0xc6>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	464a      	mov	r2, r9
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af27 	beq.w	8006c36 <_printf_float+0xc2>
 8006de8:	f108 0801 	add.w	r8, r8, #1
 8006dec:	e7e6      	b.n	8006dbc <_printf_float+0x248>
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc39      	bgt.n	8006e68 <_printf_float+0x2f4>
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <_printf_float+0x2f0>)
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f43f af19 	beq.w	8006c36 <_printf_float+0xc2>
 8006e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d102      	bne.n	8006e12 <_printf_float+0x29e>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07d9      	lsls	r1, r3, #31
 8006e10:	d5d8      	bpl.n	8006dc4 <_printf_float+0x250>
 8006e12:	ee18 3a10 	vmov	r3, s16
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af09 	beq.w	8006c36 <_printf_float+0xc2>
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	f104 0a1a 	add.w	sl, r4, #26
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	425b      	negs	r3, r3
 8006e30:	454b      	cmp	r3, r9
 8006e32:	dc01      	bgt.n	8006e38 <_printf_float+0x2c4>
 8006e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e36:	e792      	b.n	8006d5e <_printf_float+0x1ea>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f aef7 	beq.w	8006c36 <_printf_float+0xc2>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7ee      	b.n	8006e2c <_printf_float+0x2b8>
 8006e4e:	bf00      	nop
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	0800ab3c 	.word	0x0800ab3c
 8006e58:	0800ab40 	.word	0x0800ab40
 8006e5c:	0800ab48 	.word	0x0800ab48
 8006e60:	0800ab44 	.word	0x0800ab44
 8006e64:	0800ab4c 	.word	0x0800ab4c
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bfa8      	it	ge
 8006e70:	461a      	movge	r2, r3
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	4691      	mov	r9, r2
 8006e76:	dc37      	bgt.n	8006ee8 <_printf_float+0x374>
 8006e78:	f04f 0b00 	mov.w	fp, #0
 8006e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e80:	f104 021a 	add.w	r2, r4, #26
 8006e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	eba3 0309 	sub.w	r3, r3, r9
 8006e8c:	455b      	cmp	r3, fp
 8006e8e:	dc33      	bgt.n	8006ef8 <_printf_float+0x384>
 8006e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e94:	429a      	cmp	r2, r3
 8006e96:	db3b      	blt.n	8006f10 <_printf_float+0x39c>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	07da      	lsls	r2, r3, #31
 8006e9c:	d438      	bmi.n	8006f10 <_printf_float+0x39c>
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	9a05      	ldr	r2, [sp, #20]
 8006ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ea4:	1a9a      	subs	r2, r3, r2
 8006ea6:	eba3 0901 	sub.w	r9, r3, r1
 8006eaa:	4591      	cmp	r9, r2
 8006eac:	bfa8      	it	ge
 8006eae:	4691      	movge	r9, r2
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	dc35      	bgt.n	8006f22 <_printf_float+0x3ae>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebe:	f104 0a1a 	add.w	sl, r4, #26
 8006ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	eba3 0309 	sub.w	r3, r3, r9
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	f77f af79 	ble.w	8006dc4 <_printf_float+0x250>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aeaa 	beq.w	8006c36 <_printf_float+0xc2>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7ec      	b.n	8006ec2 <_printf_float+0x34e>
 8006ee8:	4613      	mov	r3, r2
 8006eea:	4631      	mov	r1, r6
 8006eec:	4642      	mov	r2, r8
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d1c0      	bne.n	8006e78 <_printf_float+0x304>
 8006ef6:	e69e      	b.n	8006c36 <_printf_float+0xc2>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	9205      	str	r2, [sp, #20]
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f ae97 	beq.w	8006c36 <_printf_float+0xc2>
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e7b9      	b.n	8006e84 <_printf_float+0x310>
 8006f10:	ee18 3a10 	vmov	r3, s16
 8006f14:	4652      	mov	r2, sl
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d1be      	bne.n	8006e9e <_printf_float+0x32a>
 8006f20:	e689      	b.n	8006c36 <_printf_float+0xc2>
 8006f22:	9a05      	ldr	r2, [sp, #20]
 8006f24:	464b      	mov	r3, r9
 8006f26:	4442      	add	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1c1      	bne.n	8006eb6 <_printf_float+0x342>
 8006f32:	e680      	b.n	8006c36 <_printf_float+0xc2>
 8006f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	dc01      	bgt.n	8006f3e <_printf_float+0x3ca>
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d538      	bpl.n	8006fb0 <_printf_float+0x43c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4642      	mov	r2, r8
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f ae74 	beq.w	8006c36 <_printf_float+0xc2>
 8006f4e:	ee18 3a10 	vmov	r3, s16
 8006f52:	4652      	mov	r2, sl
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae6b 	beq.w	8006c36 <_printf_float+0xc2>
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f7f9 fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8006f6c:	b9d8      	cbnz	r0, 8006fa6 <_printf_float+0x432>
 8006f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f70:	f108 0201 	add.w	r2, r8, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d10e      	bne.n	8006f9e <_printf_float+0x42a>
 8006f80:	e659      	b.n	8006c36 <_printf_float+0xc2>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4652      	mov	r2, sl
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae52 	beq.w	8006c36 <_printf_float+0xc2>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4543      	cmp	r3, r8
 8006f9c:	dcf1      	bgt.n	8006f82 <_printf_float+0x40e>
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fa4:	e6dc      	b.n	8006d60 <_printf_float+0x1ec>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	f104 0a1a 	add.w	sl, r4, #26
 8006fae:	e7f2      	b.n	8006f96 <_printf_float+0x422>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	e7df      	b.n	8006f76 <_printf_float+0x402>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	464a      	mov	r2, r9
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae38 	beq.w	8006c36 <_printf_float+0xc2>
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fce:	1a5b      	subs	r3, r3, r1
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	dcf0      	bgt.n	8006fb6 <_printf_float+0x442>
 8006fd4:	e6fa      	b.n	8006dcc <_printf_float+0x258>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	f104 0919 	add.w	r9, r4, #25
 8006fde:	e7f4      	b.n	8006fca <_printf_float+0x456>

08006fe0 <_printf_common>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	4699      	mov	r9, r3
 8006fe8:	688a      	ldr	r2, [r1, #8]
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bfb8      	it	lt
 8006ff4:	4613      	movlt	r3, r2
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	b10a      	cbz	r2, 8007006 <_printf_common+0x26>
 8007002:	3301      	adds	r3, #1
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	0699      	lsls	r1, r3, #26
 800700a:	bf42      	ittt	mi
 800700c:	6833      	ldrmi	r3, [r6, #0]
 800700e:	3302      	addmi	r3, #2
 8007010:	6033      	strmi	r3, [r6, #0]
 8007012:	6825      	ldr	r5, [r4, #0]
 8007014:	f015 0506 	ands.w	r5, r5, #6
 8007018:	d106      	bne.n	8007028 <_printf_common+0x48>
 800701a:	f104 0a19 	add.w	sl, r4, #25
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	6832      	ldr	r2, [r6, #0]
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc26      	bgt.n	8007076 <_printf_common+0x96>
 8007028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800702c:	1e13      	subs	r3, r2, #0
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	bf18      	it	ne
 8007032:	2301      	movne	r3, #1
 8007034:	0692      	lsls	r2, r2, #26
 8007036:	d42b      	bmi.n	8007090 <_printf_common+0xb0>
 8007038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800703c:	4649      	mov	r1, r9
 800703e:	4638      	mov	r0, r7
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d01e      	beq.n	8007084 <_printf_common+0xa4>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	68e5      	ldr	r5, [r4, #12]
 800704a:	6832      	ldr	r2, [r6, #0]
 800704c:	f003 0306 	and.w	r3, r3, #6
 8007050:	2b04      	cmp	r3, #4
 8007052:	bf08      	it	eq
 8007054:	1aad      	subeq	r5, r5, r2
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	6922      	ldr	r2, [r4, #16]
 800705a:	bf0c      	ite	eq
 800705c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007060:	2500      	movne	r5, #0
 8007062:	4293      	cmp	r3, r2
 8007064:	bfc4      	itt	gt
 8007066:	1a9b      	subgt	r3, r3, r2
 8007068:	18ed      	addgt	r5, r5, r3
 800706a:	2600      	movs	r6, #0
 800706c:	341a      	adds	r4, #26
 800706e:	42b5      	cmp	r5, r6
 8007070:	d11a      	bne.n	80070a8 <_printf_common+0xc8>
 8007072:	2000      	movs	r0, #0
 8007074:	e008      	b.n	8007088 <_printf_common+0xa8>
 8007076:	2301      	movs	r3, #1
 8007078:	4652      	mov	r2, sl
 800707a:	4649      	mov	r1, r9
 800707c:	4638      	mov	r0, r7
 800707e:	47c0      	blx	r8
 8007080:	3001      	adds	r0, #1
 8007082:	d103      	bne.n	800708c <_printf_common+0xac>
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	3501      	adds	r5, #1
 800708e:	e7c6      	b.n	800701e <_printf_common+0x3e>
 8007090:	18e1      	adds	r1, r4, r3
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	2030      	movs	r0, #48	; 0x30
 8007096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800709a:	4422      	add	r2, r4
 800709c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070a4:	3302      	adds	r3, #2
 80070a6:	e7c7      	b.n	8007038 <_printf_common+0x58>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4622      	mov	r2, r4
 80070ac:	4649      	mov	r1, r9
 80070ae:	4638      	mov	r0, r7
 80070b0:	47c0      	blx	r8
 80070b2:	3001      	adds	r0, #1
 80070b4:	d0e6      	beq.n	8007084 <_printf_common+0xa4>
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7d9      	b.n	800706e <_printf_common+0x8e>
	...

080070bc <_printf_i>:
 80070bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	7e0f      	ldrb	r7, [r1, #24]
 80070c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070c4:	2f78      	cmp	r7, #120	; 0x78
 80070c6:	4691      	mov	r9, r2
 80070c8:	4680      	mov	r8, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	469a      	mov	sl, r3
 80070ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070d2:	d807      	bhi.n	80070e4 <_printf_i+0x28>
 80070d4:	2f62      	cmp	r7, #98	; 0x62
 80070d6:	d80a      	bhi.n	80070ee <_printf_i+0x32>
 80070d8:	2f00      	cmp	r7, #0
 80070da:	f000 80d8 	beq.w	800728e <_printf_i+0x1d2>
 80070de:	2f58      	cmp	r7, #88	; 0x58
 80070e0:	f000 80a3 	beq.w	800722a <_printf_i+0x16e>
 80070e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070ec:	e03a      	b.n	8007164 <_printf_i+0xa8>
 80070ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070f2:	2b15      	cmp	r3, #21
 80070f4:	d8f6      	bhi.n	80070e4 <_printf_i+0x28>
 80070f6:	a101      	add	r1, pc, #4	; (adr r1, 80070fc <_printf_i+0x40>)
 80070f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070fc:	08007155 	.word	0x08007155
 8007100:	08007169 	.word	0x08007169
 8007104:	080070e5 	.word	0x080070e5
 8007108:	080070e5 	.word	0x080070e5
 800710c:	080070e5 	.word	0x080070e5
 8007110:	080070e5 	.word	0x080070e5
 8007114:	08007169 	.word	0x08007169
 8007118:	080070e5 	.word	0x080070e5
 800711c:	080070e5 	.word	0x080070e5
 8007120:	080070e5 	.word	0x080070e5
 8007124:	080070e5 	.word	0x080070e5
 8007128:	08007275 	.word	0x08007275
 800712c:	08007199 	.word	0x08007199
 8007130:	08007257 	.word	0x08007257
 8007134:	080070e5 	.word	0x080070e5
 8007138:	080070e5 	.word	0x080070e5
 800713c:	08007297 	.word	0x08007297
 8007140:	080070e5 	.word	0x080070e5
 8007144:	08007199 	.word	0x08007199
 8007148:	080070e5 	.word	0x080070e5
 800714c:	080070e5 	.word	0x080070e5
 8007150:	0800725f 	.word	0x0800725f
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	1d1a      	adds	r2, r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	602a      	str	r2, [r5, #0]
 800715c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007164:	2301      	movs	r3, #1
 8007166:	e0a3      	b.n	80072b0 <_printf_i+0x1f4>
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	6829      	ldr	r1, [r5, #0]
 800716c:	0606      	lsls	r6, r0, #24
 800716e:	f101 0304 	add.w	r3, r1, #4
 8007172:	d50a      	bpl.n	800718a <_printf_i+0xce>
 8007174:	680e      	ldr	r6, [r1, #0]
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	2e00      	cmp	r6, #0
 800717a:	da03      	bge.n	8007184 <_printf_i+0xc8>
 800717c:	232d      	movs	r3, #45	; 0x2d
 800717e:	4276      	negs	r6, r6
 8007180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007184:	485e      	ldr	r0, [pc, #376]	; (8007300 <_printf_i+0x244>)
 8007186:	230a      	movs	r3, #10
 8007188:	e019      	b.n	80071be <_printf_i+0x102>
 800718a:	680e      	ldr	r6, [r1, #0]
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007192:	bf18      	it	ne
 8007194:	b236      	sxthne	r6, r6
 8007196:	e7ef      	b.n	8007178 <_printf_i+0xbc>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	1d19      	adds	r1, r3, #4
 800719e:	6029      	str	r1, [r5, #0]
 80071a0:	0601      	lsls	r1, r0, #24
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0xec>
 80071a4:	681e      	ldr	r6, [r3, #0]
 80071a6:	e002      	b.n	80071ae <_printf_i+0xf2>
 80071a8:	0646      	lsls	r6, r0, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0xe8>
 80071ac:	881e      	ldrh	r6, [r3, #0]
 80071ae:	4854      	ldr	r0, [pc, #336]	; (8007300 <_printf_i+0x244>)
 80071b0:	2f6f      	cmp	r7, #111	; 0x6f
 80071b2:	bf0c      	ite	eq
 80071b4:	2308      	moveq	r3, #8
 80071b6:	230a      	movne	r3, #10
 80071b8:	2100      	movs	r1, #0
 80071ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071be:	6865      	ldr	r5, [r4, #4]
 80071c0:	60a5      	str	r5, [r4, #8]
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	bfa2      	ittt	ge
 80071c6:	6821      	ldrge	r1, [r4, #0]
 80071c8:	f021 0104 	bicge.w	r1, r1, #4
 80071cc:	6021      	strge	r1, [r4, #0]
 80071ce:	b90e      	cbnz	r6, 80071d4 <_printf_i+0x118>
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	d04d      	beq.n	8007270 <_printf_i+0x1b4>
 80071d4:	4615      	mov	r5, r2
 80071d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071da:	fb03 6711 	mls	r7, r3, r1, r6
 80071de:	5dc7      	ldrb	r7, [r0, r7]
 80071e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071e4:	4637      	mov	r7, r6
 80071e6:	42bb      	cmp	r3, r7
 80071e8:	460e      	mov	r6, r1
 80071ea:	d9f4      	bls.n	80071d6 <_printf_i+0x11a>
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d10b      	bne.n	8007208 <_printf_i+0x14c>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07de      	lsls	r6, r3, #31
 80071f4:	d508      	bpl.n	8007208 <_printf_i+0x14c>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4299      	cmp	r1, r3
 80071fc:	bfde      	ittt	le
 80071fe:	2330      	movle	r3, #48	; 0x30
 8007200:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007204:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007208:	1b52      	subs	r2, r2, r5
 800720a:	6122      	str	r2, [r4, #16]
 800720c:	f8cd a000 	str.w	sl, [sp]
 8007210:	464b      	mov	r3, r9
 8007212:	aa03      	add	r2, sp, #12
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f7ff fee2 	bl	8006fe0 <_printf_common>
 800721c:	3001      	adds	r0, #1
 800721e:	d14c      	bne.n	80072ba <_printf_i+0x1fe>
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	b004      	add	sp, #16
 8007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722a:	4835      	ldr	r0, [pc, #212]	; (8007300 <_printf_i+0x244>)
 800722c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007230:	6829      	ldr	r1, [r5, #0]
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	f851 6b04 	ldr.w	r6, [r1], #4
 8007238:	6029      	str	r1, [r5, #0]
 800723a:	061d      	lsls	r5, r3, #24
 800723c:	d514      	bpl.n	8007268 <_printf_i+0x1ac>
 800723e:	07df      	lsls	r7, r3, #31
 8007240:	bf44      	itt	mi
 8007242:	f043 0320 	orrmi.w	r3, r3, #32
 8007246:	6023      	strmi	r3, [r4, #0]
 8007248:	b91e      	cbnz	r6, 8007252 <_printf_i+0x196>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f023 0320 	bic.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	2310      	movs	r3, #16
 8007254:	e7b0      	b.n	80071b8 <_printf_i+0xfc>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f043 0320 	orr.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	2378      	movs	r3, #120	; 0x78
 8007260:	4828      	ldr	r0, [pc, #160]	; (8007304 <_printf_i+0x248>)
 8007262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007266:	e7e3      	b.n	8007230 <_printf_i+0x174>
 8007268:	0659      	lsls	r1, r3, #25
 800726a:	bf48      	it	mi
 800726c:	b2b6      	uxthmi	r6, r6
 800726e:	e7e6      	b.n	800723e <_printf_i+0x182>
 8007270:	4615      	mov	r5, r2
 8007272:	e7bb      	b.n	80071ec <_printf_i+0x130>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	6826      	ldr	r6, [r4, #0]
 8007278:	6961      	ldr	r1, [r4, #20]
 800727a:	1d18      	adds	r0, r3, #4
 800727c:	6028      	str	r0, [r5, #0]
 800727e:	0635      	lsls	r5, r6, #24
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	d501      	bpl.n	8007288 <_printf_i+0x1cc>
 8007284:	6019      	str	r1, [r3, #0]
 8007286:	e002      	b.n	800728e <_printf_i+0x1d2>
 8007288:	0670      	lsls	r0, r6, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0x1c8>
 800728c:	8019      	strh	r1, [r3, #0]
 800728e:	2300      	movs	r3, #0
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	4615      	mov	r5, r2
 8007294:	e7ba      	b.n	800720c <_printf_i+0x150>
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	602a      	str	r2, [r5, #0]
 800729c:	681d      	ldr	r5, [r3, #0]
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7f8 ffbc 	bl	8000220 <memchr>
 80072a8:	b108      	cbz	r0, 80072ae <_printf_i+0x1f2>
 80072aa:	1b40      	subs	r0, r0, r5
 80072ac:	6060      	str	r0, [r4, #4]
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	2300      	movs	r3, #0
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b8:	e7a8      	b.n	800720c <_printf_i+0x150>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	462a      	mov	r2, r5
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	47d0      	blx	sl
 80072c4:	3001      	adds	r0, #1
 80072c6:	d0ab      	beq.n	8007220 <_printf_i+0x164>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	079b      	lsls	r3, r3, #30
 80072cc:	d413      	bmi.n	80072f6 <_printf_i+0x23a>
 80072ce:	68e0      	ldr	r0, [r4, #12]
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	4298      	cmp	r0, r3
 80072d4:	bfb8      	it	lt
 80072d6:	4618      	movlt	r0, r3
 80072d8:	e7a4      	b.n	8007224 <_printf_i+0x168>
 80072da:	2301      	movs	r3, #1
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d09b      	beq.n	8007220 <_printf_i+0x164>
 80072e8:	3501      	adds	r5, #1
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	9903      	ldr	r1, [sp, #12]
 80072ee:	1a5b      	subs	r3, r3, r1
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	dcf2      	bgt.n	80072da <_printf_i+0x21e>
 80072f4:	e7eb      	b.n	80072ce <_printf_i+0x212>
 80072f6:	2500      	movs	r5, #0
 80072f8:	f104 0619 	add.w	r6, r4, #25
 80072fc:	e7f5      	b.n	80072ea <_printf_i+0x22e>
 80072fe:	bf00      	nop
 8007300:	0800ab4e 	.word	0x0800ab4e
 8007304:	0800ab5f 	.word	0x0800ab5f

08007308 <iprintf>:
 8007308:	b40f      	push	{r0, r1, r2, r3}
 800730a:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <iprintf+0x2c>)
 800730c:	b513      	push	{r0, r1, r4, lr}
 800730e:	681c      	ldr	r4, [r3, #0]
 8007310:	b124      	cbz	r4, 800731c <iprintf+0x14>
 8007312:	69a3      	ldr	r3, [r4, #24]
 8007314:	b913      	cbnz	r3, 800731c <iprintf+0x14>
 8007316:	4620      	mov	r0, r4
 8007318:	f001 fd10 	bl	8008d3c <__sinit>
 800731c:	ab05      	add	r3, sp, #20
 800731e:	9a04      	ldr	r2, [sp, #16]
 8007320:	68a1      	ldr	r1, [r4, #8]
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	4620      	mov	r0, r4
 8007326:	f002 ff19 	bl	800a15c <_vfiprintf_r>
 800732a:	b002      	add	sp, #8
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007330:	b004      	add	sp, #16
 8007332:	4770      	bx	lr
 8007334:	20000010 	.word	0x20000010

08007338 <sulp>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	4604      	mov	r4, r0
 800733c:	460d      	mov	r5, r1
 800733e:	ec45 4b10 	vmov	d0, r4, r5
 8007342:	4616      	mov	r6, r2
 8007344:	f002 fc9a 	bl	8009c7c <__ulp>
 8007348:	ec51 0b10 	vmov	r0, r1, d0
 800734c:	b17e      	cbz	r6, 800736e <sulp+0x36>
 800734e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007356:	2b00      	cmp	r3, #0
 8007358:	dd09      	ble.n	800736e <sulp+0x36>
 800735a:	051b      	lsls	r3, r3, #20
 800735c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007360:	2400      	movs	r4, #0
 8007362:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007366:	4622      	mov	r2, r4
 8007368:	462b      	mov	r3, r5
 800736a:	f7f9 f965 	bl	8000638 <__aeabi_dmul>
 800736e:	bd70      	pop	{r4, r5, r6, pc}

08007370 <_strtod_l>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	ed2d 8b02 	vpush	{d8}
 8007378:	b09d      	sub	sp, #116	; 0x74
 800737a:	461f      	mov	r7, r3
 800737c:	2300      	movs	r3, #0
 800737e:	9318      	str	r3, [sp, #96]	; 0x60
 8007380:	4ba2      	ldr	r3, [pc, #648]	; (800760c <_strtod_l+0x29c>)
 8007382:	9213      	str	r2, [sp, #76]	; 0x4c
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	9305      	str	r3, [sp, #20]
 8007388:	4604      	mov	r4, r0
 800738a:	4618      	mov	r0, r3
 800738c:	4688      	mov	r8, r1
 800738e:	f7f8 ff3f 	bl	8000210 <strlen>
 8007392:	f04f 0a00 	mov.w	sl, #0
 8007396:	4605      	mov	r5, r0
 8007398:	f04f 0b00 	mov.w	fp, #0
 800739c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	2a2b      	cmp	r2, #43	; 0x2b
 80073a6:	d04e      	beq.n	8007446 <_strtod_l+0xd6>
 80073a8:	d83b      	bhi.n	8007422 <_strtod_l+0xb2>
 80073aa:	2a0d      	cmp	r2, #13
 80073ac:	d834      	bhi.n	8007418 <_strtod_l+0xa8>
 80073ae:	2a08      	cmp	r2, #8
 80073b0:	d834      	bhi.n	800741c <_strtod_l+0xac>
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	d03e      	beq.n	8007434 <_strtod_l+0xc4>
 80073b6:	2300      	movs	r3, #0
 80073b8:	930a      	str	r3, [sp, #40]	; 0x28
 80073ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80073bc:	7833      	ldrb	r3, [r6, #0]
 80073be:	2b30      	cmp	r3, #48	; 0x30
 80073c0:	f040 80b0 	bne.w	8007524 <_strtod_l+0x1b4>
 80073c4:	7873      	ldrb	r3, [r6, #1]
 80073c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073ca:	2b58      	cmp	r3, #88	; 0x58
 80073cc:	d168      	bne.n	80074a0 <_strtod_l+0x130>
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	ab18      	add	r3, sp, #96	; 0x60
 80073d4:	9702      	str	r7, [sp, #8]
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	4a8d      	ldr	r2, [pc, #564]	; (8007610 <_strtod_l+0x2a0>)
 80073da:	ab19      	add	r3, sp, #100	; 0x64
 80073dc:	a917      	add	r1, sp, #92	; 0x5c
 80073de:	4620      	mov	r0, r4
 80073e0:	f001 fdb0 	bl	8008f44 <__gethex>
 80073e4:	f010 0707 	ands.w	r7, r0, #7
 80073e8:	4605      	mov	r5, r0
 80073ea:	d005      	beq.n	80073f8 <_strtod_l+0x88>
 80073ec:	2f06      	cmp	r7, #6
 80073ee:	d12c      	bne.n	800744a <_strtod_l+0xda>
 80073f0:	3601      	adds	r6, #1
 80073f2:	2300      	movs	r3, #0
 80073f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80073f6:	930a      	str	r3, [sp, #40]	; 0x28
 80073f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 8590 	bne.w	8007f20 <_strtod_l+0xbb0>
 8007400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007402:	b1eb      	cbz	r3, 8007440 <_strtod_l+0xd0>
 8007404:	4652      	mov	r2, sl
 8007406:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800740a:	ec43 2b10 	vmov	d0, r2, r3
 800740e:	b01d      	add	sp, #116	; 0x74
 8007410:	ecbd 8b02 	vpop	{d8}
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007418:	2a20      	cmp	r2, #32
 800741a:	d1cc      	bne.n	80073b6 <_strtod_l+0x46>
 800741c:	3301      	adds	r3, #1
 800741e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007420:	e7be      	b.n	80073a0 <_strtod_l+0x30>
 8007422:	2a2d      	cmp	r2, #45	; 0x2d
 8007424:	d1c7      	bne.n	80073b6 <_strtod_l+0x46>
 8007426:	2201      	movs	r2, #1
 8007428:	920a      	str	r2, [sp, #40]	; 0x28
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	9217      	str	r2, [sp, #92]	; 0x5c
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1c2      	bne.n	80073ba <_strtod_l+0x4a>
 8007434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007436:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800743a:	2b00      	cmp	r3, #0
 800743c:	f040 856e 	bne.w	8007f1c <_strtod_l+0xbac>
 8007440:	4652      	mov	r2, sl
 8007442:	465b      	mov	r3, fp
 8007444:	e7e1      	b.n	800740a <_strtod_l+0x9a>
 8007446:	2200      	movs	r2, #0
 8007448:	e7ee      	b.n	8007428 <_strtod_l+0xb8>
 800744a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800744c:	b13a      	cbz	r2, 800745e <_strtod_l+0xee>
 800744e:	2135      	movs	r1, #53	; 0x35
 8007450:	a81a      	add	r0, sp, #104	; 0x68
 8007452:	f002 fd1e 	bl	8009e92 <__copybits>
 8007456:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007458:	4620      	mov	r0, r4
 800745a:	f002 f8dd 	bl	8009618 <_Bfree>
 800745e:	3f01      	subs	r7, #1
 8007460:	2f04      	cmp	r7, #4
 8007462:	d806      	bhi.n	8007472 <_strtod_l+0x102>
 8007464:	e8df f007 	tbb	[pc, r7]
 8007468:	1714030a 	.word	0x1714030a
 800746c:	0a          	.byte	0x0a
 800746d:	00          	.byte	0x00
 800746e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007472:	0728      	lsls	r0, r5, #28
 8007474:	d5c0      	bpl.n	80073f8 <_strtod_l+0x88>
 8007476:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800747a:	e7bd      	b.n	80073f8 <_strtod_l+0x88>
 800747c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007486:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800748a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800748e:	e7f0      	b.n	8007472 <_strtod_l+0x102>
 8007490:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007614 <_strtod_l+0x2a4>
 8007494:	e7ed      	b.n	8007472 <_strtod_l+0x102>
 8007496:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800749a:	f04f 3aff 	mov.w	sl, #4294967295
 800749e:	e7e8      	b.n	8007472 <_strtod_l+0x102>
 80074a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	2b30      	cmp	r3, #48	; 0x30
 80074aa:	d0f9      	beq.n	80074a0 <_strtod_l+0x130>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0a3      	beq.n	80073f8 <_strtod_l+0x88>
 80074b0:	2301      	movs	r3, #1
 80074b2:	f04f 0900 	mov.w	r9, #0
 80074b6:	9304      	str	r3, [sp, #16]
 80074b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074ba:	9308      	str	r3, [sp, #32]
 80074bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80074c0:	464f      	mov	r7, r9
 80074c2:	220a      	movs	r2, #10
 80074c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80074c6:	7806      	ldrb	r6, [r0, #0]
 80074c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80074cc:	b2d9      	uxtb	r1, r3
 80074ce:	2909      	cmp	r1, #9
 80074d0:	d92a      	bls.n	8007528 <_strtod_l+0x1b8>
 80074d2:	9905      	ldr	r1, [sp, #20]
 80074d4:	462a      	mov	r2, r5
 80074d6:	f002 ffce 	bl	800a476 <strncmp>
 80074da:	b398      	cbz	r0, 8007544 <_strtod_l+0x1d4>
 80074dc:	2000      	movs	r0, #0
 80074de:	4632      	mov	r2, r6
 80074e0:	463d      	mov	r5, r7
 80074e2:	9005      	str	r0, [sp, #20]
 80074e4:	4603      	mov	r3, r0
 80074e6:	2a65      	cmp	r2, #101	; 0x65
 80074e8:	d001      	beq.n	80074ee <_strtod_l+0x17e>
 80074ea:	2a45      	cmp	r2, #69	; 0x45
 80074ec:	d118      	bne.n	8007520 <_strtod_l+0x1b0>
 80074ee:	b91d      	cbnz	r5, 80074f8 <_strtod_l+0x188>
 80074f0:	9a04      	ldr	r2, [sp, #16]
 80074f2:	4302      	orrs	r2, r0
 80074f4:	d09e      	beq.n	8007434 <_strtod_l+0xc4>
 80074f6:	2500      	movs	r5, #0
 80074f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80074fc:	f108 0201 	add.w	r2, r8, #1
 8007500:	9217      	str	r2, [sp, #92]	; 0x5c
 8007502:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007506:	2a2b      	cmp	r2, #43	; 0x2b
 8007508:	d075      	beq.n	80075f6 <_strtod_l+0x286>
 800750a:	2a2d      	cmp	r2, #45	; 0x2d
 800750c:	d07b      	beq.n	8007606 <_strtod_l+0x296>
 800750e:	f04f 0c00 	mov.w	ip, #0
 8007512:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007516:	2909      	cmp	r1, #9
 8007518:	f240 8082 	bls.w	8007620 <_strtod_l+0x2b0>
 800751c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007520:	2600      	movs	r6, #0
 8007522:	e09d      	b.n	8007660 <_strtod_l+0x2f0>
 8007524:	2300      	movs	r3, #0
 8007526:	e7c4      	b.n	80074b2 <_strtod_l+0x142>
 8007528:	2f08      	cmp	r7, #8
 800752a:	bfd8      	it	le
 800752c:	9907      	ldrle	r1, [sp, #28]
 800752e:	f100 0001 	add.w	r0, r0, #1
 8007532:	bfda      	itte	le
 8007534:	fb02 3301 	mlale	r3, r2, r1, r3
 8007538:	9307      	strle	r3, [sp, #28]
 800753a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800753e:	3701      	adds	r7, #1
 8007540:	9017      	str	r0, [sp, #92]	; 0x5c
 8007542:	e7bf      	b.n	80074c4 <_strtod_l+0x154>
 8007544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007546:	195a      	adds	r2, r3, r5
 8007548:	9217      	str	r2, [sp, #92]	; 0x5c
 800754a:	5d5a      	ldrb	r2, [r3, r5]
 800754c:	2f00      	cmp	r7, #0
 800754e:	d037      	beq.n	80075c0 <_strtod_l+0x250>
 8007550:	9005      	str	r0, [sp, #20]
 8007552:	463d      	mov	r5, r7
 8007554:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007558:	2b09      	cmp	r3, #9
 800755a:	d912      	bls.n	8007582 <_strtod_l+0x212>
 800755c:	2301      	movs	r3, #1
 800755e:	e7c2      	b.n	80074e6 <_strtod_l+0x176>
 8007560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	9217      	str	r2, [sp, #92]	; 0x5c
 8007566:	785a      	ldrb	r2, [r3, #1]
 8007568:	3001      	adds	r0, #1
 800756a:	2a30      	cmp	r2, #48	; 0x30
 800756c:	d0f8      	beq.n	8007560 <_strtod_l+0x1f0>
 800756e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007572:	2b08      	cmp	r3, #8
 8007574:	f200 84d9 	bhi.w	8007f2a <_strtod_l+0xbba>
 8007578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800757a:	9005      	str	r0, [sp, #20]
 800757c:	2000      	movs	r0, #0
 800757e:	9308      	str	r3, [sp, #32]
 8007580:	4605      	mov	r5, r0
 8007582:	3a30      	subs	r2, #48	; 0x30
 8007584:	f100 0301 	add.w	r3, r0, #1
 8007588:	d014      	beq.n	80075b4 <_strtod_l+0x244>
 800758a:	9905      	ldr	r1, [sp, #20]
 800758c:	4419      	add	r1, r3
 800758e:	9105      	str	r1, [sp, #20]
 8007590:	462b      	mov	r3, r5
 8007592:	eb00 0e05 	add.w	lr, r0, r5
 8007596:	210a      	movs	r1, #10
 8007598:	4573      	cmp	r3, lr
 800759a:	d113      	bne.n	80075c4 <_strtod_l+0x254>
 800759c:	182b      	adds	r3, r5, r0
 800759e:	2b08      	cmp	r3, #8
 80075a0:	f105 0501 	add.w	r5, r5, #1
 80075a4:	4405      	add	r5, r0
 80075a6:	dc1c      	bgt.n	80075e2 <_strtod_l+0x272>
 80075a8:	9907      	ldr	r1, [sp, #28]
 80075aa:	230a      	movs	r3, #10
 80075ac:	fb03 2301 	mla	r3, r3, r1, r2
 80075b0:	9307      	str	r3, [sp, #28]
 80075b2:	2300      	movs	r3, #0
 80075b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075b6:	1c51      	adds	r1, r2, #1
 80075b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80075ba:	7852      	ldrb	r2, [r2, #1]
 80075bc:	4618      	mov	r0, r3
 80075be:	e7c9      	b.n	8007554 <_strtod_l+0x1e4>
 80075c0:	4638      	mov	r0, r7
 80075c2:	e7d2      	b.n	800756a <_strtod_l+0x1fa>
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	dc04      	bgt.n	80075d2 <_strtod_l+0x262>
 80075c8:	9e07      	ldr	r6, [sp, #28]
 80075ca:	434e      	muls	r6, r1
 80075cc:	9607      	str	r6, [sp, #28]
 80075ce:	3301      	adds	r3, #1
 80075d0:	e7e2      	b.n	8007598 <_strtod_l+0x228>
 80075d2:	f103 0c01 	add.w	ip, r3, #1
 80075d6:	f1bc 0f10 	cmp.w	ip, #16
 80075da:	bfd8      	it	le
 80075dc:	fb01 f909 	mulle.w	r9, r1, r9
 80075e0:	e7f5      	b.n	80075ce <_strtod_l+0x25e>
 80075e2:	2d10      	cmp	r5, #16
 80075e4:	bfdc      	itt	le
 80075e6:	230a      	movle	r3, #10
 80075e8:	fb03 2909 	mlale	r9, r3, r9, r2
 80075ec:	e7e1      	b.n	80075b2 <_strtod_l+0x242>
 80075ee:	2300      	movs	r3, #0
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	2301      	movs	r3, #1
 80075f4:	e77c      	b.n	80074f0 <_strtod_l+0x180>
 80075f6:	f04f 0c00 	mov.w	ip, #0
 80075fa:	f108 0202 	add.w	r2, r8, #2
 80075fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007600:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007604:	e785      	b.n	8007512 <_strtod_l+0x1a2>
 8007606:	f04f 0c01 	mov.w	ip, #1
 800760a:	e7f6      	b.n	80075fa <_strtod_l+0x28a>
 800760c:	0800ad18 	.word	0x0800ad18
 8007610:	0800ab70 	.word	0x0800ab70
 8007614:	7ff00000 	.word	0x7ff00000
 8007618:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800761a:	1c51      	adds	r1, r2, #1
 800761c:	9117      	str	r1, [sp, #92]	; 0x5c
 800761e:	7852      	ldrb	r2, [r2, #1]
 8007620:	2a30      	cmp	r2, #48	; 0x30
 8007622:	d0f9      	beq.n	8007618 <_strtod_l+0x2a8>
 8007624:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007628:	2908      	cmp	r1, #8
 800762a:	f63f af79 	bhi.w	8007520 <_strtod_l+0x1b0>
 800762e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007634:	9206      	str	r2, [sp, #24]
 8007636:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007638:	1c51      	adds	r1, r2, #1
 800763a:	9117      	str	r1, [sp, #92]	; 0x5c
 800763c:	7852      	ldrb	r2, [r2, #1]
 800763e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007642:	2e09      	cmp	r6, #9
 8007644:	d937      	bls.n	80076b6 <_strtod_l+0x346>
 8007646:	9e06      	ldr	r6, [sp, #24]
 8007648:	1b89      	subs	r1, r1, r6
 800764a:	2908      	cmp	r1, #8
 800764c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007650:	dc02      	bgt.n	8007658 <_strtod_l+0x2e8>
 8007652:	4576      	cmp	r6, lr
 8007654:	bfa8      	it	ge
 8007656:	4676      	movge	r6, lr
 8007658:	f1bc 0f00 	cmp.w	ip, #0
 800765c:	d000      	beq.n	8007660 <_strtod_l+0x2f0>
 800765e:	4276      	negs	r6, r6
 8007660:	2d00      	cmp	r5, #0
 8007662:	d14d      	bne.n	8007700 <_strtod_l+0x390>
 8007664:	9904      	ldr	r1, [sp, #16]
 8007666:	4301      	orrs	r1, r0
 8007668:	f47f aec6 	bne.w	80073f8 <_strtod_l+0x88>
 800766c:	2b00      	cmp	r3, #0
 800766e:	f47f aee1 	bne.w	8007434 <_strtod_l+0xc4>
 8007672:	2a69      	cmp	r2, #105	; 0x69
 8007674:	d027      	beq.n	80076c6 <_strtod_l+0x356>
 8007676:	dc24      	bgt.n	80076c2 <_strtod_l+0x352>
 8007678:	2a49      	cmp	r2, #73	; 0x49
 800767a:	d024      	beq.n	80076c6 <_strtod_l+0x356>
 800767c:	2a4e      	cmp	r2, #78	; 0x4e
 800767e:	f47f aed9 	bne.w	8007434 <_strtod_l+0xc4>
 8007682:	499f      	ldr	r1, [pc, #636]	; (8007900 <_strtod_l+0x590>)
 8007684:	a817      	add	r0, sp, #92	; 0x5c
 8007686:	f001 feb5 	bl	80093f4 <__match>
 800768a:	2800      	cmp	r0, #0
 800768c:	f43f aed2 	beq.w	8007434 <_strtod_l+0xc4>
 8007690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b28      	cmp	r3, #40	; 0x28
 8007696:	d12d      	bne.n	80076f4 <_strtod_l+0x384>
 8007698:	499a      	ldr	r1, [pc, #616]	; (8007904 <_strtod_l+0x594>)
 800769a:	aa1a      	add	r2, sp, #104	; 0x68
 800769c:	a817      	add	r0, sp, #92	; 0x5c
 800769e:	f001 febd 	bl	800941c <__hexnan>
 80076a2:	2805      	cmp	r0, #5
 80076a4:	d126      	bne.n	80076f4 <_strtod_l+0x384>
 80076a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80076ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80076b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80076b4:	e6a0      	b.n	80073f8 <_strtod_l+0x88>
 80076b6:	210a      	movs	r1, #10
 80076b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80076bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80076c0:	e7b9      	b.n	8007636 <_strtod_l+0x2c6>
 80076c2:	2a6e      	cmp	r2, #110	; 0x6e
 80076c4:	e7db      	b.n	800767e <_strtod_l+0x30e>
 80076c6:	4990      	ldr	r1, [pc, #576]	; (8007908 <_strtod_l+0x598>)
 80076c8:	a817      	add	r0, sp, #92	; 0x5c
 80076ca:	f001 fe93 	bl	80093f4 <__match>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f43f aeb0 	beq.w	8007434 <_strtod_l+0xc4>
 80076d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076d6:	498d      	ldr	r1, [pc, #564]	; (800790c <_strtod_l+0x59c>)
 80076d8:	3b01      	subs	r3, #1
 80076da:	a817      	add	r0, sp, #92	; 0x5c
 80076dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80076de:	f001 fe89 	bl	80093f4 <__match>
 80076e2:	b910      	cbnz	r0, 80076ea <_strtod_l+0x37a>
 80076e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076e6:	3301      	adds	r3, #1
 80076e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80076ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800791c <_strtod_l+0x5ac>
 80076ee:	f04f 0a00 	mov.w	sl, #0
 80076f2:	e681      	b.n	80073f8 <_strtod_l+0x88>
 80076f4:	4886      	ldr	r0, [pc, #536]	; (8007910 <_strtod_l+0x5a0>)
 80076f6:	f002 fe63 	bl	800a3c0 <nan>
 80076fa:	ec5b ab10 	vmov	sl, fp, d0
 80076fe:	e67b      	b.n	80073f8 <_strtod_l+0x88>
 8007700:	9b05      	ldr	r3, [sp, #20]
 8007702:	9807      	ldr	r0, [sp, #28]
 8007704:	1af3      	subs	r3, r6, r3
 8007706:	2f00      	cmp	r7, #0
 8007708:	bf08      	it	eq
 800770a:	462f      	moveq	r7, r5
 800770c:	2d10      	cmp	r5, #16
 800770e:	9306      	str	r3, [sp, #24]
 8007710:	46a8      	mov	r8, r5
 8007712:	bfa8      	it	ge
 8007714:	f04f 0810 	movge.w	r8, #16
 8007718:	f7f8 ff14 	bl	8000544 <__aeabi_ui2d>
 800771c:	2d09      	cmp	r5, #9
 800771e:	4682      	mov	sl, r0
 8007720:	468b      	mov	fp, r1
 8007722:	dd13      	ble.n	800774c <_strtod_l+0x3dc>
 8007724:	4b7b      	ldr	r3, [pc, #492]	; (8007914 <_strtod_l+0x5a4>)
 8007726:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800772a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800772e:	f7f8 ff83 	bl	8000638 <__aeabi_dmul>
 8007732:	4682      	mov	sl, r0
 8007734:	4648      	mov	r0, r9
 8007736:	468b      	mov	fp, r1
 8007738:	f7f8 ff04 	bl	8000544 <__aeabi_ui2d>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4650      	mov	r0, sl
 8007742:	4659      	mov	r1, fp
 8007744:	f7f8 fdc2 	bl	80002cc <__adddf3>
 8007748:	4682      	mov	sl, r0
 800774a:	468b      	mov	fp, r1
 800774c:	2d0f      	cmp	r5, #15
 800774e:	dc38      	bgt.n	80077c2 <_strtod_l+0x452>
 8007750:	9b06      	ldr	r3, [sp, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f43f ae50 	beq.w	80073f8 <_strtod_l+0x88>
 8007758:	dd24      	ble.n	80077a4 <_strtod_l+0x434>
 800775a:	2b16      	cmp	r3, #22
 800775c:	dc0b      	bgt.n	8007776 <_strtod_l+0x406>
 800775e:	496d      	ldr	r1, [pc, #436]	; (8007914 <_strtod_l+0x5a4>)
 8007760:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007768:	4652      	mov	r2, sl
 800776a:	465b      	mov	r3, fp
 800776c:	f7f8 ff64 	bl	8000638 <__aeabi_dmul>
 8007770:	4682      	mov	sl, r0
 8007772:	468b      	mov	fp, r1
 8007774:	e640      	b.n	80073f8 <_strtod_l+0x88>
 8007776:	9a06      	ldr	r2, [sp, #24]
 8007778:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800777c:	4293      	cmp	r3, r2
 800777e:	db20      	blt.n	80077c2 <_strtod_l+0x452>
 8007780:	4c64      	ldr	r4, [pc, #400]	; (8007914 <_strtod_l+0x5a4>)
 8007782:	f1c5 050f 	rsb	r5, r5, #15
 8007786:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800778a:	4652      	mov	r2, sl
 800778c:	465b      	mov	r3, fp
 800778e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007792:	f7f8 ff51 	bl	8000638 <__aeabi_dmul>
 8007796:	9b06      	ldr	r3, [sp, #24]
 8007798:	1b5d      	subs	r5, r3, r5
 800779a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800779e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077a2:	e7e3      	b.n	800776c <_strtod_l+0x3fc>
 80077a4:	9b06      	ldr	r3, [sp, #24]
 80077a6:	3316      	adds	r3, #22
 80077a8:	db0b      	blt.n	80077c2 <_strtod_l+0x452>
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	1b9e      	subs	r6, r3, r6
 80077ae:	4b59      	ldr	r3, [pc, #356]	; (8007914 <_strtod_l+0x5a4>)
 80077b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80077b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	f7f9 f866 	bl	800088c <__aeabi_ddiv>
 80077c0:	e7d6      	b.n	8007770 <_strtod_l+0x400>
 80077c2:	9b06      	ldr	r3, [sp, #24]
 80077c4:	eba5 0808 	sub.w	r8, r5, r8
 80077c8:	4498      	add	r8, r3
 80077ca:	f1b8 0f00 	cmp.w	r8, #0
 80077ce:	dd74      	ble.n	80078ba <_strtod_l+0x54a>
 80077d0:	f018 030f 	ands.w	r3, r8, #15
 80077d4:	d00a      	beq.n	80077ec <_strtod_l+0x47c>
 80077d6:	494f      	ldr	r1, [pc, #316]	; (8007914 <_strtod_l+0x5a4>)
 80077d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077dc:	4652      	mov	r2, sl
 80077de:	465b      	mov	r3, fp
 80077e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077e4:	f7f8 ff28 	bl	8000638 <__aeabi_dmul>
 80077e8:	4682      	mov	sl, r0
 80077ea:	468b      	mov	fp, r1
 80077ec:	f038 080f 	bics.w	r8, r8, #15
 80077f0:	d04f      	beq.n	8007892 <_strtod_l+0x522>
 80077f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80077f6:	dd22      	ble.n	800783e <_strtod_l+0x4ce>
 80077f8:	2500      	movs	r5, #0
 80077fa:	462e      	mov	r6, r5
 80077fc:	9507      	str	r5, [sp, #28]
 80077fe:	9505      	str	r5, [sp, #20]
 8007800:	2322      	movs	r3, #34	; 0x22
 8007802:	f8df b118 	ldr.w	fp, [pc, #280]	; 800791c <_strtod_l+0x5ac>
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	f04f 0a00 	mov.w	sl, #0
 800780c:	9b07      	ldr	r3, [sp, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f43f adf2 	beq.w	80073f8 <_strtod_l+0x88>
 8007814:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007816:	4620      	mov	r0, r4
 8007818:	f001 fefe 	bl	8009618 <_Bfree>
 800781c:	9905      	ldr	r1, [sp, #20]
 800781e:	4620      	mov	r0, r4
 8007820:	f001 fefa 	bl	8009618 <_Bfree>
 8007824:	4631      	mov	r1, r6
 8007826:	4620      	mov	r0, r4
 8007828:	f001 fef6 	bl	8009618 <_Bfree>
 800782c:	9907      	ldr	r1, [sp, #28]
 800782e:	4620      	mov	r0, r4
 8007830:	f001 fef2 	bl	8009618 <_Bfree>
 8007834:	4629      	mov	r1, r5
 8007836:	4620      	mov	r0, r4
 8007838:	f001 feee 	bl	8009618 <_Bfree>
 800783c:	e5dc      	b.n	80073f8 <_strtod_l+0x88>
 800783e:	4b36      	ldr	r3, [pc, #216]	; (8007918 <_strtod_l+0x5a8>)
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	2300      	movs	r3, #0
 8007844:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007848:	4650      	mov	r0, sl
 800784a:	4659      	mov	r1, fp
 800784c:	4699      	mov	r9, r3
 800784e:	f1b8 0f01 	cmp.w	r8, #1
 8007852:	dc21      	bgt.n	8007898 <_strtod_l+0x528>
 8007854:	b10b      	cbz	r3, 800785a <_strtod_l+0x4ea>
 8007856:	4682      	mov	sl, r0
 8007858:	468b      	mov	fp, r1
 800785a:	4b2f      	ldr	r3, [pc, #188]	; (8007918 <_strtod_l+0x5a8>)
 800785c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007860:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007864:	4652      	mov	r2, sl
 8007866:	465b      	mov	r3, fp
 8007868:	e9d9 0100 	ldrd	r0, r1, [r9]
 800786c:	f7f8 fee4 	bl	8000638 <__aeabi_dmul>
 8007870:	4b2a      	ldr	r3, [pc, #168]	; (800791c <_strtod_l+0x5ac>)
 8007872:	460a      	mov	r2, r1
 8007874:	400b      	ands	r3, r1
 8007876:	492a      	ldr	r1, [pc, #168]	; (8007920 <_strtod_l+0x5b0>)
 8007878:	428b      	cmp	r3, r1
 800787a:	4682      	mov	sl, r0
 800787c:	d8bc      	bhi.n	80077f8 <_strtod_l+0x488>
 800787e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007882:	428b      	cmp	r3, r1
 8007884:	bf86      	itte	hi
 8007886:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007924 <_strtod_l+0x5b4>
 800788a:	f04f 3aff 	movhi.w	sl, #4294967295
 800788e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007892:	2300      	movs	r3, #0
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	e084      	b.n	80079a2 <_strtod_l+0x632>
 8007898:	f018 0f01 	tst.w	r8, #1
 800789c:	d005      	beq.n	80078aa <_strtod_l+0x53a>
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fec8 	bl	8000638 <__aeabi_dmul>
 80078a8:	2301      	movs	r3, #1
 80078aa:	9a04      	ldr	r2, [sp, #16]
 80078ac:	3208      	adds	r2, #8
 80078ae:	f109 0901 	add.w	r9, r9, #1
 80078b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078b6:	9204      	str	r2, [sp, #16]
 80078b8:	e7c9      	b.n	800784e <_strtod_l+0x4de>
 80078ba:	d0ea      	beq.n	8007892 <_strtod_l+0x522>
 80078bc:	f1c8 0800 	rsb	r8, r8, #0
 80078c0:	f018 020f 	ands.w	r2, r8, #15
 80078c4:	d00a      	beq.n	80078dc <_strtod_l+0x56c>
 80078c6:	4b13      	ldr	r3, [pc, #76]	; (8007914 <_strtod_l+0x5a4>)
 80078c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078cc:	4650      	mov	r0, sl
 80078ce:	4659      	mov	r1, fp
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f8 ffda 	bl	800088c <__aeabi_ddiv>
 80078d8:	4682      	mov	sl, r0
 80078da:	468b      	mov	fp, r1
 80078dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80078e0:	d0d7      	beq.n	8007892 <_strtod_l+0x522>
 80078e2:	f1b8 0f1f 	cmp.w	r8, #31
 80078e6:	dd1f      	ble.n	8007928 <_strtod_l+0x5b8>
 80078e8:	2500      	movs	r5, #0
 80078ea:	462e      	mov	r6, r5
 80078ec:	9507      	str	r5, [sp, #28]
 80078ee:	9505      	str	r5, [sp, #20]
 80078f0:	2322      	movs	r3, #34	; 0x22
 80078f2:	f04f 0a00 	mov.w	sl, #0
 80078f6:	f04f 0b00 	mov.w	fp, #0
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	e786      	b.n	800780c <_strtod_l+0x49c>
 80078fe:	bf00      	nop
 8007900:	0800ab49 	.word	0x0800ab49
 8007904:	0800ab84 	.word	0x0800ab84
 8007908:	0800ab41 	.word	0x0800ab41
 800790c:	0800abc3 	.word	0x0800abc3
 8007910:	0800aed0 	.word	0x0800aed0
 8007914:	0800adb0 	.word	0x0800adb0
 8007918:	0800ad88 	.word	0x0800ad88
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	7ca00000 	.word	0x7ca00000
 8007924:	7fefffff 	.word	0x7fefffff
 8007928:	f018 0310 	ands.w	r3, r8, #16
 800792c:	bf18      	it	ne
 800792e:	236a      	movne	r3, #106	; 0x6a
 8007930:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ce0 <_strtod_l+0x970>
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	4650      	mov	r0, sl
 8007938:	4659      	mov	r1, fp
 800793a:	2300      	movs	r3, #0
 800793c:	f018 0f01 	tst.w	r8, #1
 8007940:	d004      	beq.n	800794c <_strtod_l+0x5dc>
 8007942:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007946:	f7f8 fe77 	bl	8000638 <__aeabi_dmul>
 800794a:	2301      	movs	r3, #1
 800794c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007950:	f109 0908 	add.w	r9, r9, #8
 8007954:	d1f2      	bne.n	800793c <_strtod_l+0x5cc>
 8007956:	b10b      	cbz	r3, 800795c <_strtod_l+0x5ec>
 8007958:	4682      	mov	sl, r0
 800795a:	468b      	mov	fp, r1
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	b1c3      	cbz	r3, 8007992 <_strtod_l+0x622>
 8007960:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007964:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007968:	2b00      	cmp	r3, #0
 800796a:	4659      	mov	r1, fp
 800796c:	dd11      	ble.n	8007992 <_strtod_l+0x622>
 800796e:	2b1f      	cmp	r3, #31
 8007970:	f340 8124 	ble.w	8007bbc <_strtod_l+0x84c>
 8007974:	2b34      	cmp	r3, #52	; 0x34
 8007976:	bfde      	ittt	le
 8007978:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800797c:	f04f 33ff 	movle.w	r3, #4294967295
 8007980:	fa03 f202 	lslle.w	r2, r3, r2
 8007984:	f04f 0a00 	mov.w	sl, #0
 8007988:	bfcc      	ite	gt
 800798a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800798e:	ea02 0b01 	andle.w	fp, r2, r1
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	4650      	mov	r0, sl
 8007998:	4659      	mov	r1, fp
 800799a:	f7f9 f8b5 	bl	8000b08 <__aeabi_dcmpeq>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d1a2      	bne.n	80078e8 <_strtod_l+0x578>
 80079a2:	9b07      	ldr	r3, [sp, #28]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	9908      	ldr	r1, [sp, #32]
 80079a8:	462b      	mov	r3, r5
 80079aa:	463a      	mov	r2, r7
 80079ac:	4620      	mov	r0, r4
 80079ae:	f001 fe9b 	bl	80096e8 <__s2b>
 80079b2:	9007      	str	r0, [sp, #28]
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f43f af1f 	beq.w	80077f8 <_strtod_l+0x488>
 80079ba:	9b05      	ldr	r3, [sp, #20]
 80079bc:	1b9e      	subs	r6, r3, r6
 80079be:	9b06      	ldr	r3, [sp, #24]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bfb4      	ite	lt
 80079c4:	4633      	movlt	r3, r6
 80079c6:	2300      	movge	r3, #0
 80079c8:	930c      	str	r3, [sp, #48]	; 0x30
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	2500      	movs	r5, #0
 80079ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80079d2:	9312      	str	r3, [sp, #72]	; 0x48
 80079d4:	462e      	mov	r6, r5
 80079d6:	9b07      	ldr	r3, [sp, #28]
 80079d8:	4620      	mov	r0, r4
 80079da:	6859      	ldr	r1, [r3, #4]
 80079dc:	f001 fddc 	bl	8009598 <_Balloc>
 80079e0:	9005      	str	r0, [sp, #20]
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f43f af0c 	beq.w	8007800 <_strtod_l+0x490>
 80079e8:	9b07      	ldr	r3, [sp, #28]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	3202      	adds	r2, #2
 80079ee:	f103 010c 	add.w	r1, r3, #12
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	300c      	adds	r0, #12
 80079f6:	f7ff f807 	bl	8006a08 <memcpy>
 80079fa:	ec4b ab10 	vmov	d0, sl, fp
 80079fe:	aa1a      	add	r2, sp, #104	; 0x68
 8007a00:	a919      	add	r1, sp, #100	; 0x64
 8007a02:	4620      	mov	r0, r4
 8007a04:	f002 f9b6 	bl	8009d74 <__d2b>
 8007a08:	ec4b ab18 	vmov	d8, sl, fp
 8007a0c:	9018      	str	r0, [sp, #96]	; 0x60
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f43f aef6 	beq.w	8007800 <_strtod_l+0x490>
 8007a14:	2101      	movs	r1, #1
 8007a16:	4620      	mov	r0, r4
 8007a18:	f001 ff00 	bl	800981c <__i2b>
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f aeee 	beq.w	8007800 <_strtod_l+0x490>
 8007a24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a26:	9904      	ldr	r1, [sp, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bfab      	itete	ge
 8007a2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007a2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007a30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007a32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007a36:	bfac      	ite	ge
 8007a38:	eb03 0902 	addge.w	r9, r3, r2
 8007a3c:	1ad7      	sublt	r7, r2, r3
 8007a3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a40:	eba3 0801 	sub.w	r8, r3, r1
 8007a44:	4490      	add	r8, r2
 8007a46:	4ba1      	ldr	r3, [pc, #644]	; (8007ccc <_strtod_l+0x95c>)
 8007a48:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a4c:	4598      	cmp	r8, r3
 8007a4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a52:	f280 80c7 	bge.w	8007be4 <_strtod_l+0x874>
 8007a56:	eba3 0308 	sub.w	r3, r3, r8
 8007a5a:	2b1f      	cmp	r3, #31
 8007a5c:	eba2 0203 	sub.w	r2, r2, r3
 8007a60:	f04f 0101 	mov.w	r1, #1
 8007a64:	f300 80b1 	bgt.w	8007bca <_strtod_l+0x85a>
 8007a68:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9308      	str	r3, [sp, #32]
 8007a72:	eb09 0802 	add.w	r8, r9, r2
 8007a76:	9b04      	ldr	r3, [sp, #16]
 8007a78:	45c1      	cmp	r9, r8
 8007a7a:	4417      	add	r7, r2
 8007a7c:	441f      	add	r7, r3
 8007a7e:	464b      	mov	r3, r9
 8007a80:	bfa8      	it	ge
 8007a82:	4643      	movge	r3, r8
 8007a84:	42bb      	cmp	r3, r7
 8007a86:	bfa8      	it	ge
 8007a88:	463b      	movge	r3, r7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bfc2      	ittt	gt
 8007a8e:	eba8 0803 	subgt.w	r8, r8, r3
 8007a92:	1aff      	subgt	r7, r7, r3
 8007a94:	eba9 0903 	subgt.w	r9, r9, r3
 8007a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd17      	ble.n	8007ace <_strtod_l+0x75e>
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f001 ff7a 	bl	800999c <__pow5mult>
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f43f aea8 	beq.w	8007800 <_strtod_l+0x490>
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f001 fec7 	bl	8009848 <__multiply>
 8007aba:	900b      	str	r0, [sp, #44]	; 0x2c
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f43f ae9f 	beq.w	8007800 <_strtod_l+0x490>
 8007ac2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f001 fda7 	bl	8009618 <_Bfree>
 8007aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007acc:	9318      	str	r3, [sp, #96]	; 0x60
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	f300 808c 	bgt.w	8007bee <_strtod_l+0x87e>
 8007ad6:	9b06      	ldr	r3, [sp, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dd08      	ble.n	8007aee <_strtod_l+0x77e>
 8007adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ade:	9905      	ldr	r1, [sp, #20]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f001 ff5b 	bl	800999c <__pow5mult>
 8007ae6:	9005      	str	r0, [sp, #20]
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f43f ae89 	beq.w	8007800 <_strtod_l+0x490>
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	dd08      	ble.n	8007b04 <_strtod_l+0x794>
 8007af2:	9905      	ldr	r1, [sp, #20]
 8007af4:	463a      	mov	r2, r7
 8007af6:	4620      	mov	r0, r4
 8007af8:	f001 ffaa 	bl	8009a50 <__lshift>
 8007afc:	9005      	str	r0, [sp, #20]
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f ae7e 	beq.w	8007800 <_strtod_l+0x490>
 8007b04:	f1b9 0f00 	cmp.w	r9, #0
 8007b08:	dd08      	ble.n	8007b1c <_strtod_l+0x7ac>
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	464a      	mov	r2, r9
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f001 ff9e 	bl	8009a50 <__lshift>
 8007b14:	4606      	mov	r6, r0
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f ae72 	beq.w	8007800 <_strtod_l+0x490>
 8007b1c:	9a05      	ldr	r2, [sp, #20]
 8007b1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b20:	4620      	mov	r0, r4
 8007b22:	f002 f821 	bl	8009b68 <__mdiff>
 8007b26:	4605      	mov	r5, r0
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f43f ae69 	beq.w	8007800 <_strtod_l+0x490>
 8007b2e:	68c3      	ldr	r3, [r0, #12]
 8007b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b32:	2300      	movs	r3, #0
 8007b34:	60c3      	str	r3, [r0, #12]
 8007b36:	4631      	mov	r1, r6
 8007b38:	f001 fffa 	bl	8009b30 <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	da60      	bge.n	8007c02 <_strtod_l+0x892>
 8007b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b42:	ea53 030a 	orrs.w	r3, r3, sl
 8007b46:	f040 8082 	bne.w	8007c4e <_strtod_l+0x8de>
 8007b4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d17d      	bne.n	8007c4e <_strtod_l+0x8de>
 8007b52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b56:	0d1b      	lsrs	r3, r3, #20
 8007b58:	051b      	lsls	r3, r3, #20
 8007b5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b5e:	d976      	bls.n	8007c4e <_strtod_l+0x8de>
 8007b60:	696b      	ldr	r3, [r5, #20]
 8007b62:	b913      	cbnz	r3, 8007b6a <_strtod_l+0x7fa>
 8007b64:	692b      	ldr	r3, [r5, #16]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	dd71      	ble.n	8007c4e <_strtod_l+0x8de>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f001 ff6e 	bl	8009a50 <__lshift>
 8007b74:	4631      	mov	r1, r6
 8007b76:	4605      	mov	r5, r0
 8007b78:	f001 ffda 	bl	8009b30 <__mcmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	dd66      	ble.n	8007c4e <_strtod_l+0x8de>
 8007b80:	9904      	ldr	r1, [sp, #16]
 8007b82:	4a53      	ldr	r2, [pc, #332]	; (8007cd0 <_strtod_l+0x960>)
 8007b84:	465b      	mov	r3, fp
 8007b86:	2900      	cmp	r1, #0
 8007b88:	f000 8081 	beq.w	8007c8e <_strtod_l+0x91e>
 8007b8c:	ea02 010b 	and.w	r1, r2, fp
 8007b90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b94:	dc7b      	bgt.n	8007c8e <_strtod_l+0x91e>
 8007b96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b9a:	f77f aea9 	ble.w	80078f0 <_strtod_l+0x580>
 8007b9e:	4b4d      	ldr	r3, [pc, #308]	; (8007cd4 <_strtod_l+0x964>)
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	4659      	mov	r1, fp
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f7f8 fd47 	bl	8000638 <__aeabi_dmul>
 8007baa:	460b      	mov	r3, r1
 8007bac:	4303      	orrs	r3, r0
 8007bae:	bf08      	it	eq
 8007bb0:	2322      	moveq	r3, #34	; 0x22
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	468b      	mov	fp, r1
 8007bb6:	bf08      	it	eq
 8007bb8:	6023      	streq	r3, [r4, #0]
 8007bba:	e62b      	b.n	8007814 <_strtod_l+0x4a4>
 8007bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	ea03 0a0a 	and.w	sl, r3, sl
 8007bc8:	e6e3      	b.n	8007992 <_strtod_l+0x622>
 8007bca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007bce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007bd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007bd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007bda:	fa01 f308 	lsl.w	r3, r1, r8
 8007bde:	9308      	str	r3, [sp, #32]
 8007be0:	910d      	str	r1, [sp, #52]	; 0x34
 8007be2:	e746      	b.n	8007a72 <_strtod_l+0x702>
 8007be4:	2300      	movs	r3, #0
 8007be6:	9308      	str	r3, [sp, #32]
 8007be8:	2301      	movs	r3, #1
 8007bea:	930d      	str	r3, [sp, #52]	; 0x34
 8007bec:	e741      	b.n	8007a72 <_strtod_l+0x702>
 8007bee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f001 ff2c 	bl	8009a50 <__lshift>
 8007bf8:	9018      	str	r0, [sp, #96]	; 0x60
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f47f af6b 	bne.w	8007ad6 <_strtod_l+0x766>
 8007c00:	e5fe      	b.n	8007800 <_strtod_l+0x490>
 8007c02:	465f      	mov	r7, fp
 8007c04:	d16e      	bne.n	8007ce4 <_strtod_l+0x974>
 8007c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c0c:	b342      	cbz	r2, 8007c60 <_strtod_l+0x8f0>
 8007c0e:	4a32      	ldr	r2, [pc, #200]	; (8007cd8 <_strtod_l+0x968>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d128      	bne.n	8007c66 <_strtod_l+0x8f6>
 8007c14:	9b04      	ldr	r3, [sp, #16]
 8007c16:	4651      	mov	r1, sl
 8007c18:	b1eb      	cbz	r3, 8007c56 <_strtod_l+0x8e6>
 8007c1a:	4b2d      	ldr	r3, [pc, #180]	; (8007cd0 <_strtod_l+0x960>)
 8007c1c:	403b      	ands	r3, r7
 8007c1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c22:	f04f 32ff 	mov.w	r2, #4294967295
 8007c26:	d819      	bhi.n	8007c5c <_strtod_l+0x8ec>
 8007c28:	0d1b      	lsrs	r3, r3, #20
 8007c2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	4299      	cmp	r1, r3
 8007c34:	d117      	bne.n	8007c66 <_strtod_l+0x8f6>
 8007c36:	4b29      	ldr	r3, [pc, #164]	; (8007cdc <_strtod_l+0x96c>)
 8007c38:	429f      	cmp	r7, r3
 8007c3a:	d102      	bne.n	8007c42 <_strtod_l+0x8d2>
 8007c3c:	3101      	adds	r1, #1
 8007c3e:	f43f addf 	beq.w	8007800 <_strtod_l+0x490>
 8007c42:	4b23      	ldr	r3, [pc, #140]	; (8007cd0 <_strtod_l+0x960>)
 8007c44:	403b      	ands	r3, r7
 8007c46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c4a:	f04f 0a00 	mov.w	sl, #0
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1a4      	bne.n	8007b9e <_strtod_l+0x82e>
 8007c54:	e5de      	b.n	8007814 <_strtod_l+0x4a4>
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	e7ea      	b.n	8007c32 <_strtod_l+0x8c2>
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	e7e8      	b.n	8007c32 <_strtod_l+0x8c2>
 8007c60:	ea53 030a 	orrs.w	r3, r3, sl
 8007c64:	d08c      	beq.n	8007b80 <_strtod_l+0x810>
 8007c66:	9b08      	ldr	r3, [sp, #32]
 8007c68:	b1db      	cbz	r3, 8007ca2 <_strtod_l+0x932>
 8007c6a:	423b      	tst	r3, r7
 8007c6c:	d0ef      	beq.n	8007c4e <_strtod_l+0x8de>
 8007c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c70:	9a04      	ldr	r2, [sp, #16]
 8007c72:	4650      	mov	r0, sl
 8007c74:	4659      	mov	r1, fp
 8007c76:	b1c3      	cbz	r3, 8007caa <_strtod_l+0x93a>
 8007c78:	f7ff fb5e 	bl	8007338 <sulp>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	ec51 0b18 	vmov	r0, r1, d8
 8007c84:	f7f8 fb22 	bl	80002cc <__adddf3>
 8007c88:	4682      	mov	sl, r0
 8007c8a:	468b      	mov	fp, r1
 8007c8c:	e7df      	b.n	8007c4e <_strtod_l+0x8de>
 8007c8e:	4013      	ands	r3, r2
 8007c90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c9c:	f04f 3aff 	mov.w	sl, #4294967295
 8007ca0:	e7d5      	b.n	8007c4e <_strtod_l+0x8de>
 8007ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ca4:	ea13 0f0a 	tst.w	r3, sl
 8007ca8:	e7e0      	b.n	8007c6c <_strtod_l+0x8fc>
 8007caa:	f7ff fb45 	bl	8007338 <sulp>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	ec51 0b18 	vmov	r0, r1, d8
 8007cb6:	f7f8 fb07 	bl	80002c8 <__aeabi_dsub>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4682      	mov	sl, r0
 8007cc0:	468b      	mov	fp, r1
 8007cc2:	f7f8 ff21 	bl	8000b08 <__aeabi_dcmpeq>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0c1      	beq.n	8007c4e <_strtod_l+0x8de>
 8007cca:	e611      	b.n	80078f0 <_strtod_l+0x580>
 8007ccc:	fffffc02 	.word	0xfffffc02
 8007cd0:	7ff00000 	.word	0x7ff00000
 8007cd4:	39500000 	.word	0x39500000
 8007cd8:	000fffff 	.word	0x000fffff
 8007cdc:	7fefffff 	.word	0x7fefffff
 8007ce0:	0800ab98 	.word	0x0800ab98
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f002 f8a0 	bl	8009e2c <__ratio>
 8007cec:	ec59 8b10 	vmov	r8, r9, d0
 8007cf0:	ee10 0a10 	vmov	r0, s0
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 ff18 	bl	8000b30 <__aeabi_dcmple>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d07a      	beq.n	8007dfa <_strtod_l+0xa8a>
 8007d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d04a      	beq.n	8007da0 <_strtod_l+0xa30>
 8007d0a:	4b95      	ldr	r3, [pc, #596]	; (8007f60 <_strtod_l+0xbf0>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f60 <_strtod_l+0xbf0>
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	4b92      	ldr	r3, [pc, #584]	; (8007f64 <_strtod_l+0xbf4>)
 8007d1c:	403b      	ands	r3, r7
 8007d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d22:	4b91      	ldr	r3, [pc, #580]	; (8007f68 <_strtod_l+0xbf8>)
 8007d24:	429a      	cmp	r2, r3
 8007d26:	f040 80b0 	bne.w	8007e8a <_strtod_l+0xb1a>
 8007d2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007d32:	ec4b ab10 	vmov	d0, sl, fp
 8007d36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d3a:	f001 ff9f 	bl	8009c7c <__ulp>
 8007d3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d42:	ec53 2b10 	vmov	r2, r3, d0
 8007d46:	f7f8 fc77 	bl	8000638 <__aeabi_dmul>
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	465b      	mov	r3, fp
 8007d4e:	f7f8 fabd 	bl	80002cc <__adddf3>
 8007d52:	460b      	mov	r3, r1
 8007d54:	4983      	ldr	r1, [pc, #524]	; (8007f64 <_strtod_l+0xbf4>)
 8007d56:	4a85      	ldr	r2, [pc, #532]	; (8007f6c <_strtod_l+0xbfc>)
 8007d58:	4019      	ands	r1, r3
 8007d5a:	4291      	cmp	r1, r2
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	d960      	bls.n	8007e22 <_strtod_l+0xab2>
 8007d60:	ee18 3a90 	vmov	r3, s17
 8007d64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d104      	bne.n	8007d76 <_strtod_l+0xa06>
 8007d6c:	ee18 3a10 	vmov	r3, s16
 8007d70:	3301      	adds	r3, #1
 8007d72:	f43f ad45 	beq.w	8007800 <_strtod_l+0x490>
 8007d76:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007f78 <_strtod_l+0xc08>
 8007d7a:	f04f 3aff 	mov.w	sl, #4294967295
 8007d7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d80:	4620      	mov	r0, r4
 8007d82:	f001 fc49 	bl	8009618 <_Bfree>
 8007d86:	9905      	ldr	r1, [sp, #20]
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f001 fc45 	bl	8009618 <_Bfree>
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4620      	mov	r0, r4
 8007d92:	f001 fc41 	bl	8009618 <_Bfree>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 fc3d 	bl	8009618 <_Bfree>
 8007d9e:	e61a      	b.n	80079d6 <_strtod_l+0x666>
 8007da0:	f1ba 0f00 	cmp.w	sl, #0
 8007da4:	d11b      	bne.n	8007dde <_strtod_l+0xa6e>
 8007da6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007daa:	b9f3      	cbnz	r3, 8007dea <_strtod_l+0xa7a>
 8007dac:	4b6c      	ldr	r3, [pc, #432]	; (8007f60 <_strtod_l+0xbf0>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	4640      	mov	r0, r8
 8007db2:	4649      	mov	r1, r9
 8007db4:	f7f8 feb2 	bl	8000b1c <__aeabi_dcmplt>
 8007db8:	b9d0      	cbnz	r0, 8007df0 <_strtod_l+0xa80>
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	4b6c      	ldr	r3, [pc, #432]	; (8007f70 <_strtod_l+0xc00>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f7f8 fc39 	bl	8000638 <__aeabi_dmul>
 8007dc6:	4680      	mov	r8, r0
 8007dc8:	4689      	mov	r9, r1
 8007dca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007dce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007dd2:	9315      	str	r3, [sp, #84]	; 0x54
 8007dd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007dd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ddc:	e79d      	b.n	8007d1a <_strtod_l+0x9aa>
 8007dde:	f1ba 0f01 	cmp.w	sl, #1
 8007de2:	d102      	bne.n	8007dea <_strtod_l+0xa7a>
 8007de4:	2f00      	cmp	r7, #0
 8007de6:	f43f ad83 	beq.w	80078f0 <_strtod_l+0x580>
 8007dea:	4b62      	ldr	r3, [pc, #392]	; (8007f74 <_strtod_l+0xc04>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	e78e      	b.n	8007d0e <_strtod_l+0x99e>
 8007df0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007f70 <_strtod_l+0xc00>
 8007df4:	f04f 0800 	mov.w	r8, #0
 8007df8:	e7e7      	b.n	8007dca <_strtod_l+0xa5a>
 8007dfa:	4b5d      	ldr	r3, [pc, #372]	; (8007f70 <_strtod_l+0xc00>)
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	2200      	movs	r2, #0
 8007e02:	f7f8 fc19 	bl	8000638 <__aeabi_dmul>
 8007e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e08:	4680      	mov	r8, r0
 8007e0a:	4689      	mov	r9, r1
 8007e0c:	b933      	cbnz	r3, 8007e1c <_strtod_l+0xaac>
 8007e0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e12:	900e      	str	r0, [sp, #56]	; 0x38
 8007e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e1a:	e7dd      	b.n	8007dd8 <_strtod_l+0xa68>
 8007e1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007e20:	e7f9      	b.n	8007e16 <_strtod_l+0xaa6>
 8007e22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007e26:	9b04      	ldr	r3, [sp, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1a8      	bne.n	8007d7e <_strtod_l+0xa0e>
 8007e2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e32:	0d1b      	lsrs	r3, r3, #20
 8007e34:	051b      	lsls	r3, r3, #20
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d1a1      	bne.n	8007d7e <_strtod_l+0xa0e>
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 ff0b 	bl	8000c58 <__aeabi_d2lz>
 8007e42:	f7f8 fbcb 	bl	80005dc <__aeabi_l2d>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fa3b 	bl	80002c8 <__aeabi_dsub>
 8007e52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e58:	ea43 030a 	orr.w	r3, r3, sl
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	4680      	mov	r8, r0
 8007e60:	4689      	mov	r9, r1
 8007e62:	d055      	beq.n	8007f10 <_strtod_l+0xba0>
 8007e64:	a336      	add	r3, pc, #216	; (adr r3, 8007f40 <_strtod_l+0xbd0>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 fe57 	bl	8000b1c <__aeabi_dcmplt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f47f acd0 	bne.w	8007814 <_strtod_l+0x4a4>
 8007e74:	a334      	add	r3, pc, #208	; (adr r3, 8007f48 <_strtod_l+0xbd8>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	f7f8 fe6b 	bl	8000b58 <__aeabi_dcmpgt>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	f43f af7b 	beq.w	8007d7e <_strtod_l+0xa0e>
 8007e88:	e4c4      	b.n	8007814 <_strtod_l+0x4a4>
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	b333      	cbz	r3, 8007edc <_strtod_l+0xb6c>
 8007e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e94:	d822      	bhi.n	8007edc <_strtod_l+0xb6c>
 8007e96:	a32e      	add	r3, pc, #184	; (adr r3, 8007f50 <_strtod_l+0xbe0>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f7f8 fe46 	bl	8000b30 <__aeabi_dcmple>
 8007ea4:	b1a0      	cbz	r0, 8007ed0 <_strtod_l+0xb60>
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	f7f8 fe9d 	bl	8000be8 <__aeabi_d2uiz>
 8007eae:	2801      	cmp	r0, #1
 8007eb0:	bf38      	it	cc
 8007eb2:	2001      	movcc	r0, #1
 8007eb4:	f7f8 fb46 	bl	8000544 <__aeabi_ui2d>
 8007eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eba:	4680      	mov	r8, r0
 8007ebc:	4689      	mov	r9, r1
 8007ebe:	bb23      	cbnz	r3, 8007f0a <_strtod_l+0xb9a>
 8007ec0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ec4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ec6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ec8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ecc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ed4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	9309      	str	r3, [sp, #36]	; 0x24
 8007edc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ee4:	eef0 0a68 	vmov.f32	s1, s17
 8007ee8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eec:	f001 fec6 	bl	8009c7c <__ulp>
 8007ef0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ef4:	ec53 2b10 	vmov	r2, r3, d0
 8007ef8:	f7f8 fb9e 	bl	8000638 <__aeabi_dmul>
 8007efc:	ec53 2b18 	vmov	r2, r3, d8
 8007f00:	f7f8 f9e4 	bl	80002cc <__adddf3>
 8007f04:	4682      	mov	sl, r0
 8007f06:	468b      	mov	fp, r1
 8007f08:	e78d      	b.n	8007e26 <_strtod_l+0xab6>
 8007f0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007f0e:	e7db      	b.n	8007ec8 <_strtod_l+0xb58>
 8007f10:	a311      	add	r3, pc, #68	; (adr r3, 8007f58 <_strtod_l+0xbe8>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f7f8 fe01 	bl	8000b1c <__aeabi_dcmplt>
 8007f1a:	e7b2      	b.n	8007e82 <_strtod_l+0xb12>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	f7ff ba6b 	b.w	8007400 <_strtod_l+0x90>
 8007f2a:	2a65      	cmp	r2, #101	; 0x65
 8007f2c:	f43f ab5f 	beq.w	80075ee <_strtod_l+0x27e>
 8007f30:	2a45      	cmp	r2, #69	; 0x45
 8007f32:	f43f ab5c 	beq.w	80075ee <_strtod_l+0x27e>
 8007f36:	2301      	movs	r3, #1
 8007f38:	f7ff bb94 	b.w	8007664 <_strtod_l+0x2f4>
 8007f3c:	f3af 8000 	nop.w
 8007f40:	94a03595 	.word	0x94a03595
 8007f44:	3fdfffff 	.word	0x3fdfffff
 8007f48:	35afe535 	.word	0x35afe535
 8007f4c:	3fe00000 	.word	0x3fe00000
 8007f50:	ffc00000 	.word	0xffc00000
 8007f54:	41dfffff 	.word	0x41dfffff
 8007f58:	94a03595 	.word	0x94a03595
 8007f5c:	3fcfffff 	.word	0x3fcfffff
 8007f60:	3ff00000 	.word	0x3ff00000
 8007f64:	7ff00000 	.word	0x7ff00000
 8007f68:	7fe00000 	.word	0x7fe00000
 8007f6c:	7c9fffff 	.word	0x7c9fffff
 8007f70:	3fe00000 	.word	0x3fe00000
 8007f74:	bff00000 	.word	0xbff00000
 8007f78:	7fefffff 	.word	0x7fefffff

08007f7c <strtod>:
 8007f7c:	460a      	mov	r2, r1
 8007f7e:	4601      	mov	r1, r0
 8007f80:	4802      	ldr	r0, [pc, #8]	; (8007f8c <strtod+0x10>)
 8007f82:	4b03      	ldr	r3, [pc, #12]	; (8007f90 <strtod+0x14>)
 8007f84:	6800      	ldr	r0, [r0, #0]
 8007f86:	f7ff b9f3 	b.w	8007370 <_strtod_l>
 8007f8a:	bf00      	nop
 8007f8c:	20000010 	.word	0x20000010
 8007f90:	20000078 	.word	0x20000078

08007f94 <quorem>:
 8007f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	6903      	ldr	r3, [r0, #16]
 8007f9a:	690c      	ldr	r4, [r1, #16]
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	f2c0 8081 	blt.w	80080a6 <quorem+0x112>
 8007fa4:	3c01      	subs	r4, #1
 8007fa6:	f101 0814 	add.w	r8, r1, #20
 8007faa:	f100 0514 	add.w	r5, r0, #20
 8007fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fcc:	d331      	bcc.n	8008032 <quorem+0x9e>
 8007fce:	f04f 0e00 	mov.w	lr, #0
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	46ac      	mov	ip, r5
 8007fd6:	46f2      	mov	sl, lr
 8007fd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fdc:	b293      	uxth	r3, r2
 8007fde:	fb06 e303 	mla	r3, r6, r3, lr
 8007fe2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ebaa 0303 	sub.w	r3, sl, r3
 8007fec:	f8dc a000 	ldr.w	sl, [ip]
 8007ff0:	0c12      	lsrs	r2, r2, #16
 8007ff2:	fa13 f38a 	uxtah	r3, r3, sl
 8007ff6:	fb06 e202 	mla	r2, r6, r2, lr
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008002:	b292      	uxth	r2, r2
 8008004:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800800c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008010:	4581      	cmp	r9, r0
 8008012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008016:	f84c 3b04 	str.w	r3, [ip], #4
 800801a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800801e:	d2db      	bcs.n	8007fd8 <quorem+0x44>
 8008020:	f855 300b 	ldr.w	r3, [r5, fp]
 8008024:	b92b      	cbnz	r3, 8008032 <quorem+0x9e>
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	3b04      	subs	r3, #4
 800802a:	429d      	cmp	r5, r3
 800802c:	461a      	mov	r2, r3
 800802e:	d32e      	bcc.n	800808e <quorem+0xfa>
 8008030:	613c      	str	r4, [r7, #16]
 8008032:	4638      	mov	r0, r7
 8008034:	f001 fd7c 	bl	8009b30 <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	db24      	blt.n	8008086 <quorem+0xf2>
 800803c:	3601      	adds	r6, #1
 800803e:	4628      	mov	r0, r5
 8008040:	f04f 0c00 	mov.w	ip, #0
 8008044:	f858 2b04 	ldr.w	r2, [r8], #4
 8008048:	f8d0 e000 	ldr.w	lr, [r0]
 800804c:	b293      	uxth	r3, r2
 800804e:	ebac 0303 	sub.w	r3, ip, r3
 8008052:	0c12      	lsrs	r2, r2, #16
 8008054:	fa13 f38e 	uxtah	r3, r3, lr
 8008058:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800805c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008060:	b29b      	uxth	r3, r3
 8008062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008066:	45c1      	cmp	r9, r8
 8008068:	f840 3b04 	str.w	r3, [r0], #4
 800806c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008070:	d2e8      	bcs.n	8008044 <quorem+0xb0>
 8008072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800807a:	b922      	cbnz	r2, 8008086 <quorem+0xf2>
 800807c:	3b04      	subs	r3, #4
 800807e:	429d      	cmp	r5, r3
 8008080:	461a      	mov	r2, r3
 8008082:	d30a      	bcc.n	800809a <quorem+0x106>
 8008084:	613c      	str	r4, [r7, #16]
 8008086:	4630      	mov	r0, r6
 8008088:	b003      	add	sp, #12
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	3b04      	subs	r3, #4
 8008092:	2a00      	cmp	r2, #0
 8008094:	d1cc      	bne.n	8008030 <quorem+0x9c>
 8008096:	3c01      	subs	r4, #1
 8008098:	e7c7      	b.n	800802a <quorem+0x96>
 800809a:	6812      	ldr	r2, [r2, #0]
 800809c:	3b04      	subs	r3, #4
 800809e:	2a00      	cmp	r2, #0
 80080a0:	d1f0      	bne.n	8008084 <quorem+0xf0>
 80080a2:	3c01      	subs	r4, #1
 80080a4:	e7eb      	b.n	800807e <quorem+0xea>
 80080a6:	2000      	movs	r0, #0
 80080a8:	e7ee      	b.n	8008088 <quorem+0xf4>
 80080aa:	0000      	movs	r0, r0
 80080ac:	0000      	movs	r0, r0
	...

080080b0 <_dtoa_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ed2d 8b04 	vpush	{d8-d9}
 80080b8:	ec57 6b10 	vmov	r6, r7, d0
 80080bc:	b093      	sub	sp, #76	; 0x4c
 80080be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080c4:	9106      	str	r1, [sp, #24]
 80080c6:	ee10 aa10 	vmov	sl, s0
 80080ca:	4604      	mov	r4, r0
 80080cc:	9209      	str	r2, [sp, #36]	; 0x24
 80080ce:	930c      	str	r3, [sp, #48]	; 0x30
 80080d0:	46bb      	mov	fp, r7
 80080d2:	b975      	cbnz	r5, 80080f2 <_dtoa_r+0x42>
 80080d4:	2010      	movs	r0, #16
 80080d6:	f001 fa45 	bl	8009564 <malloc>
 80080da:	4602      	mov	r2, r0
 80080dc:	6260      	str	r0, [r4, #36]	; 0x24
 80080de:	b920      	cbnz	r0, 80080ea <_dtoa_r+0x3a>
 80080e0:	4ba7      	ldr	r3, [pc, #668]	; (8008380 <_dtoa_r+0x2d0>)
 80080e2:	21ea      	movs	r1, #234	; 0xea
 80080e4:	48a7      	ldr	r0, [pc, #668]	; (8008384 <_dtoa_r+0x2d4>)
 80080e6:	f002 fabb 	bl	800a660 <__assert_func>
 80080ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080ee:	6005      	str	r5, [r0, #0]
 80080f0:	60c5      	str	r5, [r0, #12]
 80080f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	b151      	cbz	r1, 800810e <_dtoa_r+0x5e>
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	604a      	str	r2, [r1, #4]
 80080fc:	2301      	movs	r3, #1
 80080fe:	4093      	lsls	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
 8008102:	4620      	mov	r0, r4
 8008104:	f001 fa88 	bl	8009618 <_Bfree>
 8008108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	1e3b      	subs	r3, r7, #0
 8008110:	bfaa      	itet	ge
 8008112:	2300      	movge	r3, #0
 8008114:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008118:	f8c8 3000 	strge.w	r3, [r8]
 800811c:	4b9a      	ldr	r3, [pc, #616]	; (8008388 <_dtoa_r+0x2d8>)
 800811e:	bfbc      	itt	lt
 8008120:	2201      	movlt	r2, #1
 8008122:	f8c8 2000 	strlt.w	r2, [r8]
 8008126:	ea33 030b 	bics.w	r3, r3, fp
 800812a:	d11b      	bne.n	8008164 <_dtoa_r+0xb4>
 800812c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800812e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008138:	4333      	orrs	r3, r6
 800813a:	f000 8592 	beq.w	8008c62 <_dtoa_r+0xbb2>
 800813e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008140:	b963      	cbnz	r3, 800815c <_dtoa_r+0xac>
 8008142:	4b92      	ldr	r3, [pc, #584]	; (800838c <_dtoa_r+0x2dc>)
 8008144:	e022      	b.n	800818c <_dtoa_r+0xdc>
 8008146:	4b92      	ldr	r3, [pc, #584]	; (8008390 <_dtoa_r+0x2e0>)
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	3308      	adds	r3, #8
 800814c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	9801      	ldr	r0, [sp, #4]
 8008152:	b013      	add	sp, #76	; 0x4c
 8008154:	ecbd 8b04 	vpop	{d8-d9}
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	4b8b      	ldr	r3, [pc, #556]	; (800838c <_dtoa_r+0x2dc>)
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	3303      	adds	r3, #3
 8008162:	e7f3      	b.n	800814c <_dtoa_r+0x9c>
 8008164:	2200      	movs	r2, #0
 8008166:	2300      	movs	r3, #0
 8008168:	4650      	mov	r0, sl
 800816a:	4659      	mov	r1, fp
 800816c:	f7f8 fccc 	bl	8000b08 <__aeabi_dcmpeq>
 8008170:	ec4b ab19 	vmov	d9, sl, fp
 8008174:	4680      	mov	r8, r0
 8008176:	b158      	cbz	r0, 8008190 <_dtoa_r+0xe0>
 8008178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800817a:	2301      	movs	r3, #1
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 856b 	beq.w	8008c5c <_dtoa_r+0xbac>
 8008186:	4883      	ldr	r0, [pc, #524]	; (8008394 <_dtoa_r+0x2e4>)
 8008188:	6018      	str	r0, [r3, #0]
 800818a:	1e43      	subs	r3, r0, #1
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	e7df      	b.n	8008150 <_dtoa_r+0xa0>
 8008190:	ec4b ab10 	vmov	d0, sl, fp
 8008194:	aa10      	add	r2, sp, #64	; 0x40
 8008196:	a911      	add	r1, sp, #68	; 0x44
 8008198:	4620      	mov	r0, r4
 800819a:	f001 fdeb 	bl	8009d74 <__d2b>
 800819e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081a2:	ee08 0a10 	vmov	s16, r0
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f000 8084 	beq.w	80082b4 <_dtoa_r+0x204>
 80081ac:	ee19 3a90 	vmov	r3, s19
 80081b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80081b8:	4656      	mov	r6, sl
 80081ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80081be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80081c6:	4b74      	ldr	r3, [pc, #464]	; (8008398 <_dtoa_r+0x2e8>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f8 f87b 	bl	80002c8 <__aeabi_dsub>
 80081d2:	a365      	add	r3, pc, #404	; (adr r3, 8008368 <_dtoa_r+0x2b8>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 fa2e 	bl	8000638 <__aeabi_dmul>
 80081dc:	a364      	add	r3, pc, #400	; (adr r3, 8008370 <_dtoa_r+0x2c0>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 f873 	bl	80002cc <__adddf3>
 80081e6:	4606      	mov	r6, r0
 80081e8:	4628      	mov	r0, r5
 80081ea:	460f      	mov	r7, r1
 80081ec:	f7f8 f9ba 	bl	8000564 <__aeabi_i2d>
 80081f0:	a361      	add	r3, pc, #388	; (adr r3, 8008378 <_dtoa_r+0x2c8>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 fa1f 	bl	8000638 <__aeabi_dmul>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4630      	mov	r0, r6
 8008200:	4639      	mov	r1, r7
 8008202:	f7f8 f863 	bl	80002cc <__adddf3>
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	f7f8 fcc5 	bl	8000b98 <__aeabi_d2iz>
 800820e:	2200      	movs	r2, #0
 8008210:	9000      	str	r0, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	f7f8 fc80 	bl	8000b1c <__aeabi_dcmplt>
 800821c:	b150      	cbz	r0, 8008234 <_dtoa_r+0x184>
 800821e:	9800      	ldr	r0, [sp, #0]
 8008220:	f7f8 f9a0 	bl	8000564 <__aeabi_i2d>
 8008224:	4632      	mov	r2, r6
 8008226:	463b      	mov	r3, r7
 8008228:	f7f8 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 800822c:	b910      	cbnz	r0, 8008234 <_dtoa_r+0x184>
 800822e:	9b00      	ldr	r3, [sp, #0]
 8008230:	3b01      	subs	r3, #1
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	2b16      	cmp	r3, #22
 8008238:	d85a      	bhi.n	80082f0 <_dtoa_r+0x240>
 800823a:	9a00      	ldr	r2, [sp, #0]
 800823c:	4b57      	ldr	r3, [pc, #348]	; (800839c <_dtoa_r+0x2ec>)
 800823e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	ec51 0b19 	vmov	r0, r1, d9
 800824a:	f7f8 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d050      	beq.n	80082f4 <_dtoa_r+0x244>
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	3b01      	subs	r3, #1
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2300      	movs	r3, #0
 800825a:	930b      	str	r3, [sp, #44]	; 0x2c
 800825c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800825e:	1b5d      	subs	r5, r3, r5
 8008260:	1e6b      	subs	r3, r5, #1
 8008262:	9305      	str	r3, [sp, #20]
 8008264:	bf45      	ittet	mi
 8008266:	f1c5 0301 	rsbmi	r3, r5, #1
 800826a:	9304      	strmi	r3, [sp, #16]
 800826c:	2300      	movpl	r3, #0
 800826e:	2300      	movmi	r3, #0
 8008270:	bf4c      	ite	mi
 8008272:	9305      	strmi	r3, [sp, #20]
 8008274:	9304      	strpl	r3, [sp, #16]
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	db3d      	blt.n	80082f8 <_dtoa_r+0x248>
 800827c:	9b05      	ldr	r3, [sp, #20]
 800827e:	9a00      	ldr	r2, [sp, #0]
 8008280:	920a      	str	r2, [sp, #40]	; 0x28
 8008282:	4413      	add	r3, r2
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	2300      	movs	r3, #0
 8008288:	9307      	str	r3, [sp, #28]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	2b09      	cmp	r3, #9
 800828e:	f200 8089 	bhi.w	80083a4 <_dtoa_r+0x2f4>
 8008292:	2b05      	cmp	r3, #5
 8008294:	bfc4      	itt	gt
 8008296:	3b04      	subgt	r3, #4
 8008298:	9306      	strgt	r3, [sp, #24]
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	f1a3 0302 	sub.w	r3, r3, #2
 80082a0:	bfcc      	ite	gt
 80082a2:	2500      	movgt	r5, #0
 80082a4:	2501      	movle	r5, #1
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f200 8087 	bhi.w	80083ba <_dtoa_r+0x30a>
 80082ac:	e8df f003 	tbb	[pc, r3]
 80082b0:	59383a2d 	.word	0x59383a2d
 80082b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082b8:	441d      	add	r5, r3
 80082ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082be:	2b20      	cmp	r3, #32
 80082c0:	bfc1      	itttt	gt
 80082c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80082ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80082d2:	bfda      	itte	le
 80082d4:	f1c3 0320 	rsble	r3, r3, #32
 80082d8:	fa06 f003 	lslle.w	r0, r6, r3
 80082dc:	4318      	orrgt	r0, r3
 80082de:	f7f8 f931 	bl	8000544 <__aeabi_ui2d>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4606      	mov	r6, r0
 80082e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80082ea:	3d01      	subs	r5, #1
 80082ec:	930e      	str	r3, [sp, #56]	; 0x38
 80082ee:	e76a      	b.n	80081c6 <_dtoa_r+0x116>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e7b2      	b.n	800825a <_dtoa_r+0x1aa>
 80082f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80082f6:	e7b1      	b.n	800825c <_dtoa_r+0x1ac>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	9a00      	ldr	r2, [sp, #0]
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	9304      	str	r3, [sp, #16]
 8008300:	4253      	negs	r3, r2
 8008302:	9307      	str	r3, [sp, #28]
 8008304:	2300      	movs	r3, #0
 8008306:	930a      	str	r3, [sp, #40]	; 0x28
 8008308:	e7bf      	b.n	800828a <_dtoa_r+0x1da>
 800830a:	2300      	movs	r3, #0
 800830c:	9308      	str	r3, [sp, #32]
 800830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	dc55      	bgt.n	80083c0 <_dtoa_r+0x310>
 8008314:	2301      	movs	r3, #1
 8008316:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800831a:	461a      	mov	r2, r3
 800831c:	9209      	str	r2, [sp, #36]	; 0x24
 800831e:	e00c      	b.n	800833a <_dtoa_r+0x28a>
 8008320:	2301      	movs	r3, #1
 8008322:	e7f3      	b.n	800830c <_dtoa_r+0x25c>
 8008324:	2300      	movs	r3, #0
 8008326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008328:	9308      	str	r3, [sp, #32]
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	4413      	add	r3, r2
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	3301      	adds	r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	bfb8      	it	lt
 8008338:	2301      	movlt	r3, #1
 800833a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800833c:	2200      	movs	r2, #0
 800833e:	6042      	str	r2, [r0, #4]
 8008340:	2204      	movs	r2, #4
 8008342:	f102 0614 	add.w	r6, r2, #20
 8008346:	429e      	cmp	r6, r3
 8008348:	6841      	ldr	r1, [r0, #4]
 800834a:	d93d      	bls.n	80083c8 <_dtoa_r+0x318>
 800834c:	4620      	mov	r0, r4
 800834e:	f001 f923 	bl	8009598 <_Balloc>
 8008352:	9001      	str	r0, [sp, #4]
 8008354:	2800      	cmp	r0, #0
 8008356:	d13b      	bne.n	80083d0 <_dtoa_r+0x320>
 8008358:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <_dtoa_r+0x2f0>)
 800835a:	4602      	mov	r2, r0
 800835c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008360:	e6c0      	b.n	80080e4 <_dtoa_r+0x34>
 8008362:	2301      	movs	r3, #1
 8008364:	e7df      	b.n	8008326 <_dtoa_r+0x276>
 8008366:	bf00      	nop
 8008368:	636f4361 	.word	0x636f4361
 800836c:	3fd287a7 	.word	0x3fd287a7
 8008370:	8b60c8b3 	.word	0x8b60c8b3
 8008374:	3fc68a28 	.word	0x3fc68a28
 8008378:	509f79fb 	.word	0x509f79fb
 800837c:	3fd34413 	.word	0x3fd34413
 8008380:	0800abcd 	.word	0x0800abcd
 8008384:	0800abe4 	.word	0x0800abe4
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	0800abc9 	.word	0x0800abc9
 8008390:	0800abc0 	.word	0x0800abc0
 8008394:	0800ab4d 	.word	0x0800ab4d
 8008398:	3ff80000 	.word	0x3ff80000
 800839c:	0800adb0 	.word	0x0800adb0
 80083a0:	0800ac3f 	.word	0x0800ac3f
 80083a4:	2501      	movs	r5, #1
 80083a6:	2300      	movs	r3, #0
 80083a8:	9306      	str	r3, [sp, #24]
 80083aa:	9508      	str	r5, [sp, #32]
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	2312      	movs	r3, #18
 80083b8:	e7b0      	b.n	800831c <_dtoa_r+0x26c>
 80083ba:	2301      	movs	r3, #1
 80083bc:	9308      	str	r3, [sp, #32]
 80083be:	e7f5      	b.n	80083ac <_dtoa_r+0x2fc>
 80083c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083c6:	e7b8      	b.n	800833a <_dtoa_r+0x28a>
 80083c8:	3101      	adds	r1, #1
 80083ca:	6041      	str	r1, [r0, #4]
 80083cc:	0052      	lsls	r2, r2, #1
 80083ce:	e7b8      	b.n	8008342 <_dtoa_r+0x292>
 80083d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d2:	9a01      	ldr	r2, [sp, #4]
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	2b0e      	cmp	r3, #14
 80083da:	f200 809d 	bhi.w	8008518 <_dtoa_r+0x468>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	f000 809a 	beq.w	8008518 <_dtoa_r+0x468>
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd32      	ble.n	8008450 <_dtoa_r+0x3a0>
 80083ea:	4ab7      	ldr	r2, [pc, #732]	; (80086c8 <_dtoa_r+0x618>)
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	05d8      	lsls	r0, r3, #23
 80083fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008400:	d516      	bpl.n	8008430 <_dtoa_r+0x380>
 8008402:	4bb2      	ldr	r3, [pc, #712]	; (80086cc <_dtoa_r+0x61c>)
 8008404:	ec51 0b19 	vmov	r0, r1, d9
 8008408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800840c:	f7f8 fa3e 	bl	800088c <__aeabi_ddiv>
 8008410:	f007 070f 	and.w	r7, r7, #15
 8008414:	4682      	mov	sl, r0
 8008416:	468b      	mov	fp, r1
 8008418:	2503      	movs	r5, #3
 800841a:	4eac      	ldr	r6, [pc, #688]	; (80086cc <_dtoa_r+0x61c>)
 800841c:	b957      	cbnz	r7, 8008434 <_dtoa_r+0x384>
 800841e:	4642      	mov	r2, r8
 8008420:	464b      	mov	r3, r9
 8008422:	4650      	mov	r0, sl
 8008424:	4659      	mov	r1, fp
 8008426:	f7f8 fa31 	bl	800088c <__aeabi_ddiv>
 800842a:	4682      	mov	sl, r0
 800842c:	468b      	mov	fp, r1
 800842e:	e028      	b.n	8008482 <_dtoa_r+0x3d2>
 8008430:	2502      	movs	r5, #2
 8008432:	e7f2      	b.n	800841a <_dtoa_r+0x36a>
 8008434:	07f9      	lsls	r1, r7, #31
 8008436:	d508      	bpl.n	800844a <_dtoa_r+0x39a>
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008440:	f7f8 f8fa 	bl	8000638 <__aeabi_dmul>
 8008444:	3501      	adds	r5, #1
 8008446:	4680      	mov	r8, r0
 8008448:	4689      	mov	r9, r1
 800844a:	107f      	asrs	r7, r7, #1
 800844c:	3608      	adds	r6, #8
 800844e:	e7e5      	b.n	800841c <_dtoa_r+0x36c>
 8008450:	f000 809b 	beq.w	800858a <_dtoa_r+0x4da>
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	4f9d      	ldr	r7, [pc, #628]	; (80086cc <_dtoa_r+0x61c>)
 8008458:	425e      	negs	r6, r3
 800845a:	4b9b      	ldr	r3, [pc, #620]	; (80086c8 <_dtoa_r+0x618>)
 800845c:	f006 020f 	and.w	r2, r6, #15
 8008460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	ec51 0b19 	vmov	r0, r1, d9
 800846c:	f7f8 f8e4 	bl	8000638 <__aeabi_dmul>
 8008470:	1136      	asrs	r6, r6, #4
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	2300      	movs	r3, #0
 8008478:	2502      	movs	r5, #2
 800847a:	2e00      	cmp	r6, #0
 800847c:	d17a      	bne.n	8008574 <_dtoa_r+0x4c4>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1d3      	bne.n	800842a <_dtoa_r+0x37a>
 8008482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8082 	beq.w	800858e <_dtoa_r+0x4de>
 800848a:	4b91      	ldr	r3, [pc, #580]	; (80086d0 <_dtoa_r+0x620>)
 800848c:	2200      	movs	r2, #0
 800848e:	4650      	mov	r0, sl
 8008490:	4659      	mov	r1, fp
 8008492:	f7f8 fb43 	bl	8000b1c <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	d079      	beq.n	800858e <_dtoa_r+0x4de>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d076      	beq.n	800858e <_dtoa_r+0x4de>
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dd36      	ble.n	8008514 <_dtoa_r+0x464>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	4650      	mov	r0, sl
 80084aa:	4659      	mov	r1, fp
 80084ac:	1e5f      	subs	r7, r3, #1
 80084ae:	2200      	movs	r2, #0
 80084b0:	4b88      	ldr	r3, [pc, #544]	; (80086d4 <_dtoa_r+0x624>)
 80084b2:	f7f8 f8c1 	bl	8000638 <__aeabi_dmul>
 80084b6:	9e02      	ldr	r6, [sp, #8]
 80084b8:	4682      	mov	sl, r0
 80084ba:	468b      	mov	fp, r1
 80084bc:	3501      	adds	r5, #1
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f8 f850 	bl	8000564 <__aeabi_i2d>
 80084c4:	4652      	mov	r2, sl
 80084c6:	465b      	mov	r3, fp
 80084c8:	f7f8 f8b6 	bl	8000638 <__aeabi_dmul>
 80084cc:	4b82      	ldr	r3, [pc, #520]	; (80086d8 <_dtoa_r+0x628>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	f7f7 fefc 	bl	80002cc <__adddf3>
 80084d4:	46d0      	mov	r8, sl
 80084d6:	46d9      	mov	r9, fp
 80084d8:	4682      	mov	sl, r0
 80084da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80084de:	2e00      	cmp	r6, #0
 80084e0:	d158      	bne.n	8008594 <_dtoa_r+0x4e4>
 80084e2:	4b7e      	ldr	r3, [pc, #504]	; (80086dc <_dtoa_r+0x62c>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f7 feed 	bl	80002c8 <__aeabi_dsub>
 80084ee:	4652      	mov	r2, sl
 80084f0:	465b      	mov	r3, fp
 80084f2:	4680      	mov	r8, r0
 80084f4:	4689      	mov	r9, r1
 80084f6:	f7f8 fb2f 	bl	8000b58 <__aeabi_dcmpgt>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f040 8295 	bne.w	8008a2a <_dtoa_r+0x97a>
 8008500:	4652      	mov	r2, sl
 8008502:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008506:	4640      	mov	r0, r8
 8008508:	4649      	mov	r1, r9
 800850a:	f7f8 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8289 	bne.w	8008a26 <_dtoa_r+0x976>
 8008514:	ec5b ab19 	vmov	sl, fp, d9
 8008518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800851a:	2b00      	cmp	r3, #0
 800851c:	f2c0 8148 	blt.w	80087b0 <_dtoa_r+0x700>
 8008520:	9a00      	ldr	r2, [sp, #0]
 8008522:	2a0e      	cmp	r2, #14
 8008524:	f300 8144 	bgt.w	80087b0 <_dtoa_r+0x700>
 8008528:	4b67      	ldr	r3, [pc, #412]	; (80086c8 <_dtoa_r+0x618>)
 800852a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	f280 80d5 	bge.w	80086e4 <_dtoa_r+0x634>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f300 80d1 	bgt.w	80086e4 <_dtoa_r+0x634>
 8008542:	f040 826f 	bne.w	8008a24 <_dtoa_r+0x974>
 8008546:	4b65      	ldr	r3, [pc, #404]	; (80086dc <_dtoa_r+0x62c>)
 8008548:	2200      	movs	r2, #0
 800854a:	4640      	mov	r0, r8
 800854c:	4649      	mov	r1, r9
 800854e:	f7f8 f873 	bl	8000638 <__aeabi_dmul>
 8008552:	4652      	mov	r2, sl
 8008554:	465b      	mov	r3, fp
 8008556:	f7f8 faf5 	bl	8000b44 <__aeabi_dcmpge>
 800855a:	9e03      	ldr	r6, [sp, #12]
 800855c:	4637      	mov	r7, r6
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8245 	bne.w	80089ee <_dtoa_r+0x93e>
 8008564:	9d01      	ldr	r5, [sp, #4]
 8008566:	2331      	movs	r3, #49	; 0x31
 8008568:	f805 3b01 	strb.w	r3, [r5], #1
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	e240      	b.n	80089f6 <_dtoa_r+0x946>
 8008574:	07f2      	lsls	r2, r6, #31
 8008576:	d505      	bpl.n	8008584 <_dtoa_r+0x4d4>
 8008578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857c:	f7f8 f85c 	bl	8000638 <__aeabi_dmul>
 8008580:	3501      	adds	r5, #1
 8008582:	2301      	movs	r3, #1
 8008584:	1076      	asrs	r6, r6, #1
 8008586:	3708      	adds	r7, #8
 8008588:	e777      	b.n	800847a <_dtoa_r+0x3ca>
 800858a:	2502      	movs	r5, #2
 800858c:	e779      	b.n	8008482 <_dtoa_r+0x3d2>
 800858e:	9f00      	ldr	r7, [sp, #0]
 8008590:	9e03      	ldr	r6, [sp, #12]
 8008592:	e794      	b.n	80084be <_dtoa_r+0x40e>
 8008594:	9901      	ldr	r1, [sp, #4]
 8008596:	4b4c      	ldr	r3, [pc, #304]	; (80086c8 <_dtoa_r+0x618>)
 8008598:	4431      	add	r1, r6
 800859a:	910d      	str	r1, [sp, #52]	; 0x34
 800859c:	9908      	ldr	r1, [sp, #32]
 800859e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d043      	beq.n	8008632 <_dtoa_r+0x582>
 80085aa:	494d      	ldr	r1, [pc, #308]	; (80086e0 <_dtoa_r+0x630>)
 80085ac:	2000      	movs	r0, #0
 80085ae:	f7f8 f96d 	bl	800088c <__aeabi_ddiv>
 80085b2:	4652      	mov	r2, sl
 80085b4:	465b      	mov	r3, fp
 80085b6:	f7f7 fe87 	bl	80002c8 <__aeabi_dsub>
 80085ba:	9d01      	ldr	r5, [sp, #4]
 80085bc:	4682      	mov	sl, r0
 80085be:	468b      	mov	fp, r1
 80085c0:	4649      	mov	r1, r9
 80085c2:	4640      	mov	r0, r8
 80085c4:	f7f8 fae8 	bl	8000b98 <__aeabi_d2iz>
 80085c8:	4606      	mov	r6, r0
 80085ca:	f7f7 ffcb 	bl	8000564 <__aeabi_i2d>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f7 fe77 	bl	80002c8 <__aeabi_dsub>
 80085da:	3630      	adds	r6, #48	; 0x30
 80085dc:	f805 6b01 	strb.w	r6, [r5], #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	4680      	mov	r8, r0
 80085e6:	4689      	mov	r9, r1
 80085e8:	f7f8 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d163      	bne.n	80086b8 <_dtoa_r+0x608>
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	4936      	ldr	r1, [pc, #216]	; (80086d0 <_dtoa_r+0x620>)
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7f7 fe66 	bl	80002c8 <__aeabi_dsub>
 80085fc:	4652      	mov	r2, sl
 80085fe:	465b      	mov	r3, fp
 8008600:	f7f8 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f040 80b5 	bne.w	8008774 <_dtoa_r+0x6c4>
 800860a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860c:	429d      	cmp	r5, r3
 800860e:	d081      	beq.n	8008514 <_dtoa_r+0x464>
 8008610:	4b30      	ldr	r3, [pc, #192]	; (80086d4 <_dtoa_r+0x624>)
 8008612:	2200      	movs	r2, #0
 8008614:	4650      	mov	r0, sl
 8008616:	4659      	mov	r1, fp
 8008618:	f7f8 f80e 	bl	8000638 <__aeabi_dmul>
 800861c:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <_dtoa_r+0x624>)
 800861e:	4682      	mov	sl, r0
 8008620:	468b      	mov	fp, r1
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	2200      	movs	r2, #0
 8008628:	f7f8 f806 	bl	8000638 <__aeabi_dmul>
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	e7c6      	b.n	80085c0 <_dtoa_r+0x510>
 8008632:	4650      	mov	r0, sl
 8008634:	4659      	mov	r1, fp
 8008636:	f7f7 ffff 	bl	8000638 <__aeabi_dmul>
 800863a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863c:	9d01      	ldr	r5, [sp, #4]
 800863e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008640:	4682      	mov	sl, r0
 8008642:	468b      	mov	fp, r1
 8008644:	4649      	mov	r1, r9
 8008646:	4640      	mov	r0, r8
 8008648:	f7f8 faa6 	bl	8000b98 <__aeabi_d2iz>
 800864c:	4606      	mov	r6, r0
 800864e:	f7f7 ff89 	bl	8000564 <__aeabi_i2d>
 8008652:	3630      	adds	r6, #48	; 0x30
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f7 fe34 	bl	80002c8 <__aeabi_dsub>
 8008660:	f805 6b01 	strb.w	r6, [r5], #1
 8008664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008666:	429d      	cmp	r5, r3
 8008668:	4680      	mov	r8, r0
 800866a:	4689      	mov	r9, r1
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	d124      	bne.n	80086bc <_dtoa_r+0x60c>
 8008672:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <_dtoa_r+0x630>)
 8008674:	4650      	mov	r0, sl
 8008676:	4659      	mov	r1, fp
 8008678:	f7f7 fe28 	bl	80002cc <__adddf3>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f8 fa68 	bl	8000b58 <__aeabi_dcmpgt>
 8008688:	2800      	cmp	r0, #0
 800868a:	d173      	bne.n	8008774 <_dtoa_r+0x6c4>
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	4913      	ldr	r1, [pc, #76]	; (80086e0 <_dtoa_r+0x630>)
 8008692:	2000      	movs	r0, #0
 8008694:	f7f7 fe18 	bl	80002c8 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4640      	mov	r0, r8
 800869e:	4649      	mov	r1, r9
 80086a0:	f7f8 fa3c 	bl	8000b1c <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f af35 	beq.w	8008514 <_dtoa_r+0x464>
 80086aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086ac:	1e6b      	subs	r3, r5, #1
 80086ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80086b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086b4:	2b30      	cmp	r3, #48	; 0x30
 80086b6:	d0f8      	beq.n	80086aa <_dtoa_r+0x5fa>
 80086b8:	9700      	str	r7, [sp, #0]
 80086ba:	e049      	b.n	8008750 <_dtoa_r+0x6a0>
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <_dtoa_r+0x624>)
 80086be:	f7f7 ffbb 	bl	8000638 <__aeabi_dmul>
 80086c2:	4680      	mov	r8, r0
 80086c4:	4689      	mov	r9, r1
 80086c6:	e7bd      	b.n	8008644 <_dtoa_r+0x594>
 80086c8:	0800adb0 	.word	0x0800adb0
 80086cc:	0800ad88 	.word	0x0800ad88
 80086d0:	3ff00000 	.word	0x3ff00000
 80086d4:	40240000 	.word	0x40240000
 80086d8:	401c0000 	.word	0x401c0000
 80086dc:	40140000 	.word	0x40140000
 80086e0:	3fe00000 	.word	0x3fe00000
 80086e4:	9d01      	ldr	r5, [sp, #4]
 80086e6:	4656      	mov	r6, sl
 80086e8:	465f      	mov	r7, fp
 80086ea:	4642      	mov	r2, r8
 80086ec:	464b      	mov	r3, r9
 80086ee:	4630      	mov	r0, r6
 80086f0:	4639      	mov	r1, r7
 80086f2:	f7f8 f8cb 	bl	800088c <__aeabi_ddiv>
 80086f6:	f7f8 fa4f 	bl	8000b98 <__aeabi_d2iz>
 80086fa:	4682      	mov	sl, r0
 80086fc:	f7f7 ff32 	bl	8000564 <__aeabi_i2d>
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	f7f7 ff98 	bl	8000638 <__aeabi_dmul>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008714:	f7f7 fdd8 	bl	80002c8 <__aeabi_dsub>
 8008718:	f805 6b01 	strb.w	r6, [r5], #1
 800871c:	9e01      	ldr	r6, [sp, #4]
 800871e:	9f03      	ldr	r7, [sp, #12]
 8008720:	1bae      	subs	r6, r5, r6
 8008722:	42b7      	cmp	r7, r6
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	d135      	bne.n	8008796 <_dtoa_r+0x6e6>
 800872a:	f7f7 fdcf 	bl	80002cc <__adddf3>
 800872e:	4642      	mov	r2, r8
 8008730:	464b      	mov	r3, r9
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	f7f8 fa0f 	bl	8000b58 <__aeabi_dcmpgt>
 800873a:	b9d0      	cbnz	r0, 8008772 <_dtoa_r+0x6c2>
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f8 f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 8008748:	b110      	cbz	r0, 8008750 <_dtoa_r+0x6a0>
 800874a:	f01a 0f01 	tst.w	sl, #1
 800874e:	d110      	bne.n	8008772 <_dtoa_r+0x6c2>
 8008750:	4620      	mov	r0, r4
 8008752:	ee18 1a10 	vmov	r1, s16
 8008756:	f000 ff5f 	bl	8009618 <_Bfree>
 800875a:	2300      	movs	r3, #0
 800875c:	9800      	ldr	r0, [sp, #0]
 800875e:	702b      	strb	r3, [r5, #0]
 8008760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008762:	3001      	adds	r0, #1
 8008764:	6018      	str	r0, [r3, #0]
 8008766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008768:	2b00      	cmp	r3, #0
 800876a:	f43f acf1 	beq.w	8008150 <_dtoa_r+0xa0>
 800876e:	601d      	str	r5, [r3, #0]
 8008770:	e4ee      	b.n	8008150 <_dtoa_r+0xa0>
 8008772:	9f00      	ldr	r7, [sp, #0]
 8008774:	462b      	mov	r3, r5
 8008776:	461d      	mov	r5, r3
 8008778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800877c:	2a39      	cmp	r2, #57	; 0x39
 800877e:	d106      	bne.n	800878e <_dtoa_r+0x6de>
 8008780:	9a01      	ldr	r2, [sp, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d1f7      	bne.n	8008776 <_dtoa_r+0x6c6>
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	2230      	movs	r2, #48	; 0x30
 800878a:	3701      	adds	r7, #1
 800878c:	700a      	strb	r2, [r1, #0]
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	3201      	adds	r2, #1
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	e790      	b.n	80086b8 <_dtoa_r+0x608>
 8008796:	4ba6      	ldr	r3, [pc, #664]	; (8008a30 <_dtoa_r+0x980>)
 8008798:	2200      	movs	r2, #0
 800879a:	f7f7 ff4d 	bl	8000638 <__aeabi_dmul>
 800879e:	2200      	movs	r2, #0
 80087a0:	2300      	movs	r3, #0
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f7f8 f9af 	bl	8000b08 <__aeabi_dcmpeq>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d09d      	beq.n	80086ea <_dtoa_r+0x63a>
 80087ae:	e7cf      	b.n	8008750 <_dtoa_r+0x6a0>
 80087b0:	9a08      	ldr	r2, [sp, #32]
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	f000 80d7 	beq.w	8008966 <_dtoa_r+0x8b6>
 80087b8:	9a06      	ldr	r2, [sp, #24]
 80087ba:	2a01      	cmp	r2, #1
 80087bc:	f300 80ba 	bgt.w	8008934 <_dtoa_r+0x884>
 80087c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087c2:	2a00      	cmp	r2, #0
 80087c4:	f000 80b2 	beq.w	800892c <_dtoa_r+0x87c>
 80087c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087cc:	9e07      	ldr	r6, [sp, #28]
 80087ce:	9d04      	ldr	r5, [sp, #16]
 80087d0:	9a04      	ldr	r2, [sp, #16]
 80087d2:	441a      	add	r2, r3
 80087d4:	9204      	str	r2, [sp, #16]
 80087d6:	9a05      	ldr	r2, [sp, #20]
 80087d8:	2101      	movs	r1, #1
 80087da:	441a      	add	r2, r3
 80087dc:	4620      	mov	r0, r4
 80087de:	9205      	str	r2, [sp, #20]
 80087e0:	f001 f81c 	bl	800981c <__i2b>
 80087e4:	4607      	mov	r7, r0
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	dd0c      	ble.n	8008804 <_dtoa_r+0x754>
 80087ea:	9b05      	ldr	r3, [sp, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dd09      	ble.n	8008804 <_dtoa_r+0x754>
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	9a04      	ldr	r2, [sp, #16]
 80087f4:	bfa8      	it	ge
 80087f6:	462b      	movge	r3, r5
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	9204      	str	r2, [sp, #16]
 80087fc:	9a05      	ldr	r2, [sp, #20]
 80087fe:	1aed      	subs	r5, r5, r3
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	9b07      	ldr	r3, [sp, #28]
 8008806:	b31b      	cbz	r3, 8008850 <_dtoa_r+0x7a0>
 8008808:	9b08      	ldr	r3, [sp, #32]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80af 	beq.w	800896e <_dtoa_r+0x8be>
 8008810:	2e00      	cmp	r6, #0
 8008812:	dd13      	ble.n	800883c <_dtoa_r+0x78c>
 8008814:	4639      	mov	r1, r7
 8008816:	4632      	mov	r2, r6
 8008818:	4620      	mov	r0, r4
 800881a:	f001 f8bf 	bl	800999c <__pow5mult>
 800881e:	ee18 2a10 	vmov	r2, s16
 8008822:	4601      	mov	r1, r0
 8008824:	4607      	mov	r7, r0
 8008826:	4620      	mov	r0, r4
 8008828:	f001 f80e 	bl	8009848 <__multiply>
 800882c:	ee18 1a10 	vmov	r1, s16
 8008830:	4680      	mov	r8, r0
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fef0 	bl	8009618 <_Bfree>
 8008838:	ee08 8a10 	vmov	s16, r8
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	1b9a      	subs	r2, r3, r6
 8008840:	d006      	beq.n	8008850 <_dtoa_r+0x7a0>
 8008842:	ee18 1a10 	vmov	r1, s16
 8008846:	4620      	mov	r0, r4
 8008848:	f001 f8a8 	bl	800999c <__pow5mult>
 800884c:	ee08 0a10 	vmov	s16, r0
 8008850:	2101      	movs	r1, #1
 8008852:	4620      	mov	r0, r4
 8008854:	f000 ffe2 	bl	800981c <__i2b>
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	4606      	mov	r6, r0
 800885e:	f340 8088 	ble.w	8008972 <_dtoa_r+0x8c2>
 8008862:	461a      	mov	r2, r3
 8008864:	4601      	mov	r1, r0
 8008866:	4620      	mov	r0, r4
 8008868:	f001 f898 	bl	800999c <__pow5mult>
 800886c:	9b06      	ldr	r3, [sp, #24]
 800886e:	2b01      	cmp	r3, #1
 8008870:	4606      	mov	r6, r0
 8008872:	f340 8081 	ble.w	8008978 <_dtoa_r+0x8c8>
 8008876:	f04f 0800 	mov.w	r8, #0
 800887a:	6933      	ldr	r3, [r6, #16]
 800887c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008880:	6918      	ldr	r0, [r3, #16]
 8008882:	f000 ff7b 	bl	800977c <__hi0bits>
 8008886:	f1c0 0020 	rsb	r0, r0, #32
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	4418      	add	r0, r3
 800888e:	f010 001f 	ands.w	r0, r0, #31
 8008892:	f000 8092 	beq.w	80089ba <_dtoa_r+0x90a>
 8008896:	f1c0 0320 	rsb	r3, r0, #32
 800889a:	2b04      	cmp	r3, #4
 800889c:	f340 808a 	ble.w	80089b4 <_dtoa_r+0x904>
 80088a0:	f1c0 001c 	rsb	r0, r0, #28
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	4403      	add	r3, r0
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	9b05      	ldr	r3, [sp, #20]
 80088ac:	4403      	add	r3, r0
 80088ae:	4405      	add	r5, r0
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd07      	ble.n	80088c8 <_dtoa_r+0x818>
 80088b8:	ee18 1a10 	vmov	r1, s16
 80088bc:	461a      	mov	r2, r3
 80088be:	4620      	mov	r0, r4
 80088c0:	f001 f8c6 	bl	8009a50 <__lshift>
 80088c4:	ee08 0a10 	vmov	s16, r0
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dd05      	ble.n	80088da <_dtoa_r+0x82a>
 80088ce:	4631      	mov	r1, r6
 80088d0:	461a      	mov	r2, r3
 80088d2:	4620      	mov	r0, r4
 80088d4:	f001 f8bc 	bl	8009a50 <__lshift>
 80088d8:	4606      	mov	r6, r0
 80088da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d06e      	beq.n	80089be <_dtoa_r+0x90e>
 80088e0:	ee18 0a10 	vmov	r0, s16
 80088e4:	4631      	mov	r1, r6
 80088e6:	f001 f923 	bl	8009b30 <__mcmp>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	da67      	bge.n	80089be <_dtoa_r+0x90e>
 80088ee:	9b00      	ldr	r3, [sp, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	220a      	movs	r2, #10
 80088fa:	2300      	movs	r3, #0
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fead 	bl	800965c <__multadd>
 8008902:	9b08      	ldr	r3, [sp, #32]
 8008904:	ee08 0a10 	vmov	s16, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 81b1 	beq.w	8008c70 <_dtoa_r+0xbc0>
 800890e:	2300      	movs	r3, #0
 8008910:	4639      	mov	r1, r7
 8008912:	220a      	movs	r2, #10
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fea1 	bl	800965c <__multadd>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	4607      	mov	r7, r0
 8008920:	f300 808e 	bgt.w	8008a40 <_dtoa_r+0x990>
 8008924:	9b06      	ldr	r3, [sp, #24]
 8008926:	2b02      	cmp	r3, #2
 8008928:	dc51      	bgt.n	80089ce <_dtoa_r+0x91e>
 800892a:	e089      	b.n	8008a40 <_dtoa_r+0x990>
 800892c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800892e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008932:	e74b      	b.n	80087cc <_dtoa_r+0x71c>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	1e5e      	subs	r6, r3, #1
 8008938:	9b07      	ldr	r3, [sp, #28]
 800893a:	42b3      	cmp	r3, r6
 800893c:	bfbf      	itttt	lt
 800893e:	9b07      	ldrlt	r3, [sp, #28]
 8008940:	9607      	strlt	r6, [sp, #28]
 8008942:	1af2      	sublt	r2, r6, r3
 8008944:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008946:	bfb6      	itet	lt
 8008948:	189b      	addlt	r3, r3, r2
 800894a:	1b9e      	subge	r6, r3, r6
 800894c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	bfb8      	it	lt
 8008952:	2600      	movlt	r6, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfb7      	itett	lt
 8008958:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800895c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008960:	1a9d      	sublt	r5, r3, r2
 8008962:	2300      	movlt	r3, #0
 8008964:	e734      	b.n	80087d0 <_dtoa_r+0x720>
 8008966:	9e07      	ldr	r6, [sp, #28]
 8008968:	9d04      	ldr	r5, [sp, #16]
 800896a:	9f08      	ldr	r7, [sp, #32]
 800896c:	e73b      	b.n	80087e6 <_dtoa_r+0x736>
 800896e:	9a07      	ldr	r2, [sp, #28]
 8008970:	e767      	b.n	8008842 <_dtoa_r+0x792>
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b01      	cmp	r3, #1
 8008976:	dc18      	bgt.n	80089aa <_dtoa_r+0x8fa>
 8008978:	f1ba 0f00 	cmp.w	sl, #0
 800897c:	d115      	bne.n	80089aa <_dtoa_r+0x8fa>
 800897e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008982:	b993      	cbnz	r3, 80089aa <_dtoa_r+0x8fa>
 8008984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008988:	0d1b      	lsrs	r3, r3, #20
 800898a:	051b      	lsls	r3, r3, #20
 800898c:	b183      	cbz	r3, 80089b0 <_dtoa_r+0x900>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	3301      	adds	r3, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	9b05      	ldr	r3, [sp, #20]
 8008996:	3301      	adds	r3, #1
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	f04f 0801 	mov.w	r8, #1
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f af6a 	bne.w	800887a <_dtoa_r+0x7ca>
 80089a6:	2001      	movs	r0, #1
 80089a8:	e76f      	b.n	800888a <_dtoa_r+0x7da>
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	e7f6      	b.n	800899e <_dtoa_r+0x8ee>
 80089b0:	4698      	mov	r8, r3
 80089b2:	e7f4      	b.n	800899e <_dtoa_r+0x8ee>
 80089b4:	f43f af7d 	beq.w	80088b2 <_dtoa_r+0x802>
 80089b8:	4618      	mov	r0, r3
 80089ba:	301c      	adds	r0, #28
 80089bc:	e772      	b.n	80088a4 <_dtoa_r+0x7f4>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dc37      	bgt.n	8008a34 <_dtoa_r+0x984>
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	dd34      	ble.n	8008a34 <_dtoa_r+0x984>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	9b02      	ldr	r3, [sp, #8]
 80089d0:	b96b      	cbnz	r3, 80089ee <_dtoa_r+0x93e>
 80089d2:	4631      	mov	r1, r6
 80089d4:	2205      	movs	r2, #5
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fe40 	bl	800965c <__multadd>
 80089dc:	4601      	mov	r1, r0
 80089de:	4606      	mov	r6, r0
 80089e0:	ee18 0a10 	vmov	r0, s16
 80089e4:	f001 f8a4 	bl	8009b30 <__mcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f73f adbb 	bgt.w	8008564 <_dtoa_r+0x4b4>
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	9d01      	ldr	r5, [sp, #4]
 80089f2:	43db      	mvns	r3, r3
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	f04f 0800 	mov.w	r8, #0
 80089fa:	4631      	mov	r1, r6
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fe0b 	bl	8009618 <_Bfree>
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	f43f aea4 	beq.w	8008750 <_dtoa_r+0x6a0>
 8008a08:	f1b8 0f00 	cmp.w	r8, #0
 8008a0c:	d005      	beq.n	8008a1a <_dtoa_r+0x96a>
 8008a0e:	45b8      	cmp	r8, r7
 8008a10:	d003      	beq.n	8008a1a <_dtoa_r+0x96a>
 8008a12:	4641      	mov	r1, r8
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 fdff 	bl	8009618 <_Bfree>
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fdfb 	bl	8009618 <_Bfree>
 8008a22:	e695      	b.n	8008750 <_dtoa_r+0x6a0>
 8008a24:	2600      	movs	r6, #0
 8008a26:	4637      	mov	r7, r6
 8008a28:	e7e1      	b.n	80089ee <_dtoa_r+0x93e>
 8008a2a:	9700      	str	r7, [sp, #0]
 8008a2c:	4637      	mov	r7, r6
 8008a2e:	e599      	b.n	8008564 <_dtoa_r+0x4b4>
 8008a30:	40240000 	.word	0x40240000
 8008a34:	9b08      	ldr	r3, [sp, #32]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80ca 	beq.w	8008bd0 <_dtoa_r+0xb20>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	dd05      	ble.n	8008a50 <_dtoa_r+0x9a0>
 8008a44:	4639      	mov	r1, r7
 8008a46:	462a      	mov	r2, r5
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f001 f801 	bl	8009a50 <__lshift>
 8008a4e:	4607      	mov	r7, r0
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	d05b      	beq.n	8008b0e <_dtoa_r+0xa5e>
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 fd9d 	bl	8009598 <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b928      	cbnz	r0, 8008a6e <_dtoa_r+0x9be>
 8008a62:	4b87      	ldr	r3, [pc, #540]	; (8008c80 <_dtoa_r+0xbd0>)
 8008a64:	4602      	mov	r2, r0
 8008a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a6a:	f7ff bb3b 	b.w	80080e4 <_dtoa_r+0x34>
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	3202      	adds	r2, #2
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	f107 010c 	add.w	r1, r7, #12
 8008a78:	300c      	adds	r0, #12
 8008a7a:	f7fd ffc5 	bl	8006a08 <memcpy>
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4629      	mov	r1, r5
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 ffe4 	bl	8009a50 <__lshift>
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	f103 0901 	add.w	r9, r3, #1
 8008a8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	9305      	str	r3, [sp, #20]
 8008a96:	f00a 0301 	and.w	r3, sl, #1
 8008a9a:	46b8      	mov	r8, r7
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	ee18 0a10 	vmov	r0, s16
 8008aa6:	f7ff fa75 	bl	8007f94 <quorem>
 8008aaa:	4641      	mov	r1, r8
 8008aac:	9002      	str	r0, [sp, #8]
 8008aae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ab2:	ee18 0a10 	vmov	r0, s16
 8008ab6:	f001 f83b 	bl	8009b30 <__mcmp>
 8008aba:	463a      	mov	r2, r7
 8008abc:	9003      	str	r0, [sp, #12]
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f001 f851 	bl	8009b68 <__mdiff>
 8008ac6:	68c2      	ldr	r2, [r0, #12]
 8008ac8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008acc:	4605      	mov	r5, r0
 8008ace:	bb02      	cbnz	r2, 8008b12 <_dtoa_r+0xa62>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	ee18 0a10 	vmov	r0, s16
 8008ad6:	f001 f82b 	bl	8009b30 <__mcmp>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4629      	mov	r1, r5
 8008ade:	4620      	mov	r0, r4
 8008ae0:	9207      	str	r2, [sp, #28]
 8008ae2:	f000 fd99 	bl	8009618 <_Bfree>
 8008ae6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008aea:	ea43 0102 	orr.w	r1, r3, r2
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	464d      	mov	r5, r9
 8008af4:	d10f      	bne.n	8008b16 <_dtoa_r+0xa66>
 8008af6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008afa:	d02a      	beq.n	8008b52 <_dtoa_r+0xaa2>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd02      	ble.n	8008b08 <_dtoa_r+0xa58>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b08:	f88b a000 	strb.w	sl, [fp]
 8008b0c:	e775      	b.n	80089fa <_dtoa_r+0x94a>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	e7ba      	b.n	8008a88 <_dtoa_r+0x9d8>
 8008b12:	2201      	movs	r2, #1
 8008b14:	e7e2      	b.n	8008adc <_dtoa_r+0xa2c>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	db04      	blt.n	8008b26 <_dtoa_r+0xa76>
 8008b1c:	9906      	ldr	r1, [sp, #24]
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	9904      	ldr	r1, [sp, #16]
 8008b22:	430b      	orrs	r3, r1
 8008b24:	d122      	bne.n	8008b6c <_dtoa_r+0xabc>
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	ddee      	ble.n	8008b08 <_dtoa_r+0xa58>
 8008b2a:	ee18 1a10 	vmov	r1, s16
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 ff8d 	bl	8009a50 <__lshift>
 8008b36:	4631      	mov	r1, r6
 8008b38:	ee08 0a10 	vmov	s16, r0
 8008b3c:	f000 fff8 	bl	8009b30 <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	dc03      	bgt.n	8008b4c <_dtoa_r+0xa9c>
 8008b44:	d1e0      	bne.n	8008b08 <_dtoa_r+0xa58>
 8008b46:	f01a 0f01 	tst.w	sl, #1
 8008b4a:	d0dd      	beq.n	8008b08 <_dtoa_r+0xa58>
 8008b4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b50:	d1d7      	bne.n	8008b02 <_dtoa_r+0xa52>
 8008b52:	2339      	movs	r3, #57	; 0x39
 8008b54:	f88b 3000 	strb.w	r3, [fp]
 8008b58:	462b      	mov	r3, r5
 8008b5a:	461d      	mov	r5, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b62:	2a39      	cmp	r2, #57	; 0x39
 8008b64:	d071      	beq.n	8008c4a <_dtoa_r+0xb9a>
 8008b66:	3201      	adds	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	e746      	b.n	80089fa <_dtoa_r+0x94a>
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	dd07      	ble.n	8008b80 <_dtoa_r+0xad0>
 8008b70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b74:	d0ed      	beq.n	8008b52 <_dtoa_r+0xaa2>
 8008b76:	f10a 0301 	add.w	r3, sl, #1
 8008b7a:	f88b 3000 	strb.w	r3, [fp]
 8008b7e:	e73c      	b.n	80089fa <_dtoa_r+0x94a>
 8008b80:	9b05      	ldr	r3, [sp, #20]
 8008b82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b86:	4599      	cmp	r9, r3
 8008b88:	d047      	beq.n	8008c1a <_dtoa_r+0xb6a>
 8008b8a:	ee18 1a10 	vmov	r1, s16
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 fd62 	bl	800965c <__multadd>
 8008b98:	45b8      	cmp	r8, r7
 8008b9a:	ee08 0a10 	vmov	s16, r0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	f04f 020a 	mov.w	r2, #10
 8008ba6:	4641      	mov	r1, r8
 8008ba8:	4620      	mov	r0, r4
 8008baa:	d106      	bne.n	8008bba <_dtoa_r+0xb0a>
 8008bac:	f000 fd56 	bl	800965c <__multadd>
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	f109 0901 	add.w	r9, r9, #1
 8008bb8:	e772      	b.n	8008aa0 <_dtoa_r+0x9f0>
 8008bba:	f000 fd4f 	bl	800965c <__multadd>
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	220a      	movs	r2, #10
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 fd48 	bl	800965c <__multadd>
 8008bcc:	4607      	mov	r7, r0
 8008bce:	e7f1      	b.n	8008bb4 <_dtoa_r+0xb04>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	9d01      	ldr	r5, [sp, #4]
 8008bd6:	ee18 0a10 	vmov	r0, s16
 8008bda:	4631      	mov	r1, r6
 8008bdc:	f7ff f9da 	bl	8007f94 <quorem>
 8008be0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	f805 ab01 	strb.w	sl, [r5], #1
 8008bea:	1aea      	subs	r2, r5, r3
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	dd09      	ble.n	8008c06 <_dtoa_r+0xb56>
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 fd2e 	bl	800965c <__multadd>
 8008c00:	ee08 0a10 	vmov	s16, r0
 8008c04:	e7e7      	b.n	8008bd6 <_dtoa_r+0xb26>
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bfc8      	it	gt
 8008c0c:	461d      	movgt	r5, r3
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	bfd8      	it	le
 8008c12:	2501      	movle	r5, #1
 8008c14:	441d      	add	r5, r3
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	ee18 1a10 	vmov	r1, s16
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 ff15 	bl	8009a50 <__lshift>
 8008c26:	4631      	mov	r1, r6
 8008c28:	ee08 0a10 	vmov	s16, r0
 8008c2c:	f000 ff80 	bl	8009b30 <__mcmp>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	dc91      	bgt.n	8008b58 <_dtoa_r+0xaa8>
 8008c34:	d102      	bne.n	8008c3c <_dtoa_r+0xb8c>
 8008c36:	f01a 0f01 	tst.w	sl, #1
 8008c3a:	d18d      	bne.n	8008b58 <_dtoa_r+0xaa8>
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	461d      	mov	r5, r3
 8008c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c44:	2a30      	cmp	r2, #48	; 0x30
 8008c46:	d0fa      	beq.n	8008c3e <_dtoa_r+0xb8e>
 8008c48:	e6d7      	b.n	80089fa <_dtoa_r+0x94a>
 8008c4a:	9a01      	ldr	r2, [sp, #4]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d184      	bne.n	8008b5a <_dtoa_r+0xaaa>
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2331      	movs	r3, #49	; 0x31
 8008c58:	7013      	strb	r3, [r2, #0]
 8008c5a:	e6ce      	b.n	80089fa <_dtoa_r+0x94a>
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_dtoa_r+0xbd4>)
 8008c5e:	f7ff ba95 	b.w	800818c <_dtoa_r+0xdc>
 8008c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f47f aa6e 	bne.w	8008146 <_dtoa_r+0x96>
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <_dtoa_r+0xbd8>)
 8008c6c:	f7ff ba8e 	b.w	800818c <_dtoa_r+0xdc>
 8008c70:	9b02      	ldr	r3, [sp, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	dcae      	bgt.n	8008bd4 <_dtoa_r+0xb24>
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	f73f aea8 	bgt.w	80089ce <_dtoa_r+0x91e>
 8008c7e:	e7a9      	b.n	8008bd4 <_dtoa_r+0xb24>
 8008c80:	0800ac3f 	.word	0x0800ac3f
 8008c84:	0800ab4c 	.word	0x0800ab4c
 8008c88:	0800abc0 	.word	0x0800abc0

08008c8c <std>:
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	b510      	push	{r4, lr}
 8008c90:	4604      	mov	r4, r0
 8008c92:	e9c0 3300 	strd	r3, r3, [r0]
 8008c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c9a:	6083      	str	r3, [r0, #8]
 8008c9c:	8181      	strh	r1, [r0, #12]
 8008c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8008ca0:	81c2      	strh	r2, [r0, #14]
 8008ca2:	6183      	str	r3, [r0, #24]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	2208      	movs	r2, #8
 8008ca8:	305c      	adds	r0, #92	; 0x5c
 8008caa:	f7fd febb 	bl	8006a24 <memset>
 8008cae:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <std+0x38>)
 8008cb0:	6263      	str	r3, [r4, #36]	; 0x24
 8008cb2:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <std+0x3c>)
 8008cb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cb6:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <std+0x40>)
 8008cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cba:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <std+0x44>)
 8008cbc:	6224      	str	r4, [r4, #32]
 8008cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	bf00      	nop
 8008cc4:	0800a3f1 	.word	0x0800a3f1
 8008cc8:	0800a413 	.word	0x0800a413
 8008ccc:	0800a44b 	.word	0x0800a44b
 8008cd0:	0800a46f 	.word	0x0800a46f

08008cd4 <_cleanup_r>:
 8008cd4:	4901      	ldr	r1, [pc, #4]	; (8008cdc <_cleanup_r+0x8>)
 8008cd6:	f000 b8af 	b.w	8008e38 <_fwalk_reent>
 8008cda:	bf00      	nop
 8008cdc:	0800a7c9 	.word	0x0800a7c9

08008ce0 <__sfmoreglue>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	2268      	movs	r2, #104	; 0x68
 8008ce4:	1e4d      	subs	r5, r1, #1
 8008ce6:	4355      	muls	r5, r2
 8008ce8:	460e      	mov	r6, r1
 8008cea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cee:	f001 f997 	bl	800a020 <_malloc_r>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	b140      	cbz	r0, 8008d08 <__sfmoreglue+0x28>
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	e9c0 1600 	strd	r1, r6, [r0]
 8008cfc:	300c      	adds	r0, #12
 8008cfe:	60a0      	str	r0, [r4, #8]
 8008d00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d04:	f7fd fe8e 	bl	8006a24 <memset>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}

08008d0c <__sfp_lock_acquire>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__sfp_lock_acquire+0x8>)
 8008d0e:	f000 bc26 	b.w	800955e <__retarget_lock_acquire_recursive>
 8008d12:	bf00      	nop
 8008d14:	20004ca9 	.word	0x20004ca9

08008d18 <__sfp_lock_release>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__sfp_lock_release+0x8>)
 8008d1a:	f000 bc21 	b.w	8009560 <__retarget_lock_release_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20004ca9 	.word	0x20004ca9

08008d24 <__sinit_lock_acquire>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__sinit_lock_acquire+0x8>)
 8008d26:	f000 bc1a 	b.w	800955e <__retarget_lock_acquire_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	20004caa 	.word	0x20004caa

08008d30 <__sinit_lock_release>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__sinit_lock_release+0x8>)
 8008d32:	f000 bc15 	b.w	8009560 <__retarget_lock_release_recursive>
 8008d36:	bf00      	nop
 8008d38:	20004caa 	.word	0x20004caa

08008d3c <__sinit>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	4604      	mov	r4, r0
 8008d40:	f7ff fff0 	bl	8008d24 <__sinit_lock_acquire>
 8008d44:	69a3      	ldr	r3, [r4, #24]
 8008d46:	b11b      	cbz	r3, 8008d50 <__sinit+0x14>
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4c:	f7ff bff0 	b.w	8008d30 <__sinit_lock_release>
 8008d50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d54:	6523      	str	r3, [r4, #80]	; 0x50
 8008d56:	4b13      	ldr	r3, [pc, #76]	; (8008da4 <__sinit+0x68>)
 8008d58:	4a13      	ldr	r2, [pc, #76]	; (8008da8 <__sinit+0x6c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	bf04      	itt	eq
 8008d62:	2301      	moveq	r3, #1
 8008d64:	61a3      	streq	r3, [r4, #24]
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 f820 	bl	8008dac <__sfp>
 8008d6c:	6060      	str	r0, [r4, #4]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 f81c 	bl	8008dac <__sfp>
 8008d74:	60a0      	str	r0, [r4, #8]
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 f818 	bl	8008dac <__sfp>
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	60e0      	str	r0, [r4, #12]
 8008d80:	2104      	movs	r1, #4
 8008d82:	6860      	ldr	r0, [r4, #4]
 8008d84:	f7ff ff82 	bl	8008c8c <std>
 8008d88:	68a0      	ldr	r0, [r4, #8]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	2109      	movs	r1, #9
 8008d8e:	f7ff ff7d 	bl	8008c8c <std>
 8008d92:	68e0      	ldr	r0, [r4, #12]
 8008d94:	2202      	movs	r2, #2
 8008d96:	2112      	movs	r1, #18
 8008d98:	f7ff ff78 	bl	8008c8c <std>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	61a3      	str	r3, [r4, #24]
 8008da0:	e7d2      	b.n	8008d48 <__sinit+0xc>
 8008da2:	bf00      	nop
 8008da4:	0800ab38 	.word	0x0800ab38
 8008da8:	08008cd5 	.word	0x08008cd5

08008dac <__sfp>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	4607      	mov	r7, r0
 8008db0:	f7ff ffac 	bl	8008d0c <__sfp_lock_acquire>
 8008db4:	4b1e      	ldr	r3, [pc, #120]	; (8008e30 <__sfp+0x84>)
 8008db6:	681e      	ldr	r6, [r3, #0]
 8008db8:	69b3      	ldr	r3, [r6, #24]
 8008dba:	b913      	cbnz	r3, 8008dc2 <__sfp+0x16>
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f7ff ffbd 	bl	8008d3c <__sinit>
 8008dc2:	3648      	adds	r6, #72	; 0x48
 8008dc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	d503      	bpl.n	8008dd4 <__sfp+0x28>
 8008dcc:	6833      	ldr	r3, [r6, #0]
 8008dce:	b30b      	cbz	r3, 8008e14 <__sfp+0x68>
 8008dd0:	6836      	ldr	r6, [r6, #0]
 8008dd2:	e7f7      	b.n	8008dc4 <__sfp+0x18>
 8008dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dd8:	b9d5      	cbnz	r5, 8008e10 <__sfp+0x64>
 8008dda:	4b16      	ldr	r3, [pc, #88]	; (8008e34 <__sfp+0x88>)
 8008ddc:	60e3      	str	r3, [r4, #12]
 8008dde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008de2:	6665      	str	r5, [r4, #100]	; 0x64
 8008de4:	f000 fbba 	bl	800955c <__retarget_lock_init_recursive>
 8008de8:	f7ff ff96 	bl	8008d18 <__sfp_lock_release>
 8008dec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008df0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008df4:	6025      	str	r5, [r4, #0]
 8008df6:	61a5      	str	r5, [r4, #24]
 8008df8:	2208      	movs	r2, #8
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e00:	f7fd fe10 	bl	8006a24 <memset>
 8008e04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e10:	3468      	adds	r4, #104	; 0x68
 8008e12:	e7d9      	b.n	8008dc8 <__sfp+0x1c>
 8008e14:	2104      	movs	r1, #4
 8008e16:	4638      	mov	r0, r7
 8008e18:	f7ff ff62 	bl	8008ce0 <__sfmoreglue>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	6030      	str	r0, [r6, #0]
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d1d5      	bne.n	8008dd0 <__sfp+0x24>
 8008e24:	f7ff ff78 	bl	8008d18 <__sfp_lock_release>
 8008e28:	230c      	movs	r3, #12
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	e7ee      	b.n	8008e0c <__sfp+0x60>
 8008e2e:	bf00      	nop
 8008e30:	0800ab38 	.word	0x0800ab38
 8008e34:	ffff0001 	.word	0xffff0001

08008e38 <_fwalk_reent>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	4688      	mov	r8, r1
 8008e40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e44:	2700      	movs	r7, #0
 8008e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e4e:	d505      	bpl.n	8008e5c <_fwalk_reent+0x24>
 8008e50:	6824      	ldr	r4, [r4, #0]
 8008e52:	2c00      	cmp	r4, #0
 8008e54:	d1f7      	bne.n	8008e46 <_fwalk_reent+0xe>
 8008e56:	4638      	mov	r0, r7
 8008e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5c:	89ab      	ldrh	r3, [r5, #12]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d907      	bls.n	8008e72 <_fwalk_reent+0x3a>
 8008e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e66:	3301      	adds	r3, #1
 8008e68:	d003      	beq.n	8008e72 <_fwalk_reent+0x3a>
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	47c0      	blx	r8
 8008e70:	4307      	orrs	r7, r0
 8008e72:	3568      	adds	r5, #104	; 0x68
 8008e74:	e7e9      	b.n	8008e4a <_fwalk_reent+0x12>

08008e76 <rshift>:
 8008e76:	6903      	ldr	r3, [r0, #16]
 8008e78:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e80:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e84:	f100 0414 	add.w	r4, r0, #20
 8008e88:	dd45      	ble.n	8008f16 <rshift+0xa0>
 8008e8a:	f011 011f 	ands.w	r1, r1, #31
 8008e8e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e92:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e96:	d10c      	bne.n	8008eb2 <rshift+0x3c>
 8008e98:	f100 0710 	add.w	r7, r0, #16
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	42b1      	cmp	r1, r6
 8008ea0:	d334      	bcc.n	8008f0c <rshift+0x96>
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	1eea      	subs	r2, r5, #3
 8008ea8:	4296      	cmp	r6, r2
 8008eaa:	bf38      	it	cc
 8008eac:	2300      	movcc	r3, #0
 8008eae:	4423      	add	r3, r4
 8008eb0:	e015      	b.n	8008ede <rshift+0x68>
 8008eb2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008eb6:	f1c1 0820 	rsb	r8, r1, #32
 8008eba:	40cf      	lsrs	r7, r1
 8008ebc:	f105 0e04 	add.w	lr, r5, #4
 8008ec0:	46a1      	mov	r9, r4
 8008ec2:	4576      	cmp	r6, lr
 8008ec4:	46f4      	mov	ip, lr
 8008ec6:	d815      	bhi.n	8008ef4 <rshift+0x7e>
 8008ec8:	1a9a      	subs	r2, r3, r2
 8008eca:	0092      	lsls	r2, r2, #2
 8008ecc:	3a04      	subs	r2, #4
 8008ece:	3501      	adds	r5, #1
 8008ed0:	42ae      	cmp	r6, r5
 8008ed2:	bf38      	it	cc
 8008ed4:	2200      	movcc	r2, #0
 8008ed6:	18a3      	adds	r3, r4, r2
 8008ed8:	50a7      	str	r7, [r4, r2]
 8008eda:	b107      	cbz	r7, 8008ede <rshift+0x68>
 8008edc:	3304      	adds	r3, #4
 8008ede:	1b1a      	subs	r2, r3, r4
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ee6:	bf08      	it	eq
 8008ee8:	2300      	moveq	r3, #0
 8008eea:	6102      	str	r2, [r0, #16]
 8008eec:	bf08      	it	eq
 8008eee:	6143      	streq	r3, [r0, #20]
 8008ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ef4:	f8dc c000 	ldr.w	ip, [ip]
 8008ef8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008efc:	ea4c 0707 	orr.w	r7, ip, r7
 8008f00:	f849 7b04 	str.w	r7, [r9], #4
 8008f04:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f08:	40cf      	lsrs	r7, r1
 8008f0a:	e7da      	b.n	8008ec2 <rshift+0x4c>
 8008f0c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f10:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f14:	e7c3      	b.n	8008e9e <rshift+0x28>
 8008f16:	4623      	mov	r3, r4
 8008f18:	e7e1      	b.n	8008ede <rshift+0x68>

08008f1a <__hexdig_fun>:
 8008f1a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f1e:	2b09      	cmp	r3, #9
 8008f20:	d802      	bhi.n	8008f28 <__hexdig_fun+0xe>
 8008f22:	3820      	subs	r0, #32
 8008f24:	b2c0      	uxtb	r0, r0
 8008f26:	4770      	bx	lr
 8008f28:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f2c:	2b05      	cmp	r3, #5
 8008f2e:	d801      	bhi.n	8008f34 <__hexdig_fun+0x1a>
 8008f30:	3847      	subs	r0, #71	; 0x47
 8008f32:	e7f7      	b.n	8008f24 <__hexdig_fun+0xa>
 8008f34:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f38:	2b05      	cmp	r3, #5
 8008f3a:	d801      	bhi.n	8008f40 <__hexdig_fun+0x26>
 8008f3c:	3827      	subs	r0, #39	; 0x27
 8008f3e:	e7f1      	b.n	8008f24 <__hexdig_fun+0xa>
 8008f40:	2000      	movs	r0, #0
 8008f42:	4770      	bx	lr

08008f44 <__gethex>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	ed2d 8b02 	vpush	{d8}
 8008f4c:	b089      	sub	sp, #36	; 0x24
 8008f4e:	ee08 0a10 	vmov	s16, r0
 8008f52:	9304      	str	r3, [sp, #16]
 8008f54:	4bb4      	ldr	r3, [pc, #720]	; (8009228 <__gethex+0x2e4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	468b      	mov	fp, r1
 8008f5e:	4690      	mov	r8, r2
 8008f60:	f7f7 f956 	bl	8000210 <strlen>
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	f8db 2000 	ldr.w	r2, [fp]
 8008f6a:	4403      	add	r3, r0
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	1c93      	adds	r3, r2, #2
 8008f76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008f7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008f7e:	32fe      	adds	r2, #254	; 0xfe
 8008f80:	18d1      	adds	r1, r2, r3
 8008f82:	461f      	mov	r7, r3
 8008f84:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f88:	9100      	str	r1, [sp, #0]
 8008f8a:	2830      	cmp	r0, #48	; 0x30
 8008f8c:	d0f8      	beq.n	8008f80 <__gethex+0x3c>
 8008f8e:	f7ff ffc4 	bl	8008f1a <__hexdig_fun>
 8008f92:	4604      	mov	r4, r0
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d13a      	bne.n	800900e <__gethex+0xca>
 8008f98:	9901      	ldr	r1, [sp, #4]
 8008f9a:	4652      	mov	r2, sl
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f001 fa6a 	bl	800a476 <strncmp>
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d168      	bne.n	800907a <__gethex+0x136>
 8008fa8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008fac:	eb07 060a 	add.w	r6, r7, sl
 8008fb0:	f7ff ffb3 	bl	8008f1a <__hexdig_fun>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d062      	beq.n	800907e <__gethex+0x13a>
 8008fb8:	4633      	mov	r3, r6
 8008fba:	7818      	ldrb	r0, [r3, #0]
 8008fbc:	2830      	cmp	r0, #48	; 0x30
 8008fbe:	461f      	mov	r7, r3
 8008fc0:	f103 0301 	add.w	r3, r3, #1
 8008fc4:	d0f9      	beq.n	8008fba <__gethex+0x76>
 8008fc6:	f7ff ffa8 	bl	8008f1a <__hexdig_fun>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	fab0 f480 	clz	r4, r0
 8008fd0:	0964      	lsrs	r4, r4, #5
 8008fd2:	4635      	mov	r5, r6
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	463a      	mov	r2, r7
 8008fd8:	4616      	mov	r6, r2
 8008fda:	3201      	adds	r2, #1
 8008fdc:	7830      	ldrb	r0, [r6, #0]
 8008fde:	f7ff ff9c 	bl	8008f1a <__hexdig_fun>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1f8      	bne.n	8008fd8 <__gethex+0x94>
 8008fe6:	9901      	ldr	r1, [sp, #4]
 8008fe8:	4652      	mov	r2, sl
 8008fea:	4630      	mov	r0, r6
 8008fec:	f001 fa43 	bl	800a476 <strncmp>
 8008ff0:	b980      	cbnz	r0, 8009014 <__gethex+0xd0>
 8008ff2:	b94d      	cbnz	r5, 8009008 <__gethex+0xc4>
 8008ff4:	eb06 050a 	add.w	r5, r6, sl
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	3201      	adds	r2, #1
 8008ffe:	7830      	ldrb	r0, [r6, #0]
 8009000:	f7ff ff8b 	bl	8008f1a <__hexdig_fun>
 8009004:	2800      	cmp	r0, #0
 8009006:	d1f8      	bne.n	8008ffa <__gethex+0xb6>
 8009008:	1bad      	subs	r5, r5, r6
 800900a:	00ad      	lsls	r5, r5, #2
 800900c:	e004      	b.n	8009018 <__gethex+0xd4>
 800900e:	2400      	movs	r4, #0
 8009010:	4625      	mov	r5, r4
 8009012:	e7e0      	b.n	8008fd6 <__gethex+0x92>
 8009014:	2d00      	cmp	r5, #0
 8009016:	d1f7      	bne.n	8009008 <__gethex+0xc4>
 8009018:	7833      	ldrb	r3, [r6, #0]
 800901a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800901e:	2b50      	cmp	r3, #80	; 0x50
 8009020:	d13b      	bne.n	800909a <__gethex+0x156>
 8009022:	7873      	ldrb	r3, [r6, #1]
 8009024:	2b2b      	cmp	r3, #43	; 0x2b
 8009026:	d02c      	beq.n	8009082 <__gethex+0x13e>
 8009028:	2b2d      	cmp	r3, #45	; 0x2d
 800902a:	d02e      	beq.n	800908a <__gethex+0x146>
 800902c:	1c71      	adds	r1, r6, #1
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	7808      	ldrb	r0, [r1, #0]
 8009034:	f7ff ff71 	bl	8008f1a <__hexdig_fun>
 8009038:	1e43      	subs	r3, r0, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b18      	cmp	r3, #24
 800903e:	d82c      	bhi.n	800909a <__gethex+0x156>
 8009040:	f1a0 0210 	sub.w	r2, r0, #16
 8009044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009048:	f7ff ff67 	bl	8008f1a <__hexdig_fun>
 800904c:	1e43      	subs	r3, r0, #1
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b18      	cmp	r3, #24
 8009052:	d91d      	bls.n	8009090 <__gethex+0x14c>
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	d000      	beq.n	800905c <__gethex+0x118>
 800905a:	4252      	negs	r2, r2
 800905c:	4415      	add	r5, r2
 800905e:	f8cb 1000 	str.w	r1, [fp]
 8009062:	b1e4      	cbz	r4, 800909e <__gethex+0x15a>
 8009064:	9b00      	ldr	r3, [sp, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	bf14      	ite	ne
 800906a:	2700      	movne	r7, #0
 800906c:	2706      	moveq	r7, #6
 800906e:	4638      	mov	r0, r7
 8009070:	b009      	add	sp, #36	; 0x24
 8009072:	ecbd 8b02 	vpop	{d8}
 8009076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907a:	463e      	mov	r6, r7
 800907c:	4625      	mov	r5, r4
 800907e:	2401      	movs	r4, #1
 8009080:	e7ca      	b.n	8009018 <__gethex+0xd4>
 8009082:	f04f 0900 	mov.w	r9, #0
 8009086:	1cb1      	adds	r1, r6, #2
 8009088:	e7d3      	b.n	8009032 <__gethex+0xee>
 800908a:	f04f 0901 	mov.w	r9, #1
 800908e:	e7fa      	b.n	8009086 <__gethex+0x142>
 8009090:	230a      	movs	r3, #10
 8009092:	fb03 0202 	mla	r2, r3, r2, r0
 8009096:	3a10      	subs	r2, #16
 8009098:	e7d4      	b.n	8009044 <__gethex+0x100>
 800909a:	4631      	mov	r1, r6
 800909c:	e7df      	b.n	800905e <__gethex+0x11a>
 800909e:	1bf3      	subs	r3, r6, r7
 80090a0:	3b01      	subs	r3, #1
 80090a2:	4621      	mov	r1, r4
 80090a4:	2b07      	cmp	r3, #7
 80090a6:	dc0b      	bgt.n	80090c0 <__gethex+0x17c>
 80090a8:	ee18 0a10 	vmov	r0, s16
 80090ac:	f000 fa74 	bl	8009598 <_Balloc>
 80090b0:	4604      	mov	r4, r0
 80090b2:	b940      	cbnz	r0, 80090c6 <__gethex+0x182>
 80090b4:	4b5d      	ldr	r3, [pc, #372]	; (800922c <__gethex+0x2e8>)
 80090b6:	4602      	mov	r2, r0
 80090b8:	21de      	movs	r1, #222	; 0xde
 80090ba:	485d      	ldr	r0, [pc, #372]	; (8009230 <__gethex+0x2ec>)
 80090bc:	f001 fad0 	bl	800a660 <__assert_func>
 80090c0:	3101      	adds	r1, #1
 80090c2:	105b      	asrs	r3, r3, #1
 80090c4:	e7ee      	b.n	80090a4 <__gethex+0x160>
 80090c6:	f100 0914 	add.w	r9, r0, #20
 80090ca:	f04f 0b00 	mov.w	fp, #0
 80090ce:	f1ca 0301 	rsb	r3, sl, #1
 80090d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80090d6:	f8cd b000 	str.w	fp, [sp]
 80090da:	9306      	str	r3, [sp, #24]
 80090dc:	42b7      	cmp	r7, r6
 80090de:	d340      	bcc.n	8009162 <__gethex+0x21e>
 80090e0:	9802      	ldr	r0, [sp, #8]
 80090e2:	9b00      	ldr	r3, [sp, #0]
 80090e4:	f840 3b04 	str.w	r3, [r0], #4
 80090e8:	eba0 0009 	sub.w	r0, r0, r9
 80090ec:	1080      	asrs	r0, r0, #2
 80090ee:	0146      	lsls	r6, r0, #5
 80090f0:	6120      	str	r0, [r4, #16]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fb42 	bl	800977c <__hi0bits>
 80090f8:	1a30      	subs	r0, r6, r0
 80090fa:	f8d8 6000 	ldr.w	r6, [r8]
 80090fe:	42b0      	cmp	r0, r6
 8009100:	dd63      	ble.n	80091ca <__gethex+0x286>
 8009102:	1b87      	subs	r7, r0, r6
 8009104:	4639      	mov	r1, r7
 8009106:	4620      	mov	r0, r4
 8009108:	f000 fee6 	bl	8009ed8 <__any_on>
 800910c:	4682      	mov	sl, r0
 800910e:	b1a8      	cbz	r0, 800913c <__gethex+0x1f8>
 8009110:	1e7b      	subs	r3, r7, #1
 8009112:	1159      	asrs	r1, r3, #5
 8009114:	f003 021f 	and.w	r2, r3, #31
 8009118:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800911c:	f04f 0a01 	mov.w	sl, #1
 8009120:	fa0a f202 	lsl.w	r2, sl, r2
 8009124:	420a      	tst	r2, r1
 8009126:	d009      	beq.n	800913c <__gethex+0x1f8>
 8009128:	4553      	cmp	r3, sl
 800912a:	dd05      	ble.n	8009138 <__gethex+0x1f4>
 800912c:	1eb9      	subs	r1, r7, #2
 800912e:	4620      	mov	r0, r4
 8009130:	f000 fed2 	bl	8009ed8 <__any_on>
 8009134:	2800      	cmp	r0, #0
 8009136:	d145      	bne.n	80091c4 <__gethex+0x280>
 8009138:	f04f 0a02 	mov.w	sl, #2
 800913c:	4639      	mov	r1, r7
 800913e:	4620      	mov	r0, r4
 8009140:	f7ff fe99 	bl	8008e76 <rshift>
 8009144:	443d      	add	r5, r7
 8009146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800914a:	42ab      	cmp	r3, r5
 800914c:	da4c      	bge.n	80091e8 <__gethex+0x2a4>
 800914e:	ee18 0a10 	vmov	r0, s16
 8009152:	4621      	mov	r1, r4
 8009154:	f000 fa60 	bl	8009618 <_Bfree>
 8009158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800915a:	2300      	movs	r3, #0
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	27a3      	movs	r7, #163	; 0xa3
 8009160:	e785      	b.n	800906e <__gethex+0x12a>
 8009162:	1e73      	subs	r3, r6, #1
 8009164:	9a05      	ldr	r2, [sp, #20]
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800916c:	4293      	cmp	r3, r2
 800916e:	d019      	beq.n	80091a4 <__gethex+0x260>
 8009170:	f1bb 0f20 	cmp.w	fp, #32
 8009174:	d107      	bne.n	8009186 <__gethex+0x242>
 8009176:	9b02      	ldr	r3, [sp, #8]
 8009178:	9a00      	ldr	r2, [sp, #0]
 800917a:	f843 2b04 	str.w	r2, [r3], #4
 800917e:	9302      	str	r3, [sp, #8]
 8009180:	2300      	movs	r3, #0
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	469b      	mov	fp, r3
 8009186:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800918a:	f7ff fec6 	bl	8008f1a <__hexdig_fun>
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	f000 000f 	and.w	r0, r0, #15
 8009194:	fa00 f00b 	lsl.w	r0, r0, fp
 8009198:	4303      	orrs	r3, r0
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	f10b 0b04 	add.w	fp, fp, #4
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	e00d      	b.n	80091c0 <__gethex+0x27c>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	9a06      	ldr	r2, [sp, #24]
 80091a8:	4413      	add	r3, r2
 80091aa:	42bb      	cmp	r3, r7
 80091ac:	d3e0      	bcc.n	8009170 <__gethex+0x22c>
 80091ae:	4618      	mov	r0, r3
 80091b0:	9901      	ldr	r1, [sp, #4]
 80091b2:	9307      	str	r3, [sp, #28]
 80091b4:	4652      	mov	r2, sl
 80091b6:	f001 f95e 	bl	800a476 <strncmp>
 80091ba:	9b07      	ldr	r3, [sp, #28]
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1d7      	bne.n	8009170 <__gethex+0x22c>
 80091c0:	461e      	mov	r6, r3
 80091c2:	e78b      	b.n	80090dc <__gethex+0x198>
 80091c4:	f04f 0a03 	mov.w	sl, #3
 80091c8:	e7b8      	b.n	800913c <__gethex+0x1f8>
 80091ca:	da0a      	bge.n	80091e2 <__gethex+0x29e>
 80091cc:	1a37      	subs	r7, r6, r0
 80091ce:	4621      	mov	r1, r4
 80091d0:	ee18 0a10 	vmov	r0, s16
 80091d4:	463a      	mov	r2, r7
 80091d6:	f000 fc3b 	bl	8009a50 <__lshift>
 80091da:	1bed      	subs	r5, r5, r7
 80091dc:	4604      	mov	r4, r0
 80091de:	f100 0914 	add.w	r9, r0, #20
 80091e2:	f04f 0a00 	mov.w	sl, #0
 80091e6:	e7ae      	b.n	8009146 <__gethex+0x202>
 80091e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80091ec:	42a8      	cmp	r0, r5
 80091ee:	dd72      	ble.n	80092d6 <__gethex+0x392>
 80091f0:	1b45      	subs	r5, r0, r5
 80091f2:	42ae      	cmp	r6, r5
 80091f4:	dc36      	bgt.n	8009264 <__gethex+0x320>
 80091f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d02a      	beq.n	8009254 <__gethex+0x310>
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d02c      	beq.n	800925c <__gethex+0x318>
 8009202:	2b01      	cmp	r3, #1
 8009204:	d11c      	bne.n	8009240 <__gethex+0x2fc>
 8009206:	42ae      	cmp	r6, r5
 8009208:	d11a      	bne.n	8009240 <__gethex+0x2fc>
 800920a:	2e01      	cmp	r6, #1
 800920c:	d112      	bne.n	8009234 <__gethex+0x2f0>
 800920e:	9a04      	ldr	r2, [sp, #16]
 8009210:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	2301      	movs	r3, #1
 8009218:	6123      	str	r3, [r4, #16]
 800921a:	f8c9 3000 	str.w	r3, [r9]
 800921e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009220:	2762      	movs	r7, #98	; 0x62
 8009222:	601c      	str	r4, [r3, #0]
 8009224:	e723      	b.n	800906e <__gethex+0x12a>
 8009226:	bf00      	nop
 8009228:	0800ad18 	.word	0x0800ad18
 800922c:	0800ac3f 	.word	0x0800ac3f
 8009230:	0800acb0 	.word	0x0800acb0
 8009234:	1e71      	subs	r1, r6, #1
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fe4e 	bl	8009ed8 <__any_on>
 800923c:	2800      	cmp	r0, #0
 800923e:	d1e6      	bne.n	800920e <__gethex+0x2ca>
 8009240:	ee18 0a10 	vmov	r0, s16
 8009244:	4621      	mov	r1, r4
 8009246:	f000 f9e7 	bl	8009618 <_Bfree>
 800924a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800924c:	2300      	movs	r3, #0
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	2750      	movs	r7, #80	; 0x50
 8009252:	e70c      	b.n	800906e <__gethex+0x12a>
 8009254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f2      	bne.n	8009240 <__gethex+0x2fc>
 800925a:	e7d8      	b.n	800920e <__gethex+0x2ca>
 800925c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1d5      	bne.n	800920e <__gethex+0x2ca>
 8009262:	e7ed      	b.n	8009240 <__gethex+0x2fc>
 8009264:	1e6f      	subs	r7, r5, #1
 8009266:	f1ba 0f00 	cmp.w	sl, #0
 800926a:	d131      	bne.n	80092d0 <__gethex+0x38c>
 800926c:	b127      	cbz	r7, 8009278 <__gethex+0x334>
 800926e:	4639      	mov	r1, r7
 8009270:	4620      	mov	r0, r4
 8009272:	f000 fe31 	bl	8009ed8 <__any_on>
 8009276:	4682      	mov	sl, r0
 8009278:	117b      	asrs	r3, r7, #5
 800927a:	2101      	movs	r1, #1
 800927c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009280:	f007 071f 	and.w	r7, r7, #31
 8009284:	fa01 f707 	lsl.w	r7, r1, r7
 8009288:	421f      	tst	r7, r3
 800928a:	4629      	mov	r1, r5
 800928c:	4620      	mov	r0, r4
 800928e:	bf18      	it	ne
 8009290:	f04a 0a02 	orrne.w	sl, sl, #2
 8009294:	1b76      	subs	r6, r6, r5
 8009296:	f7ff fdee 	bl	8008e76 <rshift>
 800929a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800929e:	2702      	movs	r7, #2
 80092a0:	f1ba 0f00 	cmp.w	sl, #0
 80092a4:	d048      	beq.n	8009338 <__gethex+0x3f4>
 80092a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d015      	beq.n	80092da <__gethex+0x396>
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d017      	beq.n	80092e2 <__gethex+0x39e>
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d109      	bne.n	80092ca <__gethex+0x386>
 80092b6:	f01a 0f02 	tst.w	sl, #2
 80092ba:	d006      	beq.n	80092ca <__gethex+0x386>
 80092bc:	f8d9 0000 	ldr.w	r0, [r9]
 80092c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80092c4:	f01a 0f01 	tst.w	sl, #1
 80092c8:	d10e      	bne.n	80092e8 <__gethex+0x3a4>
 80092ca:	f047 0710 	orr.w	r7, r7, #16
 80092ce:	e033      	b.n	8009338 <__gethex+0x3f4>
 80092d0:	f04f 0a01 	mov.w	sl, #1
 80092d4:	e7d0      	b.n	8009278 <__gethex+0x334>
 80092d6:	2701      	movs	r7, #1
 80092d8:	e7e2      	b.n	80092a0 <__gethex+0x35c>
 80092da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092dc:	f1c3 0301 	rsb	r3, r3, #1
 80092e0:	9315      	str	r3, [sp, #84]	; 0x54
 80092e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f0      	beq.n	80092ca <__gethex+0x386>
 80092e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80092ec:	f104 0314 	add.w	r3, r4, #20
 80092f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80092f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80092f8:	f04f 0c00 	mov.w	ip, #0
 80092fc:	4618      	mov	r0, r3
 80092fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009302:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009306:	d01c      	beq.n	8009342 <__gethex+0x3fe>
 8009308:	3201      	adds	r2, #1
 800930a:	6002      	str	r2, [r0, #0]
 800930c:	2f02      	cmp	r7, #2
 800930e:	f104 0314 	add.w	r3, r4, #20
 8009312:	d13f      	bne.n	8009394 <__gethex+0x450>
 8009314:	f8d8 2000 	ldr.w	r2, [r8]
 8009318:	3a01      	subs	r2, #1
 800931a:	42b2      	cmp	r2, r6
 800931c:	d10a      	bne.n	8009334 <__gethex+0x3f0>
 800931e:	1171      	asrs	r1, r6, #5
 8009320:	2201      	movs	r2, #1
 8009322:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009326:	f006 061f 	and.w	r6, r6, #31
 800932a:	fa02 f606 	lsl.w	r6, r2, r6
 800932e:	421e      	tst	r6, r3
 8009330:	bf18      	it	ne
 8009332:	4617      	movne	r7, r2
 8009334:	f047 0720 	orr.w	r7, r7, #32
 8009338:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800933a:	601c      	str	r4, [r3, #0]
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	601d      	str	r5, [r3, #0]
 8009340:	e695      	b.n	800906e <__gethex+0x12a>
 8009342:	4299      	cmp	r1, r3
 8009344:	f843 cc04 	str.w	ip, [r3, #-4]
 8009348:	d8d8      	bhi.n	80092fc <__gethex+0x3b8>
 800934a:	68a3      	ldr	r3, [r4, #8]
 800934c:	459b      	cmp	fp, r3
 800934e:	db19      	blt.n	8009384 <__gethex+0x440>
 8009350:	6861      	ldr	r1, [r4, #4]
 8009352:	ee18 0a10 	vmov	r0, s16
 8009356:	3101      	adds	r1, #1
 8009358:	f000 f91e 	bl	8009598 <_Balloc>
 800935c:	4681      	mov	r9, r0
 800935e:	b918      	cbnz	r0, 8009368 <__gethex+0x424>
 8009360:	4b1a      	ldr	r3, [pc, #104]	; (80093cc <__gethex+0x488>)
 8009362:	4602      	mov	r2, r0
 8009364:	2184      	movs	r1, #132	; 0x84
 8009366:	e6a8      	b.n	80090ba <__gethex+0x176>
 8009368:	6922      	ldr	r2, [r4, #16]
 800936a:	3202      	adds	r2, #2
 800936c:	f104 010c 	add.w	r1, r4, #12
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	300c      	adds	r0, #12
 8009374:	f7fd fb48 	bl	8006a08 <memcpy>
 8009378:	4621      	mov	r1, r4
 800937a:	ee18 0a10 	vmov	r0, s16
 800937e:	f000 f94b 	bl	8009618 <_Bfree>
 8009382:	464c      	mov	r4, r9
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800938c:	6122      	str	r2, [r4, #16]
 800938e:	2201      	movs	r2, #1
 8009390:	615a      	str	r2, [r3, #20]
 8009392:	e7bb      	b.n	800930c <__gethex+0x3c8>
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	455a      	cmp	r2, fp
 8009398:	dd0b      	ble.n	80093b2 <__gethex+0x46e>
 800939a:	2101      	movs	r1, #1
 800939c:	4620      	mov	r0, r4
 800939e:	f7ff fd6a 	bl	8008e76 <rshift>
 80093a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093a6:	3501      	adds	r5, #1
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	f6ff aed0 	blt.w	800914e <__gethex+0x20a>
 80093ae:	2701      	movs	r7, #1
 80093b0:	e7c0      	b.n	8009334 <__gethex+0x3f0>
 80093b2:	f016 061f 	ands.w	r6, r6, #31
 80093b6:	d0fa      	beq.n	80093ae <__gethex+0x46a>
 80093b8:	4453      	add	r3, sl
 80093ba:	f1c6 0620 	rsb	r6, r6, #32
 80093be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80093c2:	f000 f9db 	bl	800977c <__hi0bits>
 80093c6:	42b0      	cmp	r0, r6
 80093c8:	dbe7      	blt.n	800939a <__gethex+0x456>
 80093ca:	e7f0      	b.n	80093ae <__gethex+0x46a>
 80093cc:	0800ac3f 	.word	0x0800ac3f

080093d0 <L_shift>:
 80093d0:	f1c2 0208 	rsb	r2, r2, #8
 80093d4:	0092      	lsls	r2, r2, #2
 80093d6:	b570      	push	{r4, r5, r6, lr}
 80093d8:	f1c2 0620 	rsb	r6, r2, #32
 80093dc:	6843      	ldr	r3, [r0, #4]
 80093de:	6804      	ldr	r4, [r0, #0]
 80093e0:	fa03 f506 	lsl.w	r5, r3, r6
 80093e4:	432c      	orrs	r4, r5
 80093e6:	40d3      	lsrs	r3, r2
 80093e8:	6004      	str	r4, [r0, #0]
 80093ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80093ee:	4288      	cmp	r0, r1
 80093f0:	d3f4      	bcc.n	80093dc <L_shift+0xc>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}

080093f4 <__match>:
 80093f4:	b530      	push	{r4, r5, lr}
 80093f6:	6803      	ldr	r3, [r0, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093fe:	b914      	cbnz	r4, 8009406 <__match+0x12>
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	2001      	movs	r0, #1
 8009404:	bd30      	pop	{r4, r5, pc}
 8009406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800940a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800940e:	2d19      	cmp	r5, #25
 8009410:	bf98      	it	ls
 8009412:	3220      	addls	r2, #32
 8009414:	42a2      	cmp	r2, r4
 8009416:	d0f0      	beq.n	80093fa <__match+0x6>
 8009418:	2000      	movs	r0, #0
 800941a:	e7f3      	b.n	8009404 <__match+0x10>

0800941c <__hexnan>:
 800941c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	680b      	ldr	r3, [r1, #0]
 8009422:	115e      	asrs	r6, r3, #5
 8009424:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009428:	f013 031f 	ands.w	r3, r3, #31
 800942c:	b087      	sub	sp, #28
 800942e:	bf18      	it	ne
 8009430:	3604      	addne	r6, #4
 8009432:	2500      	movs	r5, #0
 8009434:	1f37      	subs	r7, r6, #4
 8009436:	4690      	mov	r8, r2
 8009438:	6802      	ldr	r2, [r0, #0]
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	4682      	mov	sl, r0
 800943e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009442:	46b9      	mov	r9, r7
 8009444:	463c      	mov	r4, r7
 8009446:	9502      	str	r5, [sp, #8]
 8009448:	46ab      	mov	fp, r5
 800944a:	7851      	ldrb	r1, [r2, #1]
 800944c:	1c53      	adds	r3, r2, #1
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	b341      	cbz	r1, 80094a4 <__hexnan+0x88>
 8009452:	4608      	mov	r0, r1
 8009454:	9205      	str	r2, [sp, #20]
 8009456:	9104      	str	r1, [sp, #16]
 8009458:	f7ff fd5f 	bl	8008f1a <__hexdig_fun>
 800945c:	2800      	cmp	r0, #0
 800945e:	d14f      	bne.n	8009500 <__hexnan+0xe4>
 8009460:	9904      	ldr	r1, [sp, #16]
 8009462:	9a05      	ldr	r2, [sp, #20]
 8009464:	2920      	cmp	r1, #32
 8009466:	d818      	bhi.n	800949a <__hexnan+0x7e>
 8009468:	9b02      	ldr	r3, [sp, #8]
 800946a:	459b      	cmp	fp, r3
 800946c:	dd13      	ble.n	8009496 <__hexnan+0x7a>
 800946e:	454c      	cmp	r4, r9
 8009470:	d206      	bcs.n	8009480 <__hexnan+0x64>
 8009472:	2d07      	cmp	r5, #7
 8009474:	dc04      	bgt.n	8009480 <__hexnan+0x64>
 8009476:	462a      	mov	r2, r5
 8009478:	4649      	mov	r1, r9
 800947a:	4620      	mov	r0, r4
 800947c:	f7ff ffa8 	bl	80093d0 <L_shift>
 8009480:	4544      	cmp	r4, r8
 8009482:	d950      	bls.n	8009526 <__hexnan+0x10a>
 8009484:	2300      	movs	r3, #0
 8009486:	f1a4 0904 	sub.w	r9, r4, #4
 800948a:	f844 3c04 	str.w	r3, [r4, #-4]
 800948e:	f8cd b008 	str.w	fp, [sp, #8]
 8009492:	464c      	mov	r4, r9
 8009494:	461d      	mov	r5, r3
 8009496:	9a03      	ldr	r2, [sp, #12]
 8009498:	e7d7      	b.n	800944a <__hexnan+0x2e>
 800949a:	2929      	cmp	r1, #41	; 0x29
 800949c:	d156      	bne.n	800954c <__hexnan+0x130>
 800949e:	3202      	adds	r2, #2
 80094a0:	f8ca 2000 	str.w	r2, [sl]
 80094a4:	f1bb 0f00 	cmp.w	fp, #0
 80094a8:	d050      	beq.n	800954c <__hexnan+0x130>
 80094aa:	454c      	cmp	r4, r9
 80094ac:	d206      	bcs.n	80094bc <__hexnan+0xa0>
 80094ae:	2d07      	cmp	r5, #7
 80094b0:	dc04      	bgt.n	80094bc <__hexnan+0xa0>
 80094b2:	462a      	mov	r2, r5
 80094b4:	4649      	mov	r1, r9
 80094b6:	4620      	mov	r0, r4
 80094b8:	f7ff ff8a 	bl	80093d0 <L_shift>
 80094bc:	4544      	cmp	r4, r8
 80094be:	d934      	bls.n	800952a <__hexnan+0x10e>
 80094c0:	f1a8 0204 	sub.w	r2, r8, #4
 80094c4:	4623      	mov	r3, r4
 80094c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80094ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80094ce:	429f      	cmp	r7, r3
 80094d0:	d2f9      	bcs.n	80094c6 <__hexnan+0xaa>
 80094d2:	1b3b      	subs	r3, r7, r4
 80094d4:	f023 0303 	bic.w	r3, r3, #3
 80094d8:	3304      	adds	r3, #4
 80094da:	3401      	adds	r4, #1
 80094dc:	3e03      	subs	r6, #3
 80094de:	42b4      	cmp	r4, r6
 80094e0:	bf88      	it	hi
 80094e2:	2304      	movhi	r3, #4
 80094e4:	4443      	add	r3, r8
 80094e6:	2200      	movs	r2, #0
 80094e8:	f843 2b04 	str.w	r2, [r3], #4
 80094ec:	429f      	cmp	r7, r3
 80094ee:	d2fb      	bcs.n	80094e8 <__hexnan+0xcc>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	b91b      	cbnz	r3, 80094fc <__hexnan+0xe0>
 80094f4:	4547      	cmp	r7, r8
 80094f6:	d127      	bne.n	8009548 <__hexnan+0x12c>
 80094f8:	2301      	movs	r3, #1
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	2005      	movs	r0, #5
 80094fe:	e026      	b.n	800954e <__hexnan+0x132>
 8009500:	3501      	adds	r5, #1
 8009502:	2d08      	cmp	r5, #8
 8009504:	f10b 0b01 	add.w	fp, fp, #1
 8009508:	dd06      	ble.n	8009518 <__hexnan+0xfc>
 800950a:	4544      	cmp	r4, r8
 800950c:	d9c3      	bls.n	8009496 <__hexnan+0x7a>
 800950e:	2300      	movs	r3, #0
 8009510:	f844 3c04 	str.w	r3, [r4, #-4]
 8009514:	2501      	movs	r5, #1
 8009516:	3c04      	subs	r4, #4
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	f000 000f 	and.w	r0, r0, #15
 800951e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009522:	6022      	str	r2, [r4, #0]
 8009524:	e7b7      	b.n	8009496 <__hexnan+0x7a>
 8009526:	2508      	movs	r5, #8
 8009528:	e7b5      	b.n	8009496 <__hexnan+0x7a>
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0df      	beq.n	80094f0 <__hexnan+0xd4>
 8009530:	f04f 32ff 	mov.w	r2, #4294967295
 8009534:	f1c3 0320 	rsb	r3, r3, #32
 8009538:	fa22 f303 	lsr.w	r3, r2, r3
 800953c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009540:	401a      	ands	r2, r3
 8009542:	f846 2c04 	str.w	r2, [r6, #-4]
 8009546:	e7d3      	b.n	80094f0 <__hexnan+0xd4>
 8009548:	3f04      	subs	r7, #4
 800954a:	e7d1      	b.n	80094f0 <__hexnan+0xd4>
 800954c:	2004      	movs	r0, #4
 800954e:	b007      	add	sp, #28
 8009550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009554 <_localeconv_r>:
 8009554:	4800      	ldr	r0, [pc, #0]	; (8009558 <_localeconv_r+0x4>)
 8009556:	4770      	bx	lr
 8009558:	20000168 	.word	0x20000168

0800955c <__retarget_lock_init_recursive>:
 800955c:	4770      	bx	lr

0800955e <__retarget_lock_acquire_recursive>:
 800955e:	4770      	bx	lr

08009560 <__retarget_lock_release_recursive>:
 8009560:	4770      	bx	lr
	...

08009564 <malloc>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <malloc+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f000 bd59 	b.w	800a020 <_malloc_r>
 800956e:	bf00      	nop
 8009570:	20000010 	.word	0x20000010

08009574 <__ascii_mbtowc>:
 8009574:	b082      	sub	sp, #8
 8009576:	b901      	cbnz	r1, 800957a <__ascii_mbtowc+0x6>
 8009578:	a901      	add	r1, sp, #4
 800957a:	b142      	cbz	r2, 800958e <__ascii_mbtowc+0x1a>
 800957c:	b14b      	cbz	r3, 8009592 <__ascii_mbtowc+0x1e>
 800957e:	7813      	ldrb	r3, [r2, #0]
 8009580:	600b      	str	r3, [r1, #0]
 8009582:	7812      	ldrb	r2, [r2, #0]
 8009584:	1e10      	subs	r0, r2, #0
 8009586:	bf18      	it	ne
 8009588:	2001      	movne	r0, #1
 800958a:	b002      	add	sp, #8
 800958c:	4770      	bx	lr
 800958e:	4610      	mov	r0, r2
 8009590:	e7fb      	b.n	800958a <__ascii_mbtowc+0x16>
 8009592:	f06f 0001 	mvn.w	r0, #1
 8009596:	e7f8      	b.n	800958a <__ascii_mbtowc+0x16>

08009598 <_Balloc>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800959c:	4604      	mov	r4, r0
 800959e:	460d      	mov	r5, r1
 80095a0:	b976      	cbnz	r6, 80095c0 <_Balloc+0x28>
 80095a2:	2010      	movs	r0, #16
 80095a4:	f7ff ffde 	bl	8009564 <malloc>
 80095a8:	4602      	mov	r2, r0
 80095aa:	6260      	str	r0, [r4, #36]	; 0x24
 80095ac:	b920      	cbnz	r0, 80095b8 <_Balloc+0x20>
 80095ae:	4b18      	ldr	r3, [pc, #96]	; (8009610 <_Balloc+0x78>)
 80095b0:	4818      	ldr	r0, [pc, #96]	; (8009614 <_Balloc+0x7c>)
 80095b2:	2166      	movs	r1, #102	; 0x66
 80095b4:	f001 f854 	bl	800a660 <__assert_func>
 80095b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095bc:	6006      	str	r6, [r0, #0]
 80095be:	60c6      	str	r6, [r0, #12]
 80095c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095c2:	68f3      	ldr	r3, [r6, #12]
 80095c4:	b183      	cbz	r3, 80095e8 <_Balloc+0x50>
 80095c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ce:	b9b8      	cbnz	r0, 8009600 <_Balloc+0x68>
 80095d0:	2101      	movs	r1, #1
 80095d2:	fa01 f605 	lsl.w	r6, r1, r5
 80095d6:	1d72      	adds	r2, r6, #5
 80095d8:	0092      	lsls	r2, r2, #2
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fc9d 	bl	8009f1a <_calloc_r>
 80095e0:	b160      	cbz	r0, 80095fc <_Balloc+0x64>
 80095e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095e6:	e00e      	b.n	8009606 <_Balloc+0x6e>
 80095e8:	2221      	movs	r2, #33	; 0x21
 80095ea:	2104      	movs	r1, #4
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fc94 	bl	8009f1a <_calloc_r>
 80095f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f4:	60f0      	str	r0, [r6, #12]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e4      	bne.n	80095c6 <_Balloc+0x2e>
 80095fc:	2000      	movs	r0, #0
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	6802      	ldr	r2, [r0, #0]
 8009602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009606:	2300      	movs	r3, #0
 8009608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800960c:	e7f7      	b.n	80095fe <_Balloc+0x66>
 800960e:	bf00      	nop
 8009610:	0800abcd 	.word	0x0800abcd
 8009614:	0800ad2c 	.word	0x0800ad2c

08009618 <_Bfree>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800961c:	4605      	mov	r5, r0
 800961e:	460c      	mov	r4, r1
 8009620:	b976      	cbnz	r6, 8009640 <_Bfree+0x28>
 8009622:	2010      	movs	r0, #16
 8009624:	f7ff ff9e 	bl	8009564 <malloc>
 8009628:	4602      	mov	r2, r0
 800962a:	6268      	str	r0, [r5, #36]	; 0x24
 800962c:	b920      	cbnz	r0, 8009638 <_Bfree+0x20>
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <_Bfree+0x3c>)
 8009630:	4809      	ldr	r0, [pc, #36]	; (8009658 <_Bfree+0x40>)
 8009632:	218a      	movs	r1, #138	; 0x8a
 8009634:	f001 f814 	bl	800a660 <__assert_func>
 8009638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800963c:	6006      	str	r6, [r0, #0]
 800963e:	60c6      	str	r6, [r0, #12]
 8009640:	b13c      	cbz	r4, 8009652 <_Bfree+0x3a>
 8009642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009644:	6862      	ldr	r2, [r4, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800964c:	6021      	str	r1, [r4, #0]
 800964e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009652:	bd70      	pop	{r4, r5, r6, pc}
 8009654:	0800abcd 	.word	0x0800abcd
 8009658:	0800ad2c 	.word	0x0800ad2c

0800965c <__multadd>:
 800965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	690d      	ldr	r5, [r1, #16]
 8009662:	4607      	mov	r7, r0
 8009664:	460c      	mov	r4, r1
 8009666:	461e      	mov	r6, r3
 8009668:	f101 0c14 	add.w	ip, r1, #20
 800966c:	2000      	movs	r0, #0
 800966e:	f8dc 3000 	ldr.w	r3, [ip]
 8009672:	b299      	uxth	r1, r3
 8009674:	fb02 6101 	mla	r1, r2, r1, r6
 8009678:	0c1e      	lsrs	r6, r3, #16
 800967a:	0c0b      	lsrs	r3, r1, #16
 800967c:	fb02 3306 	mla	r3, r2, r6, r3
 8009680:	b289      	uxth	r1, r1
 8009682:	3001      	adds	r0, #1
 8009684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009688:	4285      	cmp	r5, r0
 800968a:	f84c 1b04 	str.w	r1, [ip], #4
 800968e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009692:	dcec      	bgt.n	800966e <__multadd+0x12>
 8009694:	b30e      	cbz	r6, 80096da <__multadd+0x7e>
 8009696:	68a3      	ldr	r3, [r4, #8]
 8009698:	42ab      	cmp	r3, r5
 800969a:	dc19      	bgt.n	80096d0 <__multadd+0x74>
 800969c:	6861      	ldr	r1, [r4, #4]
 800969e:	4638      	mov	r0, r7
 80096a0:	3101      	adds	r1, #1
 80096a2:	f7ff ff79 	bl	8009598 <_Balloc>
 80096a6:	4680      	mov	r8, r0
 80096a8:	b928      	cbnz	r0, 80096b6 <__multadd+0x5a>
 80096aa:	4602      	mov	r2, r0
 80096ac:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <__multadd+0x84>)
 80096ae:	480d      	ldr	r0, [pc, #52]	; (80096e4 <__multadd+0x88>)
 80096b0:	21b5      	movs	r1, #181	; 0xb5
 80096b2:	f000 ffd5 	bl	800a660 <__assert_func>
 80096b6:	6922      	ldr	r2, [r4, #16]
 80096b8:	3202      	adds	r2, #2
 80096ba:	f104 010c 	add.w	r1, r4, #12
 80096be:	0092      	lsls	r2, r2, #2
 80096c0:	300c      	adds	r0, #12
 80096c2:	f7fd f9a1 	bl	8006a08 <memcpy>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4638      	mov	r0, r7
 80096ca:	f7ff ffa5 	bl	8009618 <_Bfree>
 80096ce:	4644      	mov	r4, r8
 80096d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096d4:	3501      	adds	r5, #1
 80096d6:	615e      	str	r6, [r3, #20]
 80096d8:	6125      	str	r5, [r4, #16]
 80096da:	4620      	mov	r0, r4
 80096dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e0:	0800ac3f 	.word	0x0800ac3f
 80096e4:	0800ad2c 	.word	0x0800ad2c

080096e8 <__s2b>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	460c      	mov	r4, r1
 80096ee:	4615      	mov	r5, r2
 80096f0:	461f      	mov	r7, r3
 80096f2:	2209      	movs	r2, #9
 80096f4:	3308      	adds	r3, #8
 80096f6:	4606      	mov	r6, r0
 80096f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096fc:	2100      	movs	r1, #0
 80096fe:	2201      	movs	r2, #1
 8009700:	429a      	cmp	r2, r3
 8009702:	db09      	blt.n	8009718 <__s2b+0x30>
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff ff47 	bl	8009598 <_Balloc>
 800970a:	b940      	cbnz	r0, 800971e <__s2b+0x36>
 800970c:	4602      	mov	r2, r0
 800970e:	4b19      	ldr	r3, [pc, #100]	; (8009774 <__s2b+0x8c>)
 8009710:	4819      	ldr	r0, [pc, #100]	; (8009778 <__s2b+0x90>)
 8009712:	21ce      	movs	r1, #206	; 0xce
 8009714:	f000 ffa4 	bl	800a660 <__assert_func>
 8009718:	0052      	lsls	r2, r2, #1
 800971a:	3101      	adds	r1, #1
 800971c:	e7f0      	b.n	8009700 <__s2b+0x18>
 800971e:	9b08      	ldr	r3, [sp, #32]
 8009720:	6143      	str	r3, [r0, #20]
 8009722:	2d09      	cmp	r5, #9
 8009724:	f04f 0301 	mov.w	r3, #1
 8009728:	6103      	str	r3, [r0, #16]
 800972a:	dd16      	ble.n	800975a <__s2b+0x72>
 800972c:	f104 0909 	add.w	r9, r4, #9
 8009730:	46c8      	mov	r8, r9
 8009732:	442c      	add	r4, r5
 8009734:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009738:	4601      	mov	r1, r0
 800973a:	3b30      	subs	r3, #48	; 0x30
 800973c:	220a      	movs	r2, #10
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff8c 	bl	800965c <__multadd>
 8009744:	45a0      	cmp	r8, r4
 8009746:	d1f5      	bne.n	8009734 <__s2b+0x4c>
 8009748:	f1a5 0408 	sub.w	r4, r5, #8
 800974c:	444c      	add	r4, r9
 800974e:	1b2d      	subs	r5, r5, r4
 8009750:	1963      	adds	r3, r4, r5
 8009752:	42bb      	cmp	r3, r7
 8009754:	db04      	blt.n	8009760 <__s2b+0x78>
 8009756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975a:	340a      	adds	r4, #10
 800975c:	2509      	movs	r5, #9
 800975e:	e7f6      	b.n	800974e <__s2b+0x66>
 8009760:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009764:	4601      	mov	r1, r0
 8009766:	3b30      	subs	r3, #48	; 0x30
 8009768:	220a      	movs	r2, #10
 800976a:	4630      	mov	r0, r6
 800976c:	f7ff ff76 	bl	800965c <__multadd>
 8009770:	e7ee      	b.n	8009750 <__s2b+0x68>
 8009772:	bf00      	nop
 8009774:	0800ac3f 	.word	0x0800ac3f
 8009778:	0800ad2c 	.word	0x0800ad2c

0800977c <__hi0bits>:
 800977c:	0c03      	lsrs	r3, r0, #16
 800977e:	041b      	lsls	r3, r3, #16
 8009780:	b9d3      	cbnz	r3, 80097b8 <__hi0bits+0x3c>
 8009782:	0400      	lsls	r0, r0, #16
 8009784:	2310      	movs	r3, #16
 8009786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800978a:	bf04      	itt	eq
 800978c:	0200      	lsleq	r0, r0, #8
 800978e:	3308      	addeq	r3, #8
 8009790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009794:	bf04      	itt	eq
 8009796:	0100      	lsleq	r0, r0, #4
 8009798:	3304      	addeq	r3, #4
 800979a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800979e:	bf04      	itt	eq
 80097a0:	0080      	lsleq	r0, r0, #2
 80097a2:	3302      	addeq	r3, #2
 80097a4:	2800      	cmp	r0, #0
 80097a6:	db05      	blt.n	80097b4 <__hi0bits+0x38>
 80097a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097ac:	f103 0301 	add.w	r3, r3, #1
 80097b0:	bf08      	it	eq
 80097b2:	2320      	moveq	r3, #32
 80097b4:	4618      	mov	r0, r3
 80097b6:	4770      	bx	lr
 80097b8:	2300      	movs	r3, #0
 80097ba:	e7e4      	b.n	8009786 <__hi0bits+0xa>

080097bc <__lo0bits>:
 80097bc:	6803      	ldr	r3, [r0, #0]
 80097be:	f013 0207 	ands.w	r2, r3, #7
 80097c2:	4601      	mov	r1, r0
 80097c4:	d00b      	beq.n	80097de <__lo0bits+0x22>
 80097c6:	07da      	lsls	r2, r3, #31
 80097c8:	d423      	bmi.n	8009812 <__lo0bits+0x56>
 80097ca:	0798      	lsls	r0, r3, #30
 80097cc:	bf49      	itett	mi
 80097ce:	085b      	lsrmi	r3, r3, #1
 80097d0:	089b      	lsrpl	r3, r3, #2
 80097d2:	2001      	movmi	r0, #1
 80097d4:	600b      	strmi	r3, [r1, #0]
 80097d6:	bf5c      	itt	pl
 80097d8:	600b      	strpl	r3, [r1, #0]
 80097da:	2002      	movpl	r0, #2
 80097dc:	4770      	bx	lr
 80097de:	b298      	uxth	r0, r3
 80097e0:	b9a8      	cbnz	r0, 800980e <__lo0bits+0x52>
 80097e2:	0c1b      	lsrs	r3, r3, #16
 80097e4:	2010      	movs	r0, #16
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	b90a      	cbnz	r2, 80097ee <__lo0bits+0x32>
 80097ea:	3008      	adds	r0, #8
 80097ec:	0a1b      	lsrs	r3, r3, #8
 80097ee:	071a      	lsls	r2, r3, #28
 80097f0:	bf04      	itt	eq
 80097f2:	091b      	lsreq	r3, r3, #4
 80097f4:	3004      	addeq	r0, #4
 80097f6:	079a      	lsls	r2, r3, #30
 80097f8:	bf04      	itt	eq
 80097fa:	089b      	lsreq	r3, r3, #2
 80097fc:	3002      	addeq	r0, #2
 80097fe:	07da      	lsls	r2, r3, #31
 8009800:	d403      	bmi.n	800980a <__lo0bits+0x4e>
 8009802:	085b      	lsrs	r3, r3, #1
 8009804:	f100 0001 	add.w	r0, r0, #1
 8009808:	d005      	beq.n	8009816 <__lo0bits+0x5a>
 800980a:	600b      	str	r3, [r1, #0]
 800980c:	4770      	bx	lr
 800980e:	4610      	mov	r0, r2
 8009810:	e7e9      	b.n	80097e6 <__lo0bits+0x2a>
 8009812:	2000      	movs	r0, #0
 8009814:	4770      	bx	lr
 8009816:	2020      	movs	r0, #32
 8009818:	4770      	bx	lr
	...

0800981c <__i2b>:
 800981c:	b510      	push	{r4, lr}
 800981e:	460c      	mov	r4, r1
 8009820:	2101      	movs	r1, #1
 8009822:	f7ff feb9 	bl	8009598 <_Balloc>
 8009826:	4602      	mov	r2, r0
 8009828:	b928      	cbnz	r0, 8009836 <__i2b+0x1a>
 800982a:	4b05      	ldr	r3, [pc, #20]	; (8009840 <__i2b+0x24>)
 800982c:	4805      	ldr	r0, [pc, #20]	; (8009844 <__i2b+0x28>)
 800982e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009832:	f000 ff15 	bl	800a660 <__assert_func>
 8009836:	2301      	movs	r3, #1
 8009838:	6144      	str	r4, [r0, #20]
 800983a:	6103      	str	r3, [r0, #16]
 800983c:	bd10      	pop	{r4, pc}
 800983e:	bf00      	nop
 8009840:	0800ac3f 	.word	0x0800ac3f
 8009844:	0800ad2c 	.word	0x0800ad2c

08009848 <__multiply>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	4691      	mov	r9, r2
 800984e:	690a      	ldr	r2, [r1, #16]
 8009850:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009854:	429a      	cmp	r2, r3
 8009856:	bfb8      	it	lt
 8009858:	460b      	movlt	r3, r1
 800985a:	460c      	mov	r4, r1
 800985c:	bfbc      	itt	lt
 800985e:	464c      	movlt	r4, r9
 8009860:	4699      	movlt	r9, r3
 8009862:	6927      	ldr	r7, [r4, #16]
 8009864:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009868:	68a3      	ldr	r3, [r4, #8]
 800986a:	6861      	ldr	r1, [r4, #4]
 800986c:	eb07 060a 	add.w	r6, r7, sl
 8009870:	42b3      	cmp	r3, r6
 8009872:	b085      	sub	sp, #20
 8009874:	bfb8      	it	lt
 8009876:	3101      	addlt	r1, #1
 8009878:	f7ff fe8e 	bl	8009598 <_Balloc>
 800987c:	b930      	cbnz	r0, 800988c <__multiply+0x44>
 800987e:	4602      	mov	r2, r0
 8009880:	4b44      	ldr	r3, [pc, #272]	; (8009994 <__multiply+0x14c>)
 8009882:	4845      	ldr	r0, [pc, #276]	; (8009998 <__multiply+0x150>)
 8009884:	f240 115d 	movw	r1, #349	; 0x15d
 8009888:	f000 feea 	bl	800a660 <__assert_func>
 800988c:	f100 0514 	add.w	r5, r0, #20
 8009890:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009894:	462b      	mov	r3, r5
 8009896:	2200      	movs	r2, #0
 8009898:	4543      	cmp	r3, r8
 800989a:	d321      	bcc.n	80098e0 <__multiply+0x98>
 800989c:	f104 0314 	add.w	r3, r4, #20
 80098a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098a4:	f109 0314 	add.w	r3, r9, #20
 80098a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098ac:	9202      	str	r2, [sp, #8]
 80098ae:	1b3a      	subs	r2, r7, r4
 80098b0:	3a15      	subs	r2, #21
 80098b2:	f022 0203 	bic.w	r2, r2, #3
 80098b6:	3204      	adds	r2, #4
 80098b8:	f104 0115 	add.w	r1, r4, #21
 80098bc:	428f      	cmp	r7, r1
 80098be:	bf38      	it	cc
 80098c0:	2204      	movcc	r2, #4
 80098c2:	9201      	str	r2, [sp, #4]
 80098c4:	9a02      	ldr	r2, [sp, #8]
 80098c6:	9303      	str	r3, [sp, #12]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d80c      	bhi.n	80098e6 <__multiply+0x9e>
 80098cc:	2e00      	cmp	r6, #0
 80098ce:	dd03      	ble.n	80098d8 <__multiply+0x90>
 80098d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d05a      	beq.n	800998e <__multiply+0x146>
 80098d8:	6106      	str	r6, [r0, #16]
 80098da:	b005      	add	sp, #20
 80098dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e0:	f843 2b04 	str.w	r2, [r3], #4
 80098e4:	e7d8      	b.n	8009898 <__multiply+0x50>
 80098e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80098ea:	f1ba 0f00 	cmp.w	sl, #0
 80098ee:	d024      	beq.n	800993a <__multiply+0xf2>
 80098f0:	f104 0e14 	add.w	lr, r4, #20
 80098f4:	46a9      	mov	r9, r5
 80098f6:	f04f 0c00 	mov.w	ip, #0
 80098fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098fe:	f8d9 1000 	ldr.w	r1, [r9]
 8009902:	fa1f fb82 	uxth.w	fp, r2
 8009906:	b289      	uxth	r1, r1
 8009908:	fb0a 110b 	mla	r1, sl, fp, r1
 800990c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009910:	f8d9 2000 	ldr.w	r2, [r9]
 8009914:	4461      	add	r1, ip
 8009916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800991a:	fb0a c20b 	mla	r2, sl, fp, ip
 800991e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009922:	b289      	uxth	r1, r1
 8009924:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009928:	4577      	cmp	r7, lr
 800992a:	f849 1b04 	str.w	r1, [r9], #4
 800992e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009932:	d8e2      	bhi.n	80098fa <__multiply+0xb2>
 8009934:	9a01      	ldr	r2, [sp, #4]
 8009936:	f845 c002 	str.w	ip, [r5, r2]
 800993a:	9a03      	ldr	r2, [sp, #12]
 800993c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009940:	3304      	adds	r3, #4
 8009942:	f1b9 0f00 	cmp.w	r9, #0
 8009946:	d020      	beq.n	800998a <__multiply+0x142>
 8009948:	6829      	ldr	r1, [r5, #0]
 800994a:	f104 0c14 	add.w	ip, r4, #20
 800994e:	46ae      	mov	lr, r5
 8009950:	f04f 0a00 	mov.w	sl, #0
 8009954:	f8bc b000 	ldrh.w	fp, [ip]
 8009958:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800995c:	fb09 220b 	mla	r2, r9, fp, r2
 8009960:	4492      	add	sl, r2
 8009962:	b289      	uxth	r1, r1
 8009964:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009968:	f84e 1b04 	str.w	r1, [lr], #4
 800996c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009970:	f8be 1000 	ldrh.w	r1, [lr]
 8009974:	0c12      	lsrs	r2, r2, #16
 8009976:	fb09 1102 	mla	r1, r9, r2, r1
 800997a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800997e:	4567      	cmp	r7, ip
 8009980:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009984:	d8e6      	bhi.n	8009954 <__multiply+0x10c>
 8009986:	9a01      	ldr	r2, [sp, #4]
 8009988:	50a9      	str	r1, [r5, r2]
 800998a:	3504      	adds	r5, #4
 800998c:	e79a      	b.n	80098c4 <__multiply+0x7c>
 800998e:	3e01      	subs	r6, #1
 8009990:	e79c      	b.n	80098cc <__multiply+0x84>
 8009992:	bf00      	nop
 8009994:	0800ac3f 	.word	0x0800ac3f
 8009998:	0800ad2c 	.word	0x0800ad2c

0800999c <__pow5mult>:
 800999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a0:	4615      	mov	r5, r2
 80099a2:	f012 0203 	ands.w	r2, r2, #3
 80099a6:	4606      	mov	r6, r0
 80099a8:	460f      	mov	r7, r1
 80099aa:	d007      	beq.n	80099bc <__pow5mult+0x20>
 80099ac:	4c25      	ldr	r4, [pc, #148]	; (8009a44 <__pow5mult+0xa8>)
 80099ae:	3a01      	subs	r2, #1
 80099b0:	2300      	movs	r3, #0
 80099b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099b6:	f7ff fe51 	bl	800965c <__multadd>
 80099ba:	4607      	mov	r7, r0
 80099bc:	10ad      	asrs	r5, r5, #2
 80099be:	d03d      	beq.n	8009a3c <__pow5mult+0xa0>
 80099c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099c2:	b97c      	cbnz	r4, 80099e4 <__pow5mult+0x48>
 80099c4:	2010      	movs	r0, #16
 80099c6:	f7ff fdcd 	bl	8009564 <malloc>
 80099ca:	4602      	mov	r2, r0
 80099cc:	6270      	str	r0, [r6, #36]	; 0x24
 80099ce:	b928      	cbnz	r0, 80099dc <__pow5mult+0x40>
 80099d0:	4b1d      	ldr	r3, [pc, #116]	; (8009a48 <__pow5mult+0xac>)
 80099d2:	481e      	ldr	r0, [pc, #120]	; (8009a4c <__pow5mult+0xb0>)
 80099d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099d8:	f000 fe42 	bl	800a660 <__assert_func>
 80099dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099e0:	6004      	str	r4, [r0, #0]
 80099e2:	60c4      	str	r4, [r0, #12]
 80099e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099ec:	b94c      	cbnz	r4, 8009a02 <__pow5mult+0x66>
 80099ee:	f240 2171 	movw	r1, #625	; 0x271
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff ff12 	bl	800981c <__i2b>
 80099f8:	2300      	movs	r3, #0
 80099fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80099fe:	4604      	mov	r4, r0
 8009a00:	6003      	str	r3, [r0, #0]
 8009a02:	f04f 0900 	mov.w	r9, #0
 8009a06:	07eb      	lsls	r3, r5, #31
 8009a08:	d50a      	bpl.n	8009a20 <__pow5mult+0x84>
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7ff ff1a 	bl	8009848 <__multiply>
 8009a14:	4639      	mov	r1, r7
 8009a16:	4680      	mov	r8, r0
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff fdfd 	bl	8009618 <_Bfree>
 8009a1e:	4647      	mov	r7, r8
 8009a20:	106d      	asrs	r5, r5, #1
 8009a22:	d00b      	beq.n	8009a3c <__pow5mult+0xa0>
 8009a24:	6820      	ldr	r0, [r4, #0]
 8009a26:	b938      	cbnz	r0, 8009a38 <__pow5mult+0x9c>
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ff0b 	bl	8009848 <__multiply>
 8009a32:	6020      	str	r0, [r4, #0]
 8009a34:	f8c0 9000 	str.w	r9, [r0]
 8009a38:	4604      	mov	r4, r0
 8009a3a:	e7e4      	b.n	8009a06 <__pow5mult+0x6a>
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a42:	bf00      	nop
 8009a44:	0800ae78 	.word	0x0800ae78
 8009a48:	0800abcd 	.word	0x0800abcd
 8009a4c:	0800ad2c 	.word	0x0800ad2c

08009a50 <__lshift>:
 8009a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a54:	460c      	mov	r4, r1
 8009a56:	6849      	ldr	r1, [r1, #4]
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a5e:	68a3      	ldr	r3, [r4, #8]
 8009a60:	4607      	mov	r7, r0
 8009a62:	4691      	mov	r9, r2
 8009a64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a68:	f108 0601 	add.w	r6, r8, #1
 8009a6c:	42b3      	cmp	r3, r6
 8009a6e:	db0b      	blt.n	8009a88 <__lshift+0x38>
 8009a70:	4638      	mov	r0, r7
 8009a72:	f7ff fd91 	bl	8009598 <_Balloc>
 8009a76:	4605      	mov	r5, r0
 8009a78:	b948      	cbnz	r0, 8009a8e <__lshift+0x3e>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	4b2a      	ldr	r3, [pc, #168]	; (8009b28 <__lshift+0xd8>)
 8009a7e:	482b      	ldr	r0, [pc, #172]	; (8009b2c <__lshift+0xdc>)
 8009a80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a84:	f000 fdec 	bl	800a660 <__assert_func>
 8009a88:	3101      	adds	r1, #1
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	e7ee      	b.n	8009a6c <__lshift+0x1c>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f100 0114 	add.w	r1, r0, #20
 8009a94:	f100 0210 	add.w	r2, r0, #16
 8009a98:	4618      	mov	r0, r3
 8009a9a:	4553      	cmp	r3, sl
 8009a9c:	db37      	blt.n	8009b0e <__lshift+0xbe>
 8009a9e:	6920      	ldr	r0, [r4, #16]
 8009aa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aa4:	f104 0314 	add.w	r3, r4, #20
 8009aa8:	f019 091f 	ands.w	r9, r9, #31
 8009aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ab0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ab4:	d02f      	beq.n	8009b16 <__lshift+0xc6>
 8009ab6:	f1c9 0e20 	rsb	lr, r9, #32
 8009aba:	468a      	mov	sl, r1
 8009abc:	f04f 0c00 	mov.w	ip, #0
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	fa02 f209 	lsl.w	r2, r2, r9
 8009ac6:	ea42 020c 	orr.w	r2, r2, ip
 8009aca:	f84a 2b04 	str.w	r2, [sl], #4
 8009ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad2:	4298      	cmp	r0, r3
 8009ad4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ad8:	d8f2      	bhi.n	8009ac0 <__lshift+0x70>
 8009ada:	1b03      	subs	r3, r0, r4
 8009adc:	3b15      	subs	r3, #21
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	f104 0215 	add.w	r2, r4, #21
 8009ae8:	4290      	cmp	r0, r2
 8009aea:	bf38      	it	cc
 8009aec:	2304      	movcc	r3, #4
 8009aee:	f841 c003 	str.w	ip, [r1, r3]
 8009af2:	f1bc 0f00 	cmp.w	ip, #0
 8009af6:	d001      	beq.n	8009afc <__lshift+0xac>
 8009af8:	f108 0602 	add.w	r6, r8, #2
 8009afc:	3e01      	subs	r6, #1
 8009afe:	4638      	mov	r0, r7
 8009b00:	612e      	str	r6, [r5, #16]
 8009b02:	4621      	mov	r1, r4
 8009b04:	f7ff fd88 	bl	8009618 <_Bfree>
 8009b08:	4628      	mov	r0, r5
 8009b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b12:	3301      	adds	r3, #1
 8009b14:	e7c1      	b.n	8009a9a <__lshift+0x4a>
 8009b16:	3904      	subs	r1, #4
 8009b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b20:	4298      	cmp	r0, r3
 8009b22:	d8f9      	bhi.n	8009b18 <__lshift+0xc8>
 8009b24:	e7ea      	b.n	8009afc <__lshift+0xac>
 8009b26:	bf00      	nop
 8009b28:	0800ac3f 	.word	0x0800ac3f
 8009b2c:	0800ad2c 	.word	0x0800ad2c

08009b30 <__mcmp>:
 8009b30:	b530      	push	{r4, r5, lr}
 8009b32:	6902      	ldr	r2, [r0, #16]
 8009b34:	690c      	ldr	r4, [r1, #16]
 8009b36:	1b12      	subs	r2, r2, r4
 8009b38:	d10e      	bne.n	8009b58 <__mcmp+0x28>
 8009b3a:	f100 0314 	add.w	r3, r0, #20
 8009b3e:	3114      	adds	r1, #20
 8009b40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b50:	42a5      	cmp	r5, r4
 8009b52:	d003      	beq.n	8009b5c <__mcmp+0x2c>
 8009b54:	d305      	bcc.n	8009b62 <__mcmp+0x32>
 8009b56:	2201      	movs	r2, #1
 8009b58:	4610      	mov	r0, r2
 8009b5a:	bd30      	pop	{r4, r5, pc}
 8009b5c:	4283      	cmp	r3, r0
 8009b5e:	d3f3      	bcc.n	8009b48 <__mcmp+0x18>
 8009b60:	e7fa      	b.n	8009b58 <__mcmp+0x28>
 8009b62:	f04f 32ff 	mov.w	r2, #4294967295
 8009b66:	e7f7      	b.n	8009b58 <__mcmp+0x28>

08009b68 <__mdiff>:
 8009b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	4606      	mov	r6, r0
 8009b70:	4611      	mov	r1, r2
 8009b72:	4620      	mov	r0, r4
 8009b74:	4690      	mov	r8, r2
 8009b76:	f7ff ffdb 	bl	8009b30 <__mcmp>
 8009b7a:	1e05      	subs	r5, r0, #0
 8009b7c:	d110      	bne.n	8009ba0 <__mdiff+0x38>
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff fd09 	bl	8009598 <_Balloc>
 8009b86:	b930      	cbnz	r0, 8009b96 <__mdiff+0x2e>
 8009b88:	4b3a      	ldr	r3, [pc, #232]	; (8009c74 <__mdiff+0x10c>)
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	f240 2132 	movw	r1, #562	; 0x232
 8009b90:	4839      	ldr	r0, [pc, #228]	; (8009c78 <__mdiff+0x110>)
 8009b92:	f000 fd65 	bl	800a660 <__assert_func>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba0:	bfa4      	itt	ge
 8009ba2:	4643      	movge	r3, r8
 8009ba4:	46a0      	movge	r8, r4
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bac:	bfa6      	itte	ge
 8009bae:	461c      	movge	r4, r3
 8009bb0:	2500      	movge	r5, #0
 8009bb2:	2501      	movlt	r5, #1
 8009bb4:	f7ff fcf0 	bl	8009598 <_Balloc>
 8009bb8:	b920      	cbnz	r0, 8009bc4 <__mdiff+0x5c>
 8009bba:	4b2e      	ldr	r3, [pc, #184]	; (8009c74 <__mdiff+0x10c>)
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bc2:	e7e5      	b.n	8009b90 <__mdiff+0x28>
 8009bc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bc8:	6926      	ldr	r6, [r4, #16]
 8009bca:	60c5      	str	r5, [r0, #12]
 8009bcc:	f104 0914 	add.w	r9, r4, #20
 8009bd0:	f108 0514 	add.w	r5, r8, #20
 8009bd4:	f100 0e14 	add.w	lr, r0, #20
 8009bd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009be0:	f108 0210 	add.w	r2, r8, #16
 8009be4:	46f2      	mov	sl, lr
 8009be6:	2100      	movs	r1, #0
 8009be8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bf0:	fa1f f883 	uxth.w	r8, r3
 8009bf4:	fa11 f18b 	uxtah	r1, r1, fp
 8009bf8:	0c1b      	lsrs	r3, r3, #16
 8009bfa:	eba1 0808 	sub.w	r8, r1, r8
 8009bfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c06:	fa1f f888 	uxth.w	r8, r8
 8009c0a:	1419      	asrs	r1, r3, #16
 8009c0c:	454e      	cmp	r6, r9
 8009c0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c12:	f84a 3b04 	str.w	r3, [sl], #4
 8009c16:	d8e7      	bhi.n	8009be8 <__mdiff+0x80>
 8009c18:	1b33      	subs	r3, r6, r4
 8009c1a:	3b15      	subs	r3, #21
 8009c1c:	f023 0303 	bic.w	r3, r3, #3
 8009c20:	3304      	adds	r3, #4
 8009c22:	3415      	adds	r4, #21
 8009c24:	42a6      	cmp	r6, r4
 8009c26:	bf38      	it	cc
 8009c28:	2304      	movcc	r3, #4
 8009c2a:	441d      	add	r5, r3
 8009c2c:	4473      	add	r3, lr
 8009c2e:	469e      	mov	lr, r3
 8009c30:	462e      	mov	r6, r5
 8009c32:	4566      	cmp	r6, ip
 8009c34:	d30e      	bcc.n	8009c54 <__mdiff+0xec>
 8009c36:	f10c 0203 	add.w	r2, ip, #3
 8009c3a:	1b52      	subs	r2, r2, r5
 8009c3c:	f022 0203 	bic.w	r2, r2, #3
 8009c40:	3d03      	subs	r5, #3
 8009c42:	45ac      	cmp	ip, r5
 8009c44:	bf38      	it	cc
 8009c46:	2200      	movcc	r2, #0
 8009c48:	441a      	add	r2, r3
 8009c4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c4e:	b17b      	cbz	r3, 8009c70 <__mdiff+0x108>
 8009c50:	6107      	str	r7, [r0, #16]
 8009c52:	e7a3      	b.n	8009b9c <__mdiff+0x34>
 8009c54:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c58:	fa11 f288 	uxtah	r2, r1, r8
 8009c5c:	1414      	asrs	r4, r2, #16
 8009c5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c62:	b292      	uxth	r2, r2
 8009c64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c68:	f84e 2b04 	str.w	r2, [lr], #4
 8009c6c:	1421      	asrs	r1, r4, #16
 8009c6e:	e7e0      	b.n	8009c32 <__mdiff+0xca>
 8009c70:	3f01      	subs	r7, #1
 8009c72:	e7ea      	b.n	8009c4a <__mdiff+0xe2>
 8009c74:	0800ac3f 	.word	0x0800ac3f
 8009c78:	0800ad2c 	.word	0x0800ad2c

08009c7c <__ulp>:
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	ed8d 0b00 	vstr	d0, [sp]
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	4912      	ldr	r1, [pc, #72]	; (8009cd0 <__ulp+0x54>)
 8009c86:	4019      	ands	r1, r3
 8009c88:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	dd05      	ble.n	8009c9c <__ulp+0x20>
 8009c90:	2200      	movs	r2, #0
 8009c92:	460b      	mov	r3, r1
 8009c94:	ec43 2b10 	vmov	d0, r2, r3
 8009c98:	b002      	add	sp, #8
 8009c9a:	4770      	bx	lr
 8009c9c:	4249      	negs	r1, r1
 8009c9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009ca2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	da04      	bge.n	8009cba <__ulp+0x3e>
 8009cb0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009cb4:	fa41 f300 	asr.w	r3, r1, r0
 8009cb8:	e7ec      	b.n	8009c94 <__ulp+0x18>
 8009cba:	f1a0 0114 	sub.w	r1, r0, #20
 8009cbe:	291e      	cmp	r1, #30
 8009cc0:	bfda      	itte	le
 8009cc2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cc6:	fa20 f101 	lsrle.w	r1, r0, r1
 8009cca:	2101      	movgt	r1, #1
 8009ccc:	460a      	mov	r2, r1
 8009cce:	e7e1      	b.n	8009c94 <__ulp+0x18>
 8009cd0:	7ff00000 	.word	0x7ff00000

08009cd4 <__b2d>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	6905      	ldr	r5, [r0, #16]
 8009cd8:	f100 0714 	add.w	r7, r0, #20
 8009cdc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ce0:	1f2e      	subs	r6, r5, #4
 8009ce2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f7ff fd48 	bl	800977c <__hi0bits>
 8009cec:	f1c0 0320 	rsb	r3, r0, #32
 8009cf0:	280a      	cmp	r0, #10
 8009cf2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009d70 <__b2d+0x9c>
 8009cf6:	600b      	str	r3, [r1, #0]
 8009cf8:	dc14      	bgt.n	8009d24 <__b2d+0x50>
 8009cfa:	f1c0 0e0b 	rsb	lr, r0, #11
 8009cfe:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d02:	42b7      	cmp	r7, r6
 8009d04:	ea41 030c 	orr.w	r3, r1, ip
 8009d08:	bf34      	ite	cc
 8009d0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d0e:	2100      	movcs	r1, #0
 8009d10:	3015      	adds	r0, #21
 8009d12:	fa04 f000 	lsl.w	r0, r4, r0
 8009d16:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d1a:	ea40 0201 	orr.w	r2, r0, r1
 8009d1e:	ec43 2b10 	vmov	d0, r2, r3
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	42b7      	cmp	r7, r6
 8009d26:	bf3a      	itte	cc
 8009d28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d2c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d30:	2100      	movcs	r1, #0
 8009d32:	380b      	subs	r0, #11
 8009d34:	d017      	beq.n	8009d66 <__b2d+0x92>
 8009d36:	f1c0 0c20 	rsb	ip, r0, #32
 8009d3a:	fa04 f500 	lsl.w	r5, r4, r0
 8009d3e:	42be      	cmp	r6, r7
 8009d40:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d44:	ea45 0504 	orr.w	r5, r5, r4
 8009d48:	bf8c      	ite	hi
 8009d4a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d4e:	2400      	movls	r4, #0
 8009d50:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d54:	fa01 f000 	lsl.w	r0, r1, r0
 8009d58:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d60:	ea40 0204 	orr.w	r2, r0, r4
 8009d64:	e7db      	b.n	8009d1e <__b2d+0x4a>
 8009d66:	ea44 030c 	orr.w	r3, r4, ip
 8009d6a:	460a      	mov	r2, r1
 8009d6c:	e7d7      	b.n	8009d1e <__b2d+0x4a>
 8009d6e:	bf00      	nop
 8009d70:	3ff00000 	.word	0x3ff00000

08009d74 <__d2b>:
 8009d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d78:	4689      	mov	r9, r1
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	ec57 6b10 	vmov	r6, r7, d0
 8009d80:	4690      	mov	r8, r2
 8009d82:	f7ff fc09 	bl	8009598 <_Balloc>
 8009d86:	4604      	mov	r4, r0
 8009d88:	b930      	cbnz	r0, 8009d98 <__d2b+0x24>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	4b25      	ldr	r3, [pc, #148]	; (8009e24 <__d2b+0xb0>)
 8009d8e:	4826      	ldr	r0, [pc, #152]	; (8009e28 <__d2b+0xb4>)
 8009d90:	f240 310a 	movw	r1, #778	; 0x30a
 8009d94:	f000 fc64 	bl	800a660 <__assert_func>
 8009d98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009da0:	bb35      	cbnz	r5, 8009df0 <__d2b+0x7c>
 8009da2:	2e00      	cmp	r6, #0
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	d028      	beq.n	8009dfa <__d2b+0x86>
 8009da8:	4668      	mov	r0, sp
 8009daa:	9600      	str	r6, [sp, #0]
 8009dac:	f7ff fd06 	bl	80097bc <__lo0bits>
 8009db0:	9900      	ldr	r1, [sp, #0]
 8009db2:	b300      	cbz	r0, 8009df6 <__d2b+0x82>
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	f1c0 0320 	rsb	r3, r0, #32
 8009dba:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	40c2      	lsrs	r2, r0
 8009dc2:	6163      	str	r3, [r4, #20]
 8009dc4:	9201      	str	r2, [sp, #4]
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	61a3      	str	r3, [r4, #24]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bf14      	ite	ne
 8009dce:	2202      	movne	r2, #2
 8009dd0:	2201      	moveq	r2, #1
 8009dd2:	6122      	str	r2, [r4, #16]
 8009dd4:	b1d5      	cbz	r5, 8009e0c <__d2b+0x98>
 8009dd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dda:	4405      	add	r5, r0
 8009ddc:	f8c9 5000 	str.w	r5, [r9]
 8009de0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009de4:	f8c8 0000 	str.w	r0, [r8]
 8009de8:	4620      	mov	r0, r4
 8009dea:	b003      	add	sp, #12
 8009dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009df4:	e7d5      	b.n	8009da2 <__d2b+0x2e>
 8009df6:	6161      	str	r1, [r4, #20]
 8009df8:	e7e5      	b.n	8009dc6 <__d2b+0x52>
 8009dfa:	a801      	add	r0, sp, #4
 8009dfc:	f7ff fcde 	bl	80097bc <__lo0bits>
 8009e00:	9b01      	ldr	r3, [sp, #4]
 8009e02:	6163      	str	r3, [r4, #20]
 8009e04:	2201      	movs	r2, #1
 8009e06:	6122      	str	r2, [r4, #16]
 8009e08:	3020      	adds	r0, #32
 8009e0a:	e7e3      	b.n	8009dd4 <__d2b+0x60>
 8009e0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e14:	f8c9 0000 	str.w	r0, [r9]
 8009e18:	6918      	ldr	r0, [r3, #16]
 8009e1a:	f7ff fcaf 	bl	800977c <__hi0bits>
 8009e1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e22:	e7df      	b.n	8009de4 <__d2b+0x70>
 8009e24:	0800ac3f 	.word	0x0800ac3f
 8009e28:	0800ad2c 	.word	0x0800ad2c

08009e2c <__ratio>:
 8009e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	4688      	mov	r8, r1
 8009e32:	4669      	mov	r1, sp
 8009e34:	4681      	mov	r9, r0
 8009e36:	f7ff ff4d 	bl	8009cd4 <__b2d>
 8009e3a:	a901      	add	r1, sp, #4
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	ec55 4b10 	vmov	r4, r5, d0
 8009e42:	f7ff ff47 	bl	8009cd4 <__b2d>
 8009e46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e4a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e4e:	eba3 0c02 	sub.w	ip, r3, r2
 8009e52:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e5c:	ec51 0b10 	vmov	r0, r1, d0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	bfd6      	itet	le
 8009e64:	460a      	movle	r2, r1
 8009e66:	462a      	movgt	r2, r5
 8009e68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e6c:	468b      	mov	fp, r1
 8009e6e:	462f      	mov	r7, r5
 8009e70:	bfd4      	ite	le
 8009e72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	ee10 2a10 	vmov	r2, s0
 8009e80:	465b      	mov	r3, fp
 8009e82:	4639      	mov	r1, r7
 8009e84:	f7f6 fd02 	bl	800088c <__aeabi_ddiv>
 8009e88:	ec41 0b10 	vmov	d0, r0, r1
 8009e8c:	b003      	add	sp, #12
 8009e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e92 <__copybits>:
 8009e92:	3901      	subs	r1, #1
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	1149      	asrs	r1, r1, #5
 8009e98:	6914      	ldr	r4, [r2, #16]
 8009e9a:	3101      	adds	r1, #1
 8009e9c:	f102 0314 	add.w	r3, r2, #20
 8009ea0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ea4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ea8:	1f05      	subs	r5, r0, #4
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	d30c      	bcc.n	8009ec8 <__copybits+0x36>
 8009eae:	1aa3      	subs	r3, r4, r2
 8009eb0:	3b11      	subs	r3, #17
 8009eb2:	f023 0303 	bic.w	r3, r3, #3
 8009eb6:	3211      	adds	r2, #17
 8009eb8:	42a2      	cmp	r2, r4
 8009eba:	bf88      	it	hi
 8009ebc:	2300      	movhi	r3, #0
 8009ebe:	4418      	add	r0, r3
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4288      	cmp	r0, r1
 8009ec4:	d305      	bcc.n	8009ed2 <__copybits+0x40>
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ecc:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ed0:	e7eb      	b.n	8009eaa <__copybits+0x18>
 8009ed2:	f840 3b04 	str.w	r3, [r0], #4
 8009ed6:	e7f4      	b.n	8009ec2 <__copybits+0x30>

08009ed8 <__any_on>:
 8009ed8:	f100 0214 	add.w	r2, r0, #20
 8009edc:	6900      	ldr	r0, [r0, #16]
 8009ede:	114b      	asrs	r3, r1, #5
 8009ee0:	4298      	cmp	r0, r3
 8009ee2:	b510      	push	{r4, lr}
 8009ee4:	db11      	blt.n	8009f0a <__any_on+0x32>
 8009ee6:	dd0a      	ble.n	8009efe <__any_on+0x26>
 8009ee8:	f011 011f 	ands.w	r1, r1, #31
 8009eec:	d007      	beq.n	8009efe <__any_on+0x26>
 8009eee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ef2:	fa24 f001 	lsr.w	r0, r4, r1
 8009ef6:	fa00 f101 	lsl.w	r1, r0, r1
 8009efa:	428c      	cmp	r4, r1
 8009efc:	d10b      	bne.n	8009f16 <__any_on+0x3e>
 8009efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d803      	bhi.n	8009f0e <__any_on+0x36>
 8009f06:	2000      	movs	r0, #0
 8009f08:	bd10      	pop	{r4, pc}
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	e7f7      	b.n	8009efe <__any_on+0x26>
 8009f0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f12:	2900      	cmp	r1, #0
 8009f14:	d0f5      	beq.n	8009f02 <__any_on+0x2a>
 8009f16:	2001      	movs	r0, #1
 8009f18:	e7f6      	b.n	8009f08 <__any_on+0x30>

08009f1a <_calloc_r>:
 8009f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1c:	fba1 2402 	umull	r2, r4, r1, r2
 8009f20:	b94c      	cbnz	r4, 8009f36 <_calloc_r+0x1c>
 8009f22:	4611      	mov	r1, r2
 8009f24:	9201      	str	r2, [sp, #4]
 8009f26:	f000 f87b 	bl	800a020 <_malloc_r>
 8009f2a:	9a01      	ldr	r2, [sp, #4]
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	b930      	cbnz	r0, 8009f3e <_calloc_r+0x24>
 8009f30:	4628      	mov	r0, r5
 8009f32:	b003      	add	sp, #12
 8009f34:	bd30      	pop	{r4, r5, pc}
 8009f36:	220c      	movs	r2, #12
 8009f38:	6002      	str	r2, [r0, #0]
 8009f3a:	2500      	movs	r5, #0
 8009f3c:	e7f8      	b.n	8009f30 <_calloc_r+0x16>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	f7fc fd70 	bl	8006a24 <memset>
 8009f44:	e7f4      	b.n	8009f30 <_calloc_r+0x16>
	...

08009f48 <_free_r>:
 8009f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	d044      	beq.n	8009fd8 <_free_r+0x90>
 8009f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f52:	9001      	str	r0, [sp, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f1a1 0404 	sub.w	r4, r1, #4
 8009f5a:	bfb8      	it	lt
 8009f5c:	18e4      	addlt	r4, r4, r3
 8009f5e:	f000 fcf9 	bl	800a954 <__malloc_lock>
 8009f62:	4a1e      	ldr	r2, [pc, #120]	; (8009fdc <_free_r+0x94>)
 8009f64:	9801      	ldr	r0, [sp, #4]
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	b933      	cbnz	r3, 8009f78 <_free_r+0x30>
 8009f6a:	6063      	str	r3, [r4, #4]
 8009f6c:	6014      	str	r4, [r2, #0]
 8009f6e:	b003      	add	sp, #12
 8009f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f74:	f000 bcf4 	b.w	800a960 <__malloc_unlock>
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	d908      	bls.n	8009f8e <_free_r+0x46>
 8009f7c:	6825      	ldr	r5, [r4, #0]
 8009f7e:	1961      	adds	r1, r4, r5
 8009f80:	428b      	cmp	r3, r1
 8009f82:	bf01      	itttt	eq
 8009f84:	6819      	ldreq	r1, [r3, #0]
 8009f86:	685b      	ldreq	r3, [r3, #4]
 8009f88:	1949      	addeq	r1, r1, r5
 8009f8a:	6021      	streq	r1, [r4, #0]
 8009f8c:	e7ed      	b.n	8009f6a <_free_r+0x22>
 8009f8e:	461a      	mov	r2, r3
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	b10b      	cbz	r3, 8009f98 <_free_r+0x50>
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	d9fa      	bls.n	8009f8e <_free_r+0x46>
 8009f98:	6811      	ldr	r1, [r2, #0]
 8009f9a:	1855      	adds	r5, r2, r1
 8009f9c:	42a5      	cmp	r5, r4
 8009f9e:	d10b      	bne.n	8009fb8 <_free_r+0x70>
 8009fa0:	6824      	ldr	r4, [r4, #0]
 8009fa2:	4421      	add	r1, r4
 8009fa4:	1854      	adds	r4, r2, r1
 8009fa6:	42a3      	cmp	r3, r4
 8009fa8:	6011      	str	r1, [r2, #0]
 8009faa:	d1e0      	bne.n	8009f6e <_free_r+0x26>
 8009fac:	681c      	ldr	r4, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	6053      	str	r3, [r2, #4]
 8009fb2:	4421      	add	r1, r4
 8009fb4:	6011      	str	r1, [r2, #0]
 8009fb6:	e7da      	b.n	8009f6e <_free_r+0x26>
 8009fb8:	d902      	bls.n	8009fc0 <_free_r+0x78>
 8009fba:	230c      	movs	r3, #12
 8009fbc:	6003      	str	r3, [r0, #0]
 8009fbe:	e7d6      	b.n	8009f6e <_free_r+0x26>
 8009fc0:	6825      	ldr	r5, [r4, #0]
 8009fc2:	1961      	adds	r1, r4, r5
 8009fc4:	428b      	cmp	r3, r1
 8009fc6:	bf04      	itt	eq
 8009fc8:	6819      	ldreq	r1, [r3, #0]
 8009fca:	685b      	ldreq	r3, [r3, #4]
 8009fcc:	6063      	str	r3, [r4, #4]
 8009fce:	bf04      	itt	eq
 8009fd0:	1949      	addeq	r1, r1, r5
 8009fd2:	6021      	streq	r1, [r4, #0]
 8009fd4:	6054      	str	r4, [r2, #4]
 8009fd6:	e7ca      	b.n	8009f6e <_free_r+0x26>
 8009fd8:	b003      	add	sp, #12
 8009fda:	bd30      	pop	{r4, r5, pc}
 8009fdc:	20004cac 	.word	0x20004cac

08009fe0 <sbrk_aligned>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	4e0e      	ldr	r6, [pc, #56]	; (800a01c <sbrk_aligned+0x3c>)
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	6831      	ldr	r1, [r6, #0]
 8009fe8:	4605      	mov	r5, r0
 8009fea:	b911      	cbnz	r1, 8009ff2 <sbrk_aligned+0x12>
 8009fec:	f000 f9f0 	bl	800a3d0 <_sbrk_r>
 8009ff0:	6030      	str	r0, [r6, #0]
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f000 f9eb 	bl	800a3d0 <_sbrk_r>
 8009ffa:	1c43      	adds	r3, r0, #1
 8009ffc:	d00a      	beq.n	800a014 <sbrk_aligned+0x34>
 8009ffe:	1cc4      	adds	r4, r0, #3
 800a000:	f024 0403 	bic.w	r4, r4, #3
 800a004:	42a0      	cmp	r0, r4
 800a006:	d007      	beq.n	800a018 <sbrk_aligned+0x38>
 800a008:	1a21      	subs	r1, r4, r0
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 f9e0 	bl	800a3d0 <_sbrk_r>
 800a010:	3001      	adds	r0, #1
 800a012:	d101      	bne.n	800a018 <sbrk_aligned+0x38>
 800a014:	f04f 34ff 	mov.w	r4, #4294967295
 800a018:	4620      	mov	r0, r4
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	20004cb0 	.word	0x20004cb0

0800a020 <_malloc_r>:
 800a020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a024:	1ccd      	adds	r5, r1, #3
 800a026:	f025 0503 	bic.w	r5, r5, #3
 800a02a:	3508      	adds	r5, #8
 800a02c:	2d0c      	cmp	r5, #12
 800a02e:	bf38      	it	cc
 800a030:	250c      	movcc	r5, #12
 800a032:	2d00      	cmp	r5, #0
 800a034:	4607      	mov	r7, r0
 800a036:	db01      	blt.n	800a03c <_malloc_r+0x1c>
 800a038:	42a9      	cmp	r1, r5
 800a03a:	d905      	bls.n	800a048 <_malloc_r+0x28>
 800a03c:	230c      	movs	r3, #12
 800a03e:	603b      	str	r3, [r7, #0]
 800a040:	2600      	movs	r6, #0
 800a042:	4630      	mov	r0, r6
 800a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a048:	4e2e      	ldr	r6, [pc, #184]	; (800a104 <_malloc_r+0xe4>)
 800a04a:	f000 fc83 	bl	800a954 <__malloc_lock>
 800a04e:	6833      	ldr	r3, [r6, #0]
 800a050:	461c      	mov	r4, r3
 800a052:	bb34      	cbnz	r4, 800a0a2 <_malloc_r+0x82>
 800a054:	4629      	mov	r1, r5
 800a056:	4638      	mov	r0, r7
 800a058:	f7ff ffc2 	bl	8009fe0 <sbrk_aligned>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	4604      	mov	r4, r0
 800a060:	d14d      	bne.n	800a0fe <_malloc_r+0xde>
 800a062:	6834      	ldr	r4, [r6, #0]
 800a064:	4626      	mov	r6, r4
 800a066:	2e00      	cmp	r6, #0
 800a068:	d140      	bne.n	800a0ec <_malloc_r+0xcc>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	4631      	mov	r1, r6
 800a06e:	4638      	mov	r0, r7
 800a070:	eb04 0803 	add.w	r8, r4, r3
 800a074:	f000 f9ac 	bl	800a3d0 <_sbrk_r>
 800a078:	4580      	cmp	r8, r0
 800a07a:	d13a      	bne.n	800a0f2 <_malloc_r+0xd2>
 800a07c:	6821      	ldr	r1, [r4, #0]
 800a07e:	3503      	adds	r5, #3
 800a080:	1a6d      	subs	r5, r5, r1
 800a082:	f025 0503 	bic.w	r5, r5, #3
 800a086:	3508      	adds	r5, #8
 800a088:	2d0c      	cmp	r5, #12
 800a08a:	bf38      	it	cc
 800a08c:	250c      	movcc	r5, #12
 800a08e:	4629      	mov	r1, r5
 800a090:	4638      	mov	r0, r7
 800a092:	f7ff ffa5 	bl	8009fe0 <sbrk_aligned>
 800a096:	3001      	adds	r0, #1
 800a098:	d02b      	beq.n	800a0f2 <_malloc_r+0xd2>
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	442b      	add	r3, r5
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	e00e      	b.n	800a0c0 <_malloc_r+0xa0>
 800a0a2:	6822      	ldr	r2, [r4, #0]
 800a0a4:	1b52      	subs	r2, r2, r5
 800a0a6:	d41e      	bmi.n	800a0e6 <_malloc_r+0xc6>
 800a0a8:	2a0b      	cmp	r2, #11
 800a0aa:	d916      	bls.n	800a0da <_malloc_r+0xba>
 800a0ac:	1961      	adds	r1, r4, r5
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	6025      	str	r5, [r4, #0]
 800a0b2:	bf18      	it	ne
 800a0b4:	6059      	strne	r1, [r3, #4]
 800a0b6:	6863      	ldr	r3, [r4, #4]
 800a0b8:	bf08      	it	eq
 800a0ba:	6031      	streq	r1, [r6, #0]
 800a0bc:	5162      	str	r2, [r4, r5]
 800a0be:	604b      	str	r3, [r1, #4]
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f104 060b 	add.w	r6, r4, #11
 800a0c6:	f000 fc4b 	bl	800a960 <__malloc_unlock>
 800a0ca:	f026 0607 	bic.w	r6, r6, #7
 800a0ce:	1d23      	adds	r3, r4, #4
 800a0d0:	1af2      	subs	r2, r6, r3
 800a0d2:	d0b6      	beq.n	800a042 <_malloc_r+0x22>
 800a0d4:	1b9b      	subs	r3, r3, r6
 800a0d6:	50a3      	str	r3, [r4, r2]
 800a0d8:	e7b3      	b.n	800a042 <_malloc_r+0x22>
 800a0da:	6862      	ldr	r2, [r4, #4]
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	bf0c      	ite	eq
 800a0e0:	6032      	streq	r2, [r6, #0]
 800a0e2:	605a      	strne	r2, [r3, #4]
 800a0e4:	e7ec      	b.n	800a0c0 <_malloc_r+0xa0>
 800a0e6:	4623      	mov	r3, r4
 800a0e8:	6864      	ldr	r4, [r4, #4]
 800a0ea:	e7b2      	b.n	800a052 <_malloc_r+0x32>
 800a0ec:	4634      	mov	r4, r6
 800a0ee:	6876      	ldr	r6, [r6, #4]
 800a0f0:	e7b9      	b.n	800a066 <_malloc_r+0x46>
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	603b      	str	r3, [r7, #0]
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f000 fc32 	bl	800a960 <__malloc_unlock>
 800a0fc:	e7a1      	b.n	800a042 <_malloc_r+0x22>
 800a0fe:	6025      	str	r5, [r4, #0]
 800a100:	e7de      	b.n	800a0c0 <_malloc_r+0xa0>
 800a102:	bf00      	nop
 800a104:	20004cac 	.word	0x20004cac

0800a108 <__sfputc_r>:
 800a108:	6893      	ldr	r3, [r2, #8]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	b410      	push	{r4}
 800a110:	6093      	str	r3, [r2, #8]
 800a112:	da08      	bge.n	800a126 <__sfputc_r+0x1e>
 800a114:	6994      	ldr	r4, [r2, #24]
 800a116:	42a3      	cmp	r3, r4
 800a118:	db01      	blt.n	800a11e <__sfputc_r+0x16>
 800a11a:	290a      	cmp	r1, #10
 800a11c:	d103      	bne.n	800a126 <__sfputc_r+0x1e>
 800a11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a122:	f000 b9bd 	b.w	800a4a0 <__swbuf_r>
 800a126:	6813      	ldr	r3, [r2, #0]
 800a128:	1c58      	adds	r0, r3, #1
 800a12a:	6010      	str	r0, [r2, #0]
 800a12c:	7019      	strb	r1, [r3, #0]
 800a12e:	4608      	mov	r0, r1
 800a130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <__sfputs_r>:
 800a136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a138:	4606      	mov	r6, r0
 800a13a:	460f      	mov	r7, r1
 800a13c:	4614      	mov	r4, r2
 800a13e:	18d5      	adds	r5, r2, r3
 800a140:	42ac      	cmp	r4, r5
 800a142:	d101      	bne.n	800a148 <__sfputs_r+0x12>
 800a144:	2000      	movs	r0, #0
 800a146:	e007      	b.n	800a158 <__sfputs_r+0x22>
 800a148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14c:	463a      	mov	r2, r7
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff ffda 	bl	800a108 <__sfputc_r>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d1f3      	bne.n	800a140 <__sfputs_r+0xa>
 800a158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a15c <_vfiprintf_r>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	460d      	mov	r5, r1
 800a162:	b09d      	sub	sp, #116	; 0x74
 800a164:	4614      	mov	r4, r2
 800a166:	4698      	mov	r8, r3
 800a168:	4606      	mov	r6, r0
 800a16a:	b118      	cbz	r0, 800a174 <_vfiprintf_r+0x18>
 800a16c:	6983      	ldr	r3, [r0, #24]
 800a16e:	b90b      	cbnz	r3, 800a174 <_vfiprintf_r+0x18>
 800a170:	f7fe fde4 	bl	8008d3c <__sinit>
 800a174:	4b89      	ldr	r3, [pc, #548]	; (800a39c <_vfiprintf_r+0x240>)
 800a176:	429d      	cmp	r5, r3
 800a178:	d11b      	bne.n	800a1b2 <_vfiprintf_r+0x56>
 800a17a:	6875      	ldr	r5, [r6, #4]
 800a17c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a17e:	07d9      	lsls	r1, r3, #31
 800a180:	d405      	bmi.n	800a18e <_vfiprintf_r+0x32>
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	059a      	lsls	r2, r3, #22
 800a186:	d402      	bmi.n	800a18e <_vfiprintf_r+0x32>
 800a188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a18a:	f7ff f9e8 	bl	800955e <__retarget_lock_acquire_recursive>
 800a18e:	89ab      	ldrh	r3, [r5, #12]
 800a190:	071b      	lsls	r3, r3, #28
 800a192:	d501      	bpl.n	800a198 <_vfiprintf_r+0x3c>
 800a194:	692b      	ldr	r3, [r5, #16]
 800a196:	b9eb      	cbnz	r3, 800a1d4 <_vfiprintf_r+0x78>
 800a198:	4629      	mov	r1, r5
 800a19a:	4630      	mov	r0, r6
 800a19c:	f000 f9f2 	bl	800a584 <__swsetup_r>
 800a1a0:	b1c0      	cbz	r0, 800a1d4 <_vfiprintf_r+0x78>
 800a1a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a4:	07dc      	lsls	r4, r3, #31
 800a1a6:	d50e      	bpl.n	800a1c6 <_vfiprintf_r+0x6a>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ac:	b01d      	add	sp, #116	; 0x74
 800a1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b2:	4b7b      	ldr	r3, [pc, #492]	; (800a3a0 <_vfiprintf_r+0x244>)
 800a1b4:	429d      	cmp	r5, r3
 800a1b6:	d101      	bne.n	800a1bc <_vfiprintf_r+0x60>
 800a1b8:	68b5      	ldr	r5, [r6, #8]
 800a1ba:	e7df      	b.n	800a17c <_vfiprintf_r+0x20>
 800a1bc:	4b79      	ldr	r3, [pc, #484]	; (800a3a4 <_vfiprintf_r+0x248>)
 800a1be:	429d      	cmp	r5, r3
 800a1c0:	bf08      	it	eq
 800a1c2:	68f5      	ldreq	r5, [r6, #12]
 800a1c4:	e7da      	b.n	800a17c <_vfiprintf_r+0x20>
 800a1c6:	89ab      	ldrh	r3, [r5, #12]
 800a1c8:	0598      	lsls	r0, r3, #22
 800a1ca:	d4ed      	bmi.n	800a1a8 <_vfiprintf_r+0x4c>
 800a1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ce:	f7ff f9c7 	bl	8009560 <__retarget_lock_release_recursive>
 800a1d2:	e7e9      	b.n	800a1a8 <_vfiprintf_r+0x4c>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d8:	2320      	movs	r3, #32
 800a1da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e2:	2330      	movs	r3, #48	; 0x30
 800a1e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3a8 <_vfiprintf_r+0x24c>
 800a1e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1ec:	f04f 0901 	mov.w	r9, #1
 800a1f0:	4623      	mov	r3, r4
 800a1f2:	469a      	mov	sl, r3
 800a1f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f8:	b10a      	cbz	r2, 800a1fe <_vfiprintf_r+0xa2>
 800a1fa:	2a25      	cmp	r2, #37	; 0x25
 800a1fc:	d1f9      	bne.n	800a1f2 <_vfiprintf_r+0x96>
 800a1fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a202:	d00b      	beq.n	800a21c <_vfiprintf_r+0xc0>
 800a204:	465b      	mov	r3, fp
 800a206:	4622      	mov	r2, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff ff93 	bl	800a136 <__sfputs_r>
 800a210:	3001      	adds	r0, #1
 800a212:	f000 80aa 	beq.w	800a36a <_vfiprintf_r+0x20e>
 800a216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a218:	445a      	add	r2, fp
 800a21a:	9209      	str	r2, [sp, #36]	; 0x24
 800a21c:	f89a 3000 	ldrb.w	r3, [sl]
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 80a2 	beq.w	800a36a <_vfiprintf_r+0x20e>
 800a226:	2300      	movs	r3, #0
 800a228:	f04f 32ff 	mov.w	r2, #4294967295
 800a22c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a230:	f10a 0a01 	add.w	sl, sl, #1
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	9307      	str	r3, [sp, #28]
 800a238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a23c:	931a      	str	r3, [sp, #104]	; 0x68
 800a23e:	4654      	mov	r4, sl
 800a240:	2205      	movs	r2, #5
 800a242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a246:	4858      	ldr	r0, [pc, #352]	; (800a3a8 <_vfiprintf_r+0x24c>)
 800a248:	f7f5 ffea 	bl	8000220 <memchr>
 800a24c:	9a04      	ldr	r2, [sp, #16]
 800a24e:	b9d8      	cbnz	r0, 800a288 <_vfiprintf_r+0x12c>
 800a250:	06d1      	lsls	r1, r2, #27
 800a252:	bf44      	itt	mi
 800a254:	2320      	movmi	r3, #32
 800a256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a25a:	0713      	lsls	r3, r2, #28
 800a25c:	bf44      	itt	mi
 800a25e:	232b      	movmi	r3, #43	; 0x2b
 800a260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a264:	f89a 3000 	ldrb.w	r3, [sl]
 800a268:	2b2a      	cmp	r3, #42	; 0x2a
 800a26a:	d015      	beq.n	800a298 <_vfiprintf_r+0x13c>
 800a26c:	9a07      	ldr	r2, [sp, #28]
 800a26e:	4654      	mov	r4, sl
 800a270:	2000      	movs	r0, #0
 800a272:	f04f 0c0a 	mov.w	ip, #10
 800a276:	4621      	mov	r1, r4
 800a278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a27c:	3b30      	subs	r3, #48	; 0x30
 800a27e:	2b09      	cmp	r3, #9
 800a280:	d94e      	bls.n	800a320 <_vfiprintf_r+0x1c4>
 800a282:	b1b0      	cbz	r0, 800a2b2 <_vfiprintf_r+0x156>
 800a284:	9207      	str	r2, [sp, #28]
 800a286:	e014      	b.n	800a2b2 <_vfiprintf_r+0x156>
 800a288:	eba0 0308 	sub.w	r3, r0, r8
 800a28c:	fa09 f303 	lsl.w	r3, r9, r3
 800a290:	4313      	orrs	r3, r2
 800a292:	9304      	str	r3, [sp, #16]
 800a294:	46a2      	mov	sl, r4
 800a296:	e7d2      	b.n	800a23e <_vfiprintf_r+0xe2>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	1d19      	adds	r1, r3, #4
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	9103      	str	r1, [sp, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	bfbb      	ittet	lt
 800a2a4:	425b      	neglt	r3, r3
 800a2a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a2aa:	9307      	strge	r3, [sp, #28]
 800a2ac:	9307      	strlt	r3, [sp, #28]
 800a2ae:	bfb8      	it	lt
 800a2b0:	9204      	strlt	r2, [sp, #16]
 800a2b2:	7823      	ldrb	r3, [r4, #0]
 800a2b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2b6:	d10c      	bne.n	800a2d2 <_vfiprintf_r+0x176>
 800a2b8:	7863      	ldrb	r3, [r4, #1]
 800a2ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a2bc:	d135      	bne.n	800a32a <_vfiprintf_r+0x1ce>
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	1d1a      	adds	r2, r3, #4
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	9203      	str	r2, [sp, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	bfb8      	it	lt
 800a2ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2ce:	3402      	adds	r4, #2
 800a2d0:	9305      	str	r3, [sp, #20]
 800a2d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3b8 <_vfiprintf_r+0x25c>
 800a2d6:	7821      	ldrb	r1, [r4, #0]
 800a2d8:	2203      	movs	r2, #3
 800a2da:	4650      	mov	r0, sl
 800a2dc:	f7f5 ffa0 	bl	8000220 <memchr>
 800a2e0:	b140      	cbz	r0, 800a2f4 <_vfiprintf_r+0x198>
 800a2e2:	2340      	movs	r3, #64	; 0x40
 800a2e4:	eba0 000a 	sub.w	r0, r0, sl
 800a2e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	4303      	orrs	r3, r0
 800a2f0:	3401      	adds	r4, #1
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f8:	482c      	ldr	r0, [pc, #176]	; (800a3ac <_vfiprintf_r+0x250>)
 800a2fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2fe:	2206      	movs	r2, #6
 800a300:	f7f5 ff8e 	bl	8000220 <memchr>
 800a304:	2800      	cmp	r0, #0
 800a306:	d03f      	beq.n	800a388 <_vfiprintf_r+0x22c>
 800a308:	4b29      	ldr	r3, [pc, #164]	; (800a3b0 <_vfiprintf_r+0x254>)
 800a30a:	bb1b      	cbnz	r3, 800a354 <_vfiprintf_r+0x1f8>
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	3307      	adds	r3, #7
 800a310:	f023 0307 	bic.w	r3, r3, #7
 800a314:	3308      	adds	r3, #8
 800a316:	9303      	str	r3, [sp, #12]
 800a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31a:	443b      	add	r3, r7
 800a31c:	9309      	str	r3, [sp, #36]	; 0x24
 800a31e:	e767      	b.n	800a1f0 <_vfiprintf_r+0x94>
 800a320:	fb0c 3202 	mla	r2, ip, r2, r3
 800a324:	460c      	mov	r4, r1
 800a326:	2001      	movs	r0, #1
 800a328:	e7a5      	b.n	800a276 <_vfiprintf_r+0x11a>
 800a32a:	2300      	movs	r3, #0
 800a32c:	3401      	adds	r4, #1
 800a32e:	9305      	str	r3, [sp, #20]
 800a330:	4619      	mov	r1, r3
 800a332:	f04f 0c0a 	mov.w	ip, #10
 800a336:	4620      	mov	r0, r4
 800a338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a33c:	3a30      	subs	r2, #48	; 0x30
 800a33e:	2a09      	cmp	r2, #9
 800a340:	d903      	bls.n	800a34a <_vfiprintf_r+0x1ee>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0c5      	beq.n	800a2d2 <_vfiprintf_r+0x176>
 800a346:	9105      	str	r1, [sp, #20]
 800a348:	e7c3      	b.n	800a2d2 <_vfiprintf_r+0x176>
 800a34a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a34e:	4604      	mov	r4, r0
 800a350:	2301      	movs	r3, #1
 800a352:	e7f0      	b.n	800a336 <_vfiprintf_r+0x1da>
 800a354:	ab03      	add	r3, sp, #12
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	462a      	mov	r2, r5
 800a35a:	4b16      	ldr	r3, [pc, #88]	; (800a3b4 <_vfiprintf_r+0x258>)
 800a35c:	a904      	add	r1, sp, #16
 800a35e:	4630      	mov	r0, r6
 800a360:	f7fc fc08 	bl	8006b74 <_printf_float>
 800a364:	4607      	mov	r7, r0
 800a366:	1c78      	adds	r0, r7, #1
 800a368:	d1d6      	bne.n	800a318 <_vfiprintf_r+0x1bc>
 800a36a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a36c:	07d9      	lsls	r1, r3, #31
 800a36e:	d405      	bmi.n	800a37c <_vfiprintf_r+0x220>
 800a370:	89ab      	ldrh	r3, [r5, #12]
 800a372:	059a      	lsls	r2, r3, #22
 800a374:	d402      	bmi.n	800a37c <_vfiprintf_r+0x220>
 800a376:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a378:	f7ff f8f2 	bl	8009560 <__retarget_lock_release_recursive>
 800a37c:	89ab      	ldrh	r3, [r5, #12]
 800a37e:	065b      	lsls	r3, r3, #25
 800a380:	f53f af12 	bmi.w	800a1a8 <_vfiprintf_r+0x4c>
 800a384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a386:	e711      	b.n	800a1ac <_vfiprintf_r+0x50>
 800a388:	ab03      	add	r3, sp, #12
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	462a      	mov	r2, r5
 800a38e:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <_vfiprintf_r+0x258>)
 800a390:	a904      	add	r1, sp, #16
 800a392:	4630      	mov	r0, r6
 800a394:	f7fc fe92 	bl	80070bc <_printf_i>
 800a398:	e7e4      	b.n	800a364 <_vfiprintf_r+0x208>
 800a39a:	bf00      	nop
 800a39c:	0800ac70 	.word	0x0800ac70
 800a3a0:	0800ac90 	.word	0x0800ac90
 800a3a4:	0800ac50 	.word	0x0800ac50
 800a3a8:	0800ae84 	.word	0x0800ae84
 800a3ac:	0800ae8e 	.word	0x0800ae8e
 800a3b0:	08006b75 	.word	0x08006b75
 800a3b4:	0800a137 	.word	0x0800a137
 800a3b8:	0800ae8a 	.word	0x0800ae8a
 800a3bc:	00000000 	.word	0x00000000

0800a3c0 <nan>:
 800a3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a3c8 <nan+0x8>
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	00000000 	.word	0x00000000
 800a3cc:	7ff80000 	.word	0x7ff80000

0800a3d0 <_sbrk_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d06      	ldr	r5, [pc, #24]	; (800a3ec <_sbrk_r+0x1c>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	f7f7 f9a8 	bl	8001730 <_sbrk>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_sbrk_r+0x1a>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_sbrk_r+0x1a>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20004cb4 	.word	0x20004cb4

0800a3f0 <__sread>:
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f8:	f000 fab8 	bl	800a96c <_read_r>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	bfab      	itete	ge
 800a400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a402:	89a3      	ldrhlt	r3, [r4, #12]
 800a404:	181b      	addge	r3, r3, r0
 800a406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a40a:	bfac      	ite	ge
 800a40c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a40e:	81a3      	strhlt	r3, [r4, #12]
 800a410:	bd10      	pop	{r4, pc}

0800a412 <__swrite>:
 800a412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a416:	461f      	mov	r7, r3
 800a418:	898b      	ldrh	r3, [r1, #12]
 800a41a:	05db      	lsls	r3, r3, #23
 800a41c:	4605      	mov	r5, r0
 800a41e:	460c      	mov	r4, r1
 800a420:	4616      	mov	r6, r2
 800a422:	d505      	bpl.n	800a430 <__swrite+0x1e>
 800a424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a428:	2302      	movs	r3, #2
 800a42a:	2200      	movs	r2, #0
 800a42c:	f000 fa1a 	bl	800a864 <_lseek_r>
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a43a:	81a3      	strh	r3, [r4, #12]
 800a43c:	4632      	mov	r2, r6
 800a43e:	463b      	mov	r3, r7
 800a440:	4628      	mov	r0, r5
 800a442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	f000 b88b 	b.w	800a560 <_write_r>

0800a44a <__sseek>:
 800a44a:	b510      	push	{r4, lr}
 800a44c:	460c      	mov	r4, r1
 800a44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a452:	f000 fa07 	bl	800a864 <_lseek_r>
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	bf15      	itete	ne
 800a45c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a45e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a466:	81a3      	strheq	r3, [r4, #12]
 800a468:	bf18      	it	ne
 800a46a:	81a3      	strhne	r3, [r4, #12]
 800a46c:	bd10      	pop	{r4, pc}

0800a46e <__sclose>:
 800a46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a472:	f000 b913 	b.w	800a69c <_close_r>

0800a476 <strncmp>:
 800a476:	b510      	push	{r4, lr}
 800a478:	b17a      	cbz	r2, 800a49a <strncmp+0x24>
 800a47a:	4603      	mov	r3, r0
 800a47c:	3901      	subs	r1, #1
 800a47e:	1884      	adds	r4, r0, r2
 800a480:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a484:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a488:	4290      	cmp	r0, r2
 800a48a:	d101      	bne.n	800a490 <strncmp+0x1a>
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d101      	bne.n	800a494 <strncmp+0x1e>
 800a490:	1a80      	subs	r0, r0, r2
 800a492:	bd10      	pop	{r4, pc}
 800a494:	2800      	cmp	r0, #0
 800a496:	d1f3      	bne.n	800a480 <strncmp+0xa>
 800a498:	e7fa      	b.n	800a490 <strncmp+0x1a>
 800a49a:	4610      	mov	r0, r2
 800a49c:	e7f9      	b.n	800a492 <strncmp+0x1c>
	...

0800a4a0 <__swbuf_r>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	460e      	mov	r6, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	b118      	cbz	r0, 800a4b2 <__swbuf_r+0x12>
 800a4aa:	6983      	ldr	r3, [r0, #24]
 800a4ac:	b90b      	cbnz	r3, 800a4b2 <__swbuf_r+0x12>
 800a4ae:	f7fe fc45 	bl	8008d3c <__sinit>
 800a4b2:	4b21      	ldr	r3, [pc, #132]	; (800a538 <__swbuf_r+0x98>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	d12b      	bne.n	800a510 <__swbuf_r+0x70>
 800a4b8:	686c      	ldr	r4, [r5, #4]
 800a4ba:	69a3      	ldr	r3, [r4, #24]
 800a4bc:	60a3      	str	r3, [r4, #8]
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	071a      	lsls	r2, r3, #28
 800a4c2:	d52f      	bpl.n	800a524 <__swbuf_r+0x84>
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	b36b      	cbz	r3, 800a524 <__swbuf_r+0x84>
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	6820      	ldr	r0, [r4, #0]
 800a4cc:	1ac0      	subs	r0, r0, r3
 800a4ce:	6963      	ldr	r3, [r4, #20]
 800a4d0:	b2f6      	uxtb	r6, r6
 800a4d2:	4283      	cmp	r3, r0
 800a4d4:	4637      	mov	r7, r6
 800a4d6:	dc04      	bgt.n	800a4e2 <__swbuf_r+0x42>
 800a4d8:	4621      	mov	r1, r4
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f000 f974 	bl	800a7c8 <_fflush_r>
 800a4e0:	bb30      	cbnz	r0, 800a530 <__swbuf_r+0x90>
 800a4e2:	68a3      	ldr	r3, [r4, #8]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	60a3      	str	r3, [r4, #8]
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	701e      	strb	r6, [r3, #0]
 800a4f0:	6963      	ldr	r3, [r4, #20]
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	4283      	cmp	r3, r0
 800a4f6:	d004      	beq.n	800a502 <__swbuf_r+0x62>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	07db      	lsls	r3, r3, #31
 800a4fc:	d506      	bpl.n	800a50c <__swbuf_r+0x6c>
 800a4fe:	2e0a      	cmp	r6, #10
 800a500:	d104      	bne.n	800a50c <__swbuf_r+0x6c>
 800a502:	4621      	mov	r1, r4
 800a504:	4628      	mov	r0, r5
 800a506:	f000 f95f 	bl	800a7c8 <_fflush_r>
 800a50a:	b988      	cbnz	r0, 800a530 <__swbuf_r+0x90>
 800a50c:	4638      	mov	r0, r7
 800a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <__swbuf_r+0x9c>)
 800a512:	429c      	cmp	r4, r3
 800a514:	d101      	bne.n	800a51a <__swbuf_r+0x7a>
 800a516:	68ac      	ldr	r4, [r5, #8]
 800a518:	e7cf      	b.n	800a4ba <__swbuf_r+0x1a>
 800a51a:	4b09      	ldr	r3, [pc, #36]	; (800a540 <__swbuf_r+0xa0>)
 800a51c:	429c      	cmp	r4, r3
 800a51e:	bf08      	it	eq
 800a520:	68ec      	ldreq	r4, [r5, #12]
 800a522:	e7ca      	b.n	800a4ba <__swbuf_r+0x1a>
 800a524:	4621      	mov	r1, r4
 800a526:	4628      	mov	r0, r5
 800a528:	f000 f82c 	bl	800a584 <__swsetup_r>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d0cb      	beq.n	800a4c8 <__swbuf_r+0x28>
 800a530:	f04f 37ff 	mov.w	r7, #4294967295
 800a534:	e7ea      	b.n	800a50c <__swbuf_r+0x6c>
 800a536:	bf00      	nop
 800a538:	0800ac70 	.word	0x0800ac70
 800a53c:	0800ac90 	.word	0x0800ac90
 800a540:	0800ac50 	.word	0x0800ac50

0800a544 <__ascii_wctomb>:
 800a544:	b149      	cbz	r1, 800a55a <__ascii_wctomb+0x16>
 800a546:	2aff      	cmp	r2, #255	; 0xff
 800a548:	bf85      	ittet	hi
 800a54a:	238a      	movhi	r3, #138	; 0x8a
 800a54c:	6003      	strhi	r3, [r0, #0]
 800a54e:	700a      	strbls	r2, [r1, #0]
 800a550:	f04f 30ff 	movhi.w	r0, #4294967295
 800a554:	bf98      	it	ls
 800a556:	2001      	movls	r0, #1
 800a558:	4770      	bx	lr
 800a55a:	4608      	mov	r0, r1
 800a55c:	4770      	bx	lr
	...

0800a560 <_write_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	; (800a580 <_write_r+0x20>)
 800a564:	4604      	mov	r4, r0
 800a566:	4608      	mov	r0, r1
 800a568:	4611      	mov	r1, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	602a      	str	r2, [r5, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	f7f7 f88d 	bl	800168e <_write>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_write_r+0x1e>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_write_r+0x1e>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20004cb4 	.word	0x20004cb4

0800a584 <__swsetup_r>:
 800a584:	4b32      	ldr	r3, [pc, #200]	; (800a650 <__swsetup_r+0xcc>)
 800a586:	b570      	push	{r4, r5, r6, lr}
 800a588:	681d      	ldr	r5, [r3, #0]
 800a58a:	4606      	mov	r6, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	b125      	cbz	r5, 800a59a <__swsetup_r+0x16>
 800a590:	69ab      	ldr	r3, [r5, #24]
 800a592:	b913      	cbnz	r3, 800a59a <__swsetup_r+0x16>
 800a594:	4628      	mov	r0, r5
 800a596:	f7fe fbd1 	bl	8008d3c <__sinit>
 800a59a:	4b2e      	ldr	r3, [pc, #184]	; (800a654 <__swsetup_r+0xd0>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	d10f      	bne.n	800a5c0 <__swsetup_r+0x3c>
 800a5a0:	686c      	ldr	r4, [r5, #4]
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5a8:	0719      	lsls	r1, r3, #28
 800a5aa:	d42c      	bmi.n	800a606 <__swsetup_r+0x82>
 800a5ac:	06dd      	lsls	r5, r3, #27
 800a5ae:	d411      	bmi.n	800a5d4 <__swsetup_r+0x50>
 800a5b0:	2309      	movs	r3, #9
 800a5b2:	6033      	str	r3, [r6, #0]
 800a5b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a5be:	e03e      	b.n	800a63e <__swsetup_r+0xba>
 800a5c0:	4b25      	ldr	r3, [pc, #148]	; (800a658 <__swsetup_r+0xd4>)
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	d101      	bne.n	800a5ca <__swsetup_r+0x46>
 800a5c6:	68ac      	ldr	r4, [r5, #8]
 800a5c8:	e7eb      	b.n	800a5a2 <__swsetup_r+0x1e>
 800a5ca:	4b24      	ldr	r3, [pc, #144]	; (800a65c <__swsetup_r+0xd8>)
 800a5cc:	429c      	cmp	r4, r3
 800a5ce:	bf08      	it	eq
 800a5d0:	68ec      	ldreq	r4, [r5, #12]
 800a5d2:	e7e6      	b.n	800a5a2 <__swsetup_r+0x1e>
 800a5d4:	0758      	lsls	r0, r3, #29
 800a5d6:	d512      	bpl.n	800a5fe <__swsetup_r+0x7a>
 800a5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5da:	b141      	cbz	r1, 800a5ee <__swsetup_r+0x6a>
 800a5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	d002      	beq.n	800a5ea <__swsetup_r+0x66>
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff fcaf 	bl	8009f48 <_free_r>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5f4:	81a3      	strh	r3, [r4, #12]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	6063      	str	r3, [r4, #4]
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	f043 0308 	orr.w	r3, r3, #8
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	6923      	ldr	r3, [r4, #16]
 800a608:	b94b      	cbnz	r3, 800a61e <__swsetup_r+0x9a>
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a614:	d003      	beq.n	800a61e <__swsetup_r+0x9a>
 800a616:	4621      	mov	r1, r4
 800a618:	4630      	mov	r0, r6
 800a61a:	f000 f95b 	bl	800a8d4 <__smakebuf_r>
 800a61e:	89a0      	ldrh	r0, [r4, #12]
 800a620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a624:	f010 0301 	ands.w	r3, r0, #1
 800a628:	d00a      	beq.n	800a640 <__swsetup_r+0xbc>
 800a62a:	2300      	movs	r3, #0
 800a62c:	60a3      	str	r3, [r4, #8]
 800a62e:	6963      	ldr	r3, [r4, #20]
 800a630:	425b      	negs	r3, r3
 800a632:	61a3      	str	r3, [r4, #24]
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	b943      	cbnz	r3, 800a64a <__swsetup_r+0xc6>
 800a638:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a63c:	d1ba      	bne.n	800a5b4 <__swsetup_r+0x30>
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	0781      	lsls	r1, r0, #30
 800a642:	bf58      	it	pl
 800a644:	6963      	ldrpl	r3, [r4, #20]
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	e7f4      	b.n	800a634 <__swsetup_r+0xb0>
 800a64a:	2000      	movs	r0, #0
 800a64c:	e7f7      	b.n	800a63e <__swsetup_r+0xba>
 800a64e:	bf00      	nop
 800a650:	20000010 	.word	0x20000010
 800a654:	0800ac70 	.word	0x0800ac70
 800a658:	0800ac90 	.word	0x0800ac90
 800a65c:	0800ac50 	.word	0x0800ac50

0800a660 <__assert_func>:
 800a660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a662:	4614      	mov	r4, r2
 800a664:	461a      	mov	r2, r3
 800a666:	4b09      	ldr	r3, [pc, #36]	; (800a68c <__assert_func+0x2c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4605      	mov	r5, r0
 800a66c:	68d8      	ldr	r0, [r3, #12]
 800a66e:	b14c      	cbz	r4, 800a684 <__assert_func+0x24>
 800a670:	4b07      	ldr	r3, [pc, #28]	; (800a690 <__assert_func+0x30>)
 800a672:	9100      	str	r1, [sp, #0]
 800a674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a678:	4906      	ldr	r1, [pc, #24]	; (800a694 <__assert_func+0x34>)
 800a67a:	462b      	mov	r3, r5
 800a67c:	f000 f8e0 	bl	800a840 <fiprintf>
 800a680:	f000 f986 	bl	800a990 <abort>
 800a684:	4b04      	ldr	r3, [pc, #16]	; (800a698 <__assert_func+0x38>)
 800a686:	461c      	mov	r4, r3
 800a688:	e7f3      	b.n	800a672 <__assert_func+0x12>
 800a68a:	bf00      	nop
 800a68c:	20000010 	.word	0x20000010
 800a690:	0800ae95 	.word	0x0800ae95
 800a694:	0800aea2 	.word	0x0800aea2
 800a698:	0800aed0 	.word	0x0800aed0

0800a69c <_close_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d06      	ldr	r5, [pc, #24]	; (800a6b8 <_close_r+0x1c>)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	f7f7 f80d 	bl	80016c6 <_close>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_close_r+0x1a>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_close_r+0x1a>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	20004cb4 	.word	0x20004cb4

0800a6bc <__sflush_r>:
 800a6bc:	898a      	ldrh	r2, [r1, #12]
 800a6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	0710      	lsls	r0, r2, #28
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	d458      	bmi.n	800a77c <__sflush_r+0xc0>
 800a6ca:	684b      	ldr	r3, [r1, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dc05      	bgt.n	800a6dc <__sflush_r+0x20>
 800a6d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dc02      	bgt.n	800a6dc <__sflush_r+0x20>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6de:	2e00      	cmp	r6, #0
 800a6e0:	d0f9      	beq.n	800a6d6 <__sflush_r+0x1a>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6e8:	682f      	ldr	r7, [r5, #0]
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	d032      	beq.n	800a754 <__sflush_r+0x98>
 800a6ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	075a      	lsls	r2, r3, #29
 800a6f4:	d505      	bpl.n	800a702 <__sflush_r+0x46>
 800a6f6:	6863      	ldr	r3, [r4, #4]
 800a6f8:	1ac0      	subs	r0, r0, r3
 800a6fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6fc:	b10b      	cbz	r3, 800a702 <__sflush_r+0x46>
 800a6fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a700:	1ac0      	subs	r0, r0, r3
 800a702:	2300      	movs	r3, #0
 800a704:	4602      	mov	r2, r0
 800a706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a708:	6a21      	ldr	r1, [r4, #32]
 800a70a:	4628      	mov	r0, r5
 800a70c:	47b0      	blx	r6
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	d106      	bne.n	800a722 <__sflush_r+0x66>
 800a714:	6829      	ldr	r1, [r5, #0]
 800a716:	291d      	cmp	r1, #29
 800a718:	d82c      	bhi.n	800a774 <__sflush_r+0xb8>
 800a71a:	4a2a      	ldr	r2, [pc, #168]	; (800a7c4 <__sflush_r+0x108>)
 800a71c:	40ca      	lsrs	r2, r1
 800a71e:	07d6      	lsls	r6, r2, #31
 800a720:	d528      	bpl.n	800a774 <__sflush_r+0xb8>
 800a722:	2200      	movs	r2, #0
 800a724:	6062      	str	r2, [r4, #4]
 800a726:	04d9      	lsls	r1, r3, #19
 800a728:	6922      	ldr	r2, [r4, #16]
 800a72a:	6022      	str	r2, [r4, #0]
 800a72c:	d504      	bpl.n	800a738 <__sflush_r+0x7c>
 800a72e:	1c42      	adds	r2, r0, #1
 800a730:	d101      	bne.n	800a736 <__sflush_r+0x7a>
 800a732:	682b      	ldr	r3, [r5, #0]
 800a734:	b903      	cbnz	r3, 800a738 <__sflush_r+0x7c>
 800a736:	6560      	str	r0, [r4, #84]	; 0x54
 800a738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a73a:	602f      	str	r7, [r5, #0]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d0ca      	beq.n	800a6d6 <__sflush_r+0x1a>
 800a740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a744:	4299      	cmp	r1, r3
 800a746:	d002      	beq.n	800a74e <__sflush_r+0x92>
 800a748:	4628      	mov	r0, r5
 800a74a:	f7ff fbfd 	bl	8009f48 <_free_r>
 800a74e:	2000      	movs	r0, #0
 800a750:	6360      	str	r0, [r4, #52]	; 0x34
 800a752:	e7c1      	b.n	800a6d8 <__sflush_r+0x1c>
 800a754:	6a21      	ldr	r1, [r4, #32]
 800a756:	2301      	movs	r3, #1
 800a758:	4628      	mov	r0, r5
 800a75a:	47b0      	blx	r6
 800a75c:	1c41      	adds	r1, r0, #1
 800a75e:	d1c7      	bne.n	800a6f0 <__sflush_r+0x34>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0c4      	beq.n	800a6f0 <__sflush_r+0x34>
 800a766:	2b1d      	cmp	r3, #29
 800a768:	d001      	beq.n	800a76e <__sflush_r+0xb2>
 800a76a:	2b16      	cmp	r3, #22
 800a76c:	d101      	bne.n	800a772 <__sflush_r+0xb6>
 800a76e:	602f      	str	r7, [r5, #0]
 800a770:	e7b1      	b.n	800a6d6 <__sflush_r+0x1a>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	e7ad      	b.n	800a6d8 <__sflush_r+0x1c>
 800a77c:	690f      	ldr	r7, [r1, #16]
 800a77e:	2f00      	cmp	r7, #0
 800a780:	d0a9      	beq.n	800a6d6 <__sflush_r+0x1a>
 800a782:	0793      	lsls	r3, r2, #30
 800a784:	680e      	ldr	r6, [r1, #0]
 800a786:	bf08      	it	eq
 800a788:	694b      	ldreq	r3, [r1, #20]
 800a78a:	600f      	str	r7, [r1, #0]
 800a78c:	bf18      	it	ne
 800a78e:	2300      	movne	r3, #0
 800a790:	eba6 0807 	sub.w	r8, r6, r7
 800a794:	608b      	str	r3, [r1, #8]
 800a796:	f1b8 0f00 	cmp.w	r8, #0
 800a79a:	dd9c      	ble.n	800a6d6 <__sflush_r+0x1a>
 800a79c:	6a21      	ldr	r1, [r4, #32]
 800a79e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7a0:	4643      	mov	r3, r8
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	47b0      	blx	r6
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	dc06      	bgt.n	800a7ba <__sflush_r+0xfe>
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b8:	e78e      	b.n	800a6d8 <__sflush_r+0x1c>
 800a7ba:	4407      	add	r7, r0
 800a7bc:	eba8 0800 	sub.w	r8, r8, r0
 800a7c0:	e7e9      	b.n	800a796 <__sflush_r+0xda>
 800a7c2:	bf00      	nop
 800a7c4:	20400001 	.word	0x20400001

0800a7c8 <_fflush_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	690b      	ldr	r3, [r1, #16]
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	b913      	cbnz	r3, 800a7d8 <_fflush_r+0x10>
 800a7d2:	2500      	movs	r5, #0
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	b118      	cbz	r0, 800a7e2 <_fflush_r+0x1a>
 800a7da:	6983      	ldr	r3, [r0, #24]
 800a7dc:	b90b      	cbnz	r3, 800a7e2 <_fflush_r+0x1a>
 800a7de:	f7fe faad 	bl	8008d3c <__sinit>
 800a7e2:	4b14      	ldr	r3, [pc, #80]	; (800a834 <_fflush_r+0x6c>)
 800a7e4:	429c      	cmp	r4, r3
 800a7e6:	d11b      	bne.n	800a820 <_fflush_r+0x58>
 800a7e8:	686c      	ldr	r4, [r5, #4]
 800a7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0ef      	beq.n	800a7d2 <_fflush_r+0xa>
 800a7f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7f4:	07d0      	lsls	r0, r2, #31
 800a7f6:	d404      	bmi.n	800a802 <_fflush_r+0x3a>
 800a7f8:	0599      	lsls	r1, r3, #22
 800a7fa:	d402      	bmi.n	800a802 <_fflush_r+0x3a>
 800a7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fe:	f7fe feae 	bl	800955e <__retarget_lock_acquire_recursive>
 800a802:	4628      	mov	r0, r5
 800a804:	4621      	mov	r1, r4
 800a806:	f7ff ff59 	bl	800a6bc <__sflush_r>
 800a80a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a80c:	07da      	lsls	r2, r3, #31
 800a80e:	4605      	mov	r5, r0
 800a810:	d4e0      	bmi.n	800a7d4 <_fflush_r+0xc>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	059b      	lsls	r3, r3, #22
 800a816:	d4dd      	bmi.n	800a7d4 <_fflush_r+0xc>
 800a818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a81a:	f7fe fea1 	bl	8009560 <__retarget_lock_release_recursive>
 800a81e:	e7d9      	b.n	800a7d4 <_fflush_r+0xc>
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <_fflush_r+0x70>)
 800a822:	429c      	cmp	r4, r3
 800a824:	d101      	bne.n	800a82a <_fflush_r+0x62>
 800a826:	68ac      	ldr	r4, [r5, #8]
 800a828:	e7df      	b.n	800a7ea <_fflush_r+0x22>
 800a82a:	4b04      	ldr	r3, [pc, #16]	; (800a83c <_fflush_r+0x74>)
 800a82c:	429c      	cmp	r4, r3
 800a82e:	bf08      	it	eq
 800a830:	68ec      	ldreq	r4, [r5, #12]
 800a832:	e7da      	b.n	800a7ea <_fflush_r+0x22>
 800a834:	0800ac70 	.word	0x0800ac70
 800a838:	0800ac90 	.word	0x0800ac90
 800a83c:	0800ac50 	.word	0x0800ac50

0800a840 <fiprintf>:
 800a840:	b40e      	push	{r1, r2, r3}
 800a842:	b503      	push	{r0, r1, lr}
 800a844:	4601      	mov	r1, r0
 800a846:	ab03      	add	r3, sp, #12
 800a848:	4805      	ldr	r0, [pc, #20]	; (800a860 <fiprintf+0x20>)
 800a84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84e:	6800      	ldr	r0, [r0, #0]
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	f7ff fc83 	bl	800a15c <_vfiprintf_r>
 800a856:	b002      	add	sp, #8
 800a858:	f85d eb04 	ldr.w	lr, [sp], #4
 800a85c:	b003      	add	sp, #12
 800a85e:	4770      	bx	lr
 800a860:	20000010 	.word	0x20000010

0800a864 <_lseek_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d07      	ldr	r5, [pc, #28]	; (800a884 <_lseek_r+0x20>)
 800a868:	4604      	mov	r4, r0
 800a86a:	4608      	mov	r0, r1
 800a86c:	4611      	mov	r1, r2
 800a86e:	2200      	movs	r2, #0
 800a870:	602a      	str	r2, [r5, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	f7f6 ff4e 	bl	8001714 <_lseek>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_lseek_r+0x1e>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_lseek_r+0x1e>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	20004cb4 	.word	0x20004cb4

0800a888 <__swhatbuf_r>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	460e      	mov	r6, r1
 800a88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a890:	2900      	cmp	r1, #0
 800a892:	b096      	sub	sp, #88	; 0x58
 800a894:	4614      	mov	r4, r2
 800a896:	461d      	mov	r5, r3
 800a898:	da08      	bge.n	800a8ac <__swhatbuf_r+0x24>
 800a89a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	602a      	str	r2, [r5, #0]
 800a8a2:	061a      	lsls	r2, r3, #24
 800a8a4:	d410      	bmi.n	800a8c8 <__swhatbuf_r+0x40>
 800a8a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8aa:	e00e      	b.n	800a8ca <__swhatbuf_r+0x42>
 800a8ac:	466a      	mov	r2, sp
 800a8ae:	f000 f877 	bl	800a9a0 <_fstat_r>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	dbf1      	blt.n	800a89a <__swhatbuf_r+0x12>
 800a8b6:	9a01      	ldr	r2, [sp, #4]
 800a8b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8c0:	425a      	negs	r2, r3
 800a8c2:	415a      	adcs	r2, r3
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	e7ee      	b.n	800a8a6 <__swhatbuf_r+0x1e>
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	b016      	add	sp, #88	; 0x58
 800a8d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8d4 <__smakebuf_r>:
 800a8d4:	898b      	ldrh	r3, [r1, #12]
 800a8d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8d8:	079d      	lsls	r5, r3, #30
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460c      	mov	r4, r1
 800a8de:	d507      	bpl.n	800a8f0 <__smakebuf_r+0x1c>
 800a8e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	6123      	str	r3, [r4, #16]
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	6163      	str	r3, [r4, #20]
 800a8ec:	b002      	add	sp, #8
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	ab01      	add	r3, sp, #4
 800a8f2:	466a      	mov	r2, sp
 800a8f4:	f7ff ffc8 	bl	800a888 <__swhatbuf_r>
 800a8f8:	9900      	ldr	r1, [sp, #0]
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff fb8f 	bl	800a020 <_malloc_r>
 800a902:	b948      	cbnz	r0, 800a918 <__smakebuf_r+0x44>
 800a904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a908:	059a      	lsls	r2, r3, #22
 800a90a:	d4ef      	bmi.n	800a8ec <__smakebuf_r+0x18>
 800a90c:	f023 0303 	bic.w	r3, r3, #3
 800a910:	f043 0302 	orr.w	r3, r3, #2
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	e7e3      	b.n	800a8e0 <__smakebuf_r+0xc>
 800a918:	4b0d      	ldr	r3, [pc, #52]	; (800a950 <__smakebuf_r+0x7c>)
 800a91a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	6020      	str	r0, [r4, #0]
 800a920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	9b00      	ldr	r3, [sp, #0]
 800a928:	6163      	str	r3, [r4, #20]
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	6120      	str	r0, [r4, #16]
 800a92e:	b15b      	cbz	r3, 800a948 <__smakebuf_r+0x74>
 800a930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a934:	4630      	mov	r0, r6
 800a936:	f000 f845 	bl	800a9c4 <_isatty_r>
 800a93a:	b128      	cbz	r0, 800a948 <__smakebuf_r+0x74>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	f043 0301 	orr.w	r3, r3, #1
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	89a0      	ldrh	r0, [r4, #12]
 800a94a:	4305      	orrs	r5, r0
 800a94c:	81a5      	strh	r5, [r4, #12]
 800a94e:	e7cd      	b.n	800a8ec <__smakebuf_r+0x18>
 800a950:	08008cd5 	.word	0x08008cd5

0800a954 <__malloc_lock>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__malloc_lock+0x8>)
 800a956:	f7fe be02 	b.w	800955e <__retarget_lock_acquire_recursive>
 800a95a:	bf00      	nop
 800a95c:	20004ca8 	.word	0x20004ca8

0800a960 <__malloc_unlock>:
 800a960:	4801      	ldr	r0, [pc, #4]	; (800a968 <__malloc_unlock+0x8>)
 800a962:	f7fe bdfd 	b.w	8009560 <__retarget_lock_release_recursive>
 800a966:	bf00      	nop
 800a968:	20004ca8 	.word	0x20004ca8

0800a96c <_read_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4d07      	ldr	r5, [pc, #28]	; (800a98c <_read_r+0x20>)
 800a970:	4604      	mov	r4, r0
 800a972:	4608      	mov	r0, r1
 800a974:	4611      	mov	r1, r2
 800a976:	2200      	movs	r2, #0
 800a978:	602a      	str	r2, [r5, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	f7f6 fe6a 	bl	8001654 <_read>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_read_r+0x1e>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_read_r+0x1e>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	20004cb4 	.word	0x20004cb4

0800a990 <abort>:
 800a990:	b508      	push	{r3, lr}
 800a992:	2006      	movs	r0, #6
 800a994:	f000 f84e 	bl	800aa34 <raise>
 800a998:	2001      	movs	r0, #1
 800a99a:	f7f6 fe51 	bl	8001640 <_exit>
	...

0800a9a0 <_fstat_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d07      	ldr	r5, [pc, #28]	; (800a9c0 <_fstat_r+0x20>)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	f7f6 fe96 	bl	80016de <_fstat>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d102      	bne.n	800a9bc <_fstat_r+0x1c>
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	b103      	cbz	r3, 800a9bc <_fstat_r+0x1c>
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	bd38      	pop	{r3, r4, r5, pc}
 800a9be:	bf00      	nop
 800a9c0:	20004cb4 	.word	0x20004cb4

0800a9c4 <_isatty_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4d06      	ldr	r5, [pc, #24]	; (800a9e0 <_isatty_r+0x1c>)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	602b      	str	r3, [r5, #0]
 800a9d0:	f7f6 fe95 	bl	80016fe <_isatty>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_isatty_r+0x1a>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_isatty_r+0x1a>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20004cb4 	.word	0x20004cb4

0800a9e4 <_raise_r>:
 800a9e4:	291f      	cmp	r1, #31
 800a9e6:	b538      	push	{r3, r4, r5, lr}
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	d904      	bls.n	800a9f8 <_raise_r+0x14>
 800a9ee:	2316      	movs	r3, #22
 800a9f0:	6003      	str	r3, [r0, #0]
 800a9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9fa:	b112      	cbz	r2, 800aa02 <_raise_r+0x1e>
 800a9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa00:	b94b      	cbnz	r3, 800aa16 <_raise_r+0x32>
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 f830 	bl	800aa68 <_getpid_r>
 800aa08:	462a      	mov	r2, r5
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa12:	f000 b817 	b.w	800aa44 <_kill_r>
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d00a      	beq.n	800aa30 <_raise_r+0x4c>
 800aa1a:	1c59      	adds	r1, r3, #1
 800aa1c:	d103      	bne.n	800aa26 <_raise_r+0x42>
 800aa1e:	2316      	movs	r3, #22
 800aa20:	6003      	str	r3, [r0, #0]
 800aa22:	2001      	movs	r0, #1
 800aa24:	e7e7      	b.n	800a9f6 <_raise_r+0x12>
 800aa26:	2400      	movs	r4, #0
 800aa28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	4798      	blx	r3
 800aa30:	2000      	movs	r0, #0
 800aa32:	e7e0      	b.n	800a9f6 <_raise_r+0x12>

0800aa34 <raise>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	; (800aa40 <raise+0xc>)
 800aa36:	4601      	mov	r1, r0
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f7ff bfd3 	b.w	800a9e4 <_raise_r>
 800aa3e:	bf00      	nop
 800aa40:	20000010 	.word	0x20000010

0800aa44 <_kill_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d07      	ldr	r5, [pc, #28]	; (800aa64 <_kill_r+0x20>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	4611      	mov	r1, r2
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	f7f6 fde5 	bl	8001620 <_kill>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	d102      	bne.n	800aa60 <_kill_r+0x1c>
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	b103      	cbz	r3, 800aa60 <_kill_r+0x1c>
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
 800aa62:	bf00      	nop
 800aa64:	20004cb4 	.word	0x20004cb4

0800aa68 <_getpid_r>:
 800aa68:	f7f6 bdd2 	b.w	8001610 <_getpid>

0800aa6c <_init>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	bf00      	nop
 800aa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa72:	bc08      	pop	{r3}
 800aa74:	469e      	mov	lr, r3
 800aa76:	4770      	bx	lr

0800aa78 <_fini>:
 800aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7a:	bf00      	nop
 800aa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7e:	bc08      	pop	{r3}
 800aa80:	469e      	mov	lr, r3
 800aa82:	4770      	bx	lr
